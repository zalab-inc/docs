Directory structure:
└── TheEdoRan-next-safe-action
    ├── pnpm-workspace.yaml
    ├── .github
    │   ├── workflows
    │   │   └── cicd.yml
    │   ├── pull_request_template.md
    │   ├── FUNDING.yml
    │   ├── CODE_OF_CONDUCT.md
    │   └── ISSUE_TEMPLATE
    │       ├── 1_bug_report.yml
    │       └── config.yml
    ├── apps
    │   └── playground
    │       ├── .gitignore
    │       ├── next.config.js
    │       ├── .eslintrc.json
    │       ├── postcss.config.js
    │       ├── package.json
    │       ├── tsconfig.json
    │       ├── README.md
    │       ├── tailwind.config.js
    │       └── src
    │           ├── lib
    │           │   └── safe-action.ts
    │           └── app
    │               ├── (examples)
    │               │   ├── optimistic-hook
    │               │   │   ├── addtodo-action.ts
    │               │   │   ├── page.tsx
    │               │   │   └── addtodo-form.tsx
    │               │   ├── async-schema
    │               │   │   ├── page.tsx
    │               │   │   └── login-action.ts
    │               │   ├── no-arguments
    │               │   │   ├── page.tsx
    │               │   │   └── noargs-action.ts
    │               │   ├── with-context
    │               │   │   ├── edituser-action.ts
    │               │   │   └── page.tsx
    │               │   ├── hook
    │               │   │   ├── page.tsx
    │               │   │   └── deleteuser-action.ts
    │               │   ├── nested-schema
    │               │   │   ├── page.tsx
    │               │   │   └── shop-action.ts
    │               │   ├── empty-response
    │               │   │   ├── empty-action.ts
    │               │   │   └── page.tsx
    │               │   ├── react-hook-form
    │               │   │   ├── page.tsx
    │               │   │   ├── buyproduct-action.ts
    │               │   │   └── validation.ts
    │               │   ├── direct
    │               │   │   ├── page.tsx
    │               │   │   └── login-action.ts
    │               │   ├── file-upload
    │               │   │   ├── page.tsx
    │               │   │   └── file-upload-action.ts
    │               │   ├── layout.tsx
    │               │   ├── stateful-form
    │               │   │   ├── page.tsx
    │               │   │   └── stateful-form-action.ts
    │               │   ├── bind-arguments
    │               │   │   ├── page.tsx
    │               │   │   └── onboard-action.ts
    │               │   └── stateless-form
    │               │       ├── page.tsx
    │               │       └── stateless-form-action.ts
    │               ├── page.tsx
    │               ├── github-logo.tsx
    │               ├── globals.css
    │               ├── _components
    │               │   ├── styled-heading.tsx
    │               │   ├── result-box.tsx
    │               │   ├── example-github-link.tsx
    │               │   ├── styled-input.tsx
    │               │   ├── styled-button.tsx
    │               │   └── example-link.tsx
    │               └── layout.tsx
    ├── assets
    ├── .eslintignore
    ├── package.json
    ├── .nvmrc
    ├── .husky
    │   ├── prepare-commit-msg
    │   └── commit-msg
    ├── commitlint.config.js
    ├── website
    │   ├── docs
    │   │   ├── troubleshooting.md
    │   │   ├── contributing.md
    │   │   ├── recipes
    │   │   │   ├── playground.md
    │   │   │   ├── _category_.json
    │   │   │   ├── upload-files.md
    │   │   │   ├── i18n.md
    │   │   │   └── form-actions.md
    │   │   ├── execute-actions
    │   │   │   ├── direct-execution.md
    │   │   │   ├── _category_.json
    │   │   │   └── hooks
    │   │   │       ├── useoptimisticaction.md
    │   │   │       ├── usestateaction.md
    │   │   │       ├── _category_.json
    │   │   │       ├── hook-base-utils.md
    │   │   │       ├── useaction.md
    │   │   │       └── hook-callbacks.md
    │   │   ├── define-actions
    │   │   │   ├── action-utils.md
    │   │   │   ├── bind-arguments.md
    │   │   │   ├── action-result-object.md
    │   │   │   ├── instance-methods.md
    │   │   │   ├── _category_.json
    │   │   │   ├── middleware.md
    │   │   │   ├── validation-errors.md
    │   │   │   ├── extend-previous-schemas.md
    │   │   │   └── create-the-client.mdx
    │   │   ├── migrations
    │   │   │   ├── v4-to-v5.md
    │   │   │   ├── v5-to-v6.md
    │   │   │   ├── v3-to-v4.md
    │   │   │   ├── v6-to-v7.md
    │   │   │   └── _category_.json
    │   │   ├── integrations
    │   │   │   ├── react-hook-form.md
    │   │   │   └── _category_.json
    │   │   ├── getting-started.mdx
    │   │   └── types
    │   │       ├── _category_.json
    │   │       └── infer-types.md
    │   ├── pnpm-workspace.yaml
    │   ├── sidebars.js
    │   ├── .gitignore
    │   ├── postcss.config.js
    │   ├── vercel.json
    │   ├── package.json
    │   ├── babel.config.js
    │   ├── tsconfig.json
    │   ├── pnpm-lock.yaml
    │   ├── docusaurus.config.js
    │   ├── tailwind.config.js
    │   ├── src
    │   │   ├── components
    │   │   │   └── landing
    │   │   │       ├── tweet.tsx
    │   │   │       ├── testimonials.tsx
    │   │   │       ├── github-button.tsx
    │   │   │       ├── features.tsx
    │   │   │       ├── hero.tsx
    │   │   │       ├── getting-started.tsx
    │   │   │       └── index.tsx
    │   │   ├── pages
    │   │   │   └── index.tsx
    │   │   └── css
    │   │       └── custom.css
    │   └── static
    │       ├── google0917abe14cfb4fd2.html
    │       ├── vid
    │       │   └── demo.mp4
    │       ├── .nojekyll
    │       └── img
    │           ├── x
    │           └── favicon.ico
    ├── packages
    │   └── next-safe-action
    │       ├── .eslintrc.js
    │       ├── tsup.config.ts
    │       ├── package.json
    │       ├── .prettierrc.json
    │       ├── release.config.cjs
    │       ├── LICENSE
    │       ├── tsconfig.json
    │       ├── README.md
    │       └── src
    │           ├── action-builder.ts
    │           ├── hooks-utils.ts
    │           ├── validation-errors.types.ts
    │           ├── middleware.ts
    │           ├── validation-errors.ts
    │           ├── next
    │           │   └── errors
    │           │       ├── bailout-to-csr.ts
    │           │       ├── http-access-fallback.ts
    │           │       ├── postpone.ts
    │           │       ├── router.ts
    │           │       ├── redirect.ts
    │           │       ├── index.ts
    │           │       └── dynamic-usage.ts
    │           ├── index.types.ts
    │           ├── utils.types.ts
    │           ├── utils.ts
    │           ├── hooks.ts
    │           ├── index.ts
    │           ├── safe-action-client.ts
    │           ├── __tests__
    │           │   ├── happy-path.test.ts
    │           │   ├── middleware.test.ts
    │           │   ├── action-callbacks.test.ts
    │           │   ├── server-error.test.ts
    │           │   ├── bind-args-validation-errors.test.ts
    │           │   ├── combined-validation-errors.test.ts
    │           │   ├── validation-errors.test.ts
    │           │   └── metadata.test.ts
    │           ├── hooks.types.ts
    │           ├── stateful-hooks.ts
    │           └── adapters
    │               ├── types.ts
    │               ├── yup.ts
    │               ├── typebox.ts
    │               ├── zod.ts
    │               └── valibot.ts
    ├── turbo.json
    └── README.md

================================================
File: /pnpm-workspace.yaml
================================================
packages:
  - "packages/*"
  - "apps/*"

================================================
File: /.github/workflows/cicd.yml
================================================
name: CI/CD

on:
  push:
    paths:
      - "packages/**"
      - "turbo.json"
      - "package.json"
    branches:
      - main
      - beta
      - next
      - experimental
      - 4.x
  pull_request:
    paths:
      - "packages/**"

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm run lint:lib
      - run: pnpm run test:lib

  CD:
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/next'|| github.ref == 'refs/heads/experimental' || github.ref == 'refs/heads/4.x' }}
    runs-on: ubuntu-latest
    needs: [CI]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build:lib
      - name: Release lib to NPM
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm run deploy:lib


================================================
File: /.github/pull_request_template.md
================================================
# Proposed changes

Put your proposed changes here.

## Related issue(s) or discussion(s)

re #

---

- [ ] I read the [contributing guidelines](https://github.com/TheEdoRan/next-safe-action/blob/next/CONTRIBUTING.md) and followed them before creating this pull request.


================================================
File: /.github/FUNDING.yml
================================================
github: [TheEdoRan]


================================================
File: /.github/CODE_OF_CONDUCT.md
================================================
# Contributor Covenant Code of Conduct

## Our Pledge

In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.

## Our Standards

Examples of behavior that contributes to creating a positive environment include:

- Using welcoming and inclusive language
- Being respectful of differing viewpoints and experiences
- Gracefully accepting constructive criticism
- Focusing on what is best for the community
- Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

- The use of sexualized language or imagery and unwelcome sexual attention or advances
- Trolling, insulting/derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or electronic address, without explicit permission
- Other conduct which could reasonably be considered inappropriate in a professional setting

## Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.

## Scope

This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project maintainer(s) using the following email address: info\[at\]next-safe-action\[dot\]dev or via [private message on X](https://twitter.com/TheEdoRan). All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org), version 1.4, available at <https://www.contributor-covenant.org/version/1/4/code-of-conduct.html>

For answers to common questions about this code of conduct, see <https://www.contributor-covenant.org/faq>


================================================
File: /.github/ISSUE_TEMPLATE/1_bug_report.yml
================================================
name: Bug report
description: Create a report to help us fix bugs.
title: "[BUG] "
labels: ["bug"]
body:
  - type: checkboxes
    attributes:
      label: Are you using the latest version of this library?
      description: Please confirm that you are using the latest version of next-safe-action.
      options:
        - label: I verified that the issue exists in the latest next-safe-action release
          required: true
  - type: checkboxes
    attributes:
      label: Is there an existing issue for this?
      description: Please search to see if an issue already exists for the bug you encountered.
      options:
        - label: I have searched the existing issues and found nothing that matches
          required: true
  - type: textarea
    attributes:
      label: Describe the bug
      description: A clear and concise description of what the bug is.
      placeholder: I found out that the '...' functionality is not working.
    validations:
      required: true
  - type: textarea
    attributes:
      label: Reproduction steps
      description: Steps to reproduce the incorrect behavior.
      placeholder: |
        A step-by-step reproduction of the bug. For example:
        1. Go to '...'
        2. Click on '...'
        3. Scroll down to '...'
        4. See error
    validations:
      required: true
  - type: textarea
    attributes:
      label: Expected behavior
      description: A description of what you expected to happen instead.
      placeholder: I expected that this happened instead.
    validations:
      required: true
  - type: input
    attributes:
      label: Link to a minimal reproduction of the issue
      description: Link to a minimal example that reproduces the bug. Please provide a GitHub/CodeSandbox link with as little code as possible to reproduce the issue. Without a link, the issue will be closed as "not planned" until a valid URL is provided.
      placeholder: https://github.com/...
    validations:
      required: true
  - type: markdown
    attributes:
      value: Information about the environment you are using.
  - type: input
    attributes:
      label: Operating System
      placeholder: Windows 11, macOS, Ubuntu 22.04
    validations:
      required: true
  - type: input
    attributes:
      label: Library version
      placeholder: 6.0.0
    validations:
      required: true
  - type: input
    attributes:
      label: Next.js version
      placeholder: 14.x.x
    validations:
      required: true
  - type: input
    attributes:
      label: Node.js version
      placeholder: 20.x.x
    validations:
      required: true
  - type: textarea
    attributes:
      label: Additional context
      description: Add any other context about the problem here.
    validations:
      required: false


================================================
File: /.github/ISSUE_TEMPLATE/config.yml
================================================
blank_issues_enabled: false
contact_links:
  - name: Feature request
    url: https://github.com/TheEdoRan/next-safe-action/discussions/new?category=ideas
    about: Do you want to help us improve the library? Open a new discussion to suggest an idea.
  - name: Ask a question
    url: https://github.com/TheEdoRan/next-safe-action/discussions/new?category=q-a
    about: Do you want to ask something about the library? Open a new discussion to get help from the community.


================================================
File: /apps/playground/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


================================================
File: /apps/playground/next.config.js
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
	experimental: {
		authInterrupts: true,
	},
};

module.exports = nextConfig;


================================================
File: /apps/playground/.eslintrc.json
================================================
{
	"root": true,
	"extends": "next/core-web-vitals"
}


================================================
File: /apps/playground/postcss.config.js
================================================
module.exports = {
	plugins: {
		tailwindcss: {},
		autoprefixer: {},
	},
};


================================================
File: /apps/playground/package.json
================================================
{
	"name": "@apps/playground",
	"version": "0.0.0",
	"private": true,
	"scripts": {
		"dev": "next dev",
		"build": "next build",
		"start": "next start",
		"lint": "next lint"
	},
	"author": "Edoardo Ranghieri",
	"dependencies": {
		"@hookform/resolvers": "^3.9.1",
		"lucide-react": "^0.460.0",
		"next": "15.1.0",
		"next-safe-action": "workspace:*",
		"react": "^19",
		"react-dom": "^19",
		"react-hook-form": "^7.53.2",
		"zod": "^3.23.8",
		"zod-form-data": "^2.0.2"
	},
	"devDependencies": {
		"@types/node": "^22",
		"@types/react": "^19",
		"@types/react-dom": "^19",
		"autoprefixer": "10.4.20",
		"eslint": "^8.57.0",
		"eslint-config-next": "15.0.4-canary.45",
		"postcss": "8.4.49",
		"tailwindcss": "3.4.15",
		"typescript": "^5.6.3"
	}
}


================================================
File: /apps/playground/tsconfig.json
================================================
{
	"compilerOptions": {
		"target": "es5",
		"lib": ["dom", "dom.iterable", "esnext"],
		"allowJs": true,
		"skipLibCheck": true,
		"strict": true,
		"forceConsistentCasingInFileNames": true,
		"noEmit": true,
		"esModuleInterop": true,
		"module": "esnext",
		"moduleResolution": "node",
		"resolveJsonModule": true,
		"isolatedModules": true,
		"jsx": "preserve",
		"incremental": true,
		"plugins": [
			{
				"name": "next"
			}
		],
		"paths": {
			"@/*": ["./src/*"]
		}
	},
	"include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
	"exclude": ["node_modules"]
}


================================================
File: /apps/playground/README.md
================================================
Try it yourself: [Link to example on Vercel](https://next-safe-action-playground.vercel.app/).

This is a basic implementation of the [next-safe-action](../../packages/next-safe-action) library.


================================================
File: /apps/playground/tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
	// darkMode: "class",
	content: [
		"./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
		"./src/components/**/*.{js,ts,jsx,tsx,mdx}",
		"./src/app/**/*.{js,ts,jsx,tsx,mdx}",
	],
	plugins: [],
};


================================================
File: /apps/playground/src/lib/safe-action.ts
================================================
import {
	DEFAULT_SERVER_ERROR_MESSAGE,
	createSafeActionClient,
} from "next-safe-action";
import { zodAdapter } from "next-safe-action/adapters/zod";
import { z } from "zod";

export class ActionError extends Error {}

export const action = createSafeActionClient({
	validationAdapter: zodAdapter(),
	// You can provide a custom handler for server errors, otherwise the lib will use `console.error`
	// as the default logging mechanism and will return the DEFAULT_SERVER_ERROR_MESSAGE for all server errors.
	handleServerError: (e) => {
		console.error("Action server error occurred:", e.message);

		// If the error is an instance of `ActionError`, unmask the message.
		if (e instanceof ActionError) {
			return e.message;
		}

		// Otherwise return default error message.
		return DEFAULT_SERVER_ERROR_MESSAGE;
	},
	// Here we define a metadata type to be used in `metadata` instance method.
	defineMetadataSchema() {
		return z.object({
			actionName: z.string(),
		});
	},
}).use(async ({ next, metadata, clientInput, bindArgsClientInputs, ctx }) => {
	// Here we use a logging middleware.
	const start = Date.now();

	// Here we await the next middleware.
	const result = await next();

	const end = Date.now();

	const durationInMs = end - start;

	const logObject: Record<string, any> = { durationInMs };

	logObject.clientInput = clientInput;
	logObject.bindArgsClientInputs = bindArgsClientInputs;
	logObject.metadata = metadata;
	logObject.result = result;

	console.log("LOGGING FROM MIDDLEWARE:");
	console.dir(logObject, { depth: null });

	// And then return the result of the awaited next middleware.
	return result;
});

async function getSessionId() {
	return crypto.randomUUID();
}

export const authAction = action
	// In this case, context is used for (fake) auth purposes.
	.use(async ({ next }) => {
		const userId = crypto.randomUUID();

		console.log("HELLO FROM FIRST AUTH ACTION MIDDLEWARE, USER ID:", userId);

		return next({
			ctx: {
				userId,
			},
		});
	})
	// Here we get `userId` from the previous context, and it's all type safe.
	.use(async ({ ctx, next }) => {
		// Emulate a slow server.
		await new Promise((res) =>
			setTimeout(res, Math.max(Math.random() * 2000, 500))
		);

		const sessionId = await getSessionId();

		console.log(
			"HELLO FROM SECOND AUTH ACTION MIDDLEWARE, SESSION ID:",
			sessionId
		);

		return next({
			ctx: {
				...ctx, // here we spread the previous context to extend it
				sessionId, // with session id
			},
		});
	});


================================================
File: /apps/playground/src/app/(examples)/optimistic-hook/addtodo-action.ts
================================================
"use server";

import { ActionError, action } from "@/lib/safe-action";
import { revalidatePath } from "next/cache";
import { z } from "zod";

const schema = z.object({
	id: z.string().uuid(),
	body: z.string().min(1),
	completed: z.boolean(),
});

export type Todo = z.infer<typeof schema>;

let todos: Todo[] = [];
export const getTodos = async () => todos;

export const addTodo = action
	.metadata({ actionName: "" })
	.schema(schema)
	.action(async ({ parsedInput }) => {
		await new Promise((res) => setTimeout(res, 500));

		if (Math.random() > 0.5) {
			throw new ActionError(
				"Could not add todo right now, please try again later."
			);
		}

		todos.push(parsedInput);

		// This Next.js function revalidates the provided path.
		// More info here: https://nextjs.org/docs/app/api-reference/functions/revalidatePath
		revalidatePath("/optimistic-hook");

		return {
			newTodo: parsedInput,
		};
	});


================================================
File: /apps/playground/src/app/(examples)/optimistic-hook/page.tsx
================================================
import { StyledHeading } from "@/app/_components/styled-heading";
import { getTodos } from "./addtodo-action";
import AddTodoForm from "./addtodo-form";

export default async function OptimisticHookPage() {
	const todos = await getTodos();

	return (
		<main className="w-96 max-w-full px-4">
			<StyledHeading>Action using optimistic hook</StyledHeading>
			{/* Pass the server state to Client Component */}
			<AddTodoForm todos={todos} />
		</main>
	);
}


================================================
File: /apps/playground/src/app/(examples)/optimistic-hook/addtodo-form.tsx
================================================
"use client";

import { StyledButton } from "@/app/_components/styled-button";
import { StyledInput } from "@/app/_components/styled-input";
import { useOptimisticAction } from "next-safe-action/hooks";
import { ResultBox } from "../../_components/result-box";
import { Todo, addTodo } from "./addtodo-action";

type Props = {
	todos: Todo[];
};

const AddTodoForm = ({ todos }: Props) => {
	// Here we pass safe action (`addTodo`) and current server data to `useOptimisticAction` hook.
	const { execute, result, status, reset, optimisticState } =
		useOptimisticAction(addTodo, {
			currentState: { todos },
			updateFn: (state, newTodo) => ({
				todos: [...state.todos, newTodo],
			}),
			onSuccess({ data, input }) {
				console.log("HELLO FROM ONSUCCESS", data, input);
			},
			onError({ error, input }) {
				console.log("OH NO FROM ONERROR", error, input);
			},
			onSettled({ result, input }) {
				console.log("HELLO FROM ONSETTLED", result, input);
			},
			onExecute({ input }) {
				console.log("HELLO FROM ONEXECUTE", input);
			},
		});

	console.log("status:", status);

	return (
		<>
			<form
				className="flex flex-col mt-8 space-y-4"
				onSubmit={(e) => {
					e.preventDefault();
					const formData = new FormData(e.currentTarget);
					const body = formData.get("body") as string;

					// Action call. Here we pass action input and expected (optimistic)
					// data.
					execute({ id: crypto.randomUUID(), body, completed: false });
				}}>
				<StyledInput type="text" name="body" placeholder="Todo body" />
				<StyledButton type="submit">Add todo</StyledButton>
				<StyledButton type="button" onClick={reset}>
					Reset
				</StyledButton>
			</form>
			<ResultBox
				result={optimisticState}
				status={status}
				customTitle="Optimistic data:"
			/>
		</>
	);
};

export default AddTodoForm;


================================================
File: /apps/playground/src/app/(examples)/async-schema/page.tsx
================================================
"use client";

import { StyledButton } from "@/app/_components/styled-button";
import { StyledHeading } from "@/app/_components/styled-heading";
import { StyledInput } from "@/app/_components/styled-input";
import { useState } from "react";
import { ResultBox } from "../../_components/result-box";
import { loginUser } from "./login-action";

export default function AsyncSchemaPage() {
	const [result, setResult] = useState<any>(undefined);

	return (
		<main className="w-96 max-w-full px-4">
			<StyledHeading>
				Action using direct call
				<br />
				(async schema)
			</StyledHeading>
			<form
				className="flex flex-col mt-8 space-y-4"
				onSubmit={async (e) => {
					e.preventDefault();
					const formData = new FormData(e.currentTarget);
					const input = Object.fromEntries(formData) as {
						username: string;
						password: string;
					};
					const res = await loginUser(input); // this is the type safe action directly called
					setResult(res);
				}}>
				<StyledInput
					type="text"
					name="username"
					id="username"
					placeholder="Username"
				/>
				<StyledInput
					type="password"
					name="password"
					id="password"
					placeholder="Password"
				/>
				<StyledButton type="submit">Log in</StyledButton>
			</form>
			<ResultBox result={result} />
		</main>
	);
}


================================================
File: /apps/playground/src/app/(examples)/async-schema/login-action.ts
================================================
"use server";

import { action } from "@/lib/safe-action";
import {
	flattenValidationErrors,
	returnValidationErrors,
} from "next-safe-action";
import { z } from "zod";

async function getSchema() {
	return z.object({
		username: z.string().min(3).max(10),
		password: z.string().min(8).max(100),
	});
}

export const loginUser = action
	.metadata({ actionName: "loginUser" })
	.schema(getSchema, {
		// Here we use the `flattenValidationErrors` function to customize the returned validation errors
		// object to the client.
		handleValidationErrorsShape: async (ve) =>
			flattenValidationErrors(ve).fieldErrors,
	})
	.action(async ({ parsedInput: { username, password } }) => {
		if (username === "johndoe") {
			returnValidationErrors(getSchema, {
				username: {
					_errors: ["user_suspended"],
				},
			});
		}

		if (username === "user" && password === "password") {
			return {
				success: true,
			};
		}

		returnValidationErrors(getSchema, {
			username: {
				_errors: ["incorrect_credentials"],
			},
		});
	});


================================================
File: /apps/playground/src/app/(examples)/no-arguments/page.tsx
================================================
"use client";

import { StyledButton } from "@/app/_components/styled-button";
import { StyledHeading } from "@/app/_components/styled-heading";
import { useAction } from "next-safe-action/hooks";
import { ResultBox } from "../../_components/result-box";
import { noargsAction } from "./noargs-action";

export default function EmptySchema() {
	const { execute, result, status, reset } = useAction(noargsAction);

	console.log("status:", status);

	return (
		<main className="w-96 max-w-full px-4">
			<StyledHeading>Action without arguments</StyledHeading>
			<form
				className="flex flex-col mt-8 space-y-4"
				onSubmit={(e) => {
					e.preventDefault();
					// Action call.
					execute();
				}}>
				<StyledButton type="submit">Execute action</StyledButton>
				<StyledButton type="button" onClick={reset}>
					Reset
				</StyledButton>
			</form>
			<ResultBox result={result} status={status} />
		</main>
	);
}


================================================
File: /apps/playground/src/app/(examples)/no-arguments/noargs-action.ts
================================================
"use server";

import { action } from "@/lib/safe-action";

export const noargsAction = action
	.metadata({ actionName: "noargsAction" })
	.action(async () => {
		await new Promise((res) => setTimeout(res, 500));

		return {
			message: "Well done!",
		};
	});


================================================
File: /apps/playground/src/app/(examples)/with-context/edituser-action.ts
================================================
"use server";

import { authAction } from "@/lib/safe-action";
import { z } from "zod";

const schema = z.object({
	fullName: z.string().min(3).max(20),
	age: z.string().min(2).max(3),
});

export const editUser = authAction
	.metadata({ actionName: "editUser" })
	.schema(schema)
	.action(
		// Here you have access to `userId`, and `sessionId which comes from middleware functions
		// defined before.
		//                                              \\\\\\\\\\\\\\\\\\
		async ({ parsedInput: { fullName, age }, ctx: { userId, sessionId } }) => {
			if (fullName.toLowerCase() === "john doe") {
				return {
					error: {
						cause: "forbidden_name",
					},
				};
			}

			const intAge = parseInt(age);

			if (Number.isNaN(intAge)) {
				return {
					error: {
						reason: "invalid_age", // different key in `error`, will be correctly inferred
					},
				};
			}

			return {
				success: {
					newFullName: fullName,
					newAge: intAge,
					userId,
					sessionId,
				},
			};
		}
	);


================================================
File: /apps/playground/src/app/(examples)/with-context/page.tsx
================================================
"use client";

import { StyledButton } from "@/app/_components/styled-button";
import { StyledHeading } from "@/app/_components/styled-heading";
import { StyledInput } from "@/app/_components/styled-input";
import { useAction } from "next-safe-action/hooks";
import { ResultBox } from "../../_components/result-box";
import { editUser } from "./edituser-action";

export default function WithContextPage() {
	const { execute, result, status } = useAction(editUser);

	return (
		<main className="w-96 max-w-full px-4">
			<StyledHeading>Action with auth</StyledHeading>
			<form
				className="flex flex-col mt-8 space-y-4"
				onSubmit={async (e) => {
					e.preventDefault();
					const formData = new FormData(e.currentTarget);
					const input = Object.fromEntries(formData) as {
						fullName: string;
						age: string;
					};
					execute(input);
				}}>
				<StyledInput
					type="text"
					name="fullName"
					id="fullName"
					placeholder="Full name"
				/>
				<StyledInput type="text" name="age" id="age" placeholder="Age" />
				<StyledButton type="submit">Update profile</StyledButton>
			</form>
			<ResultBox result={result} status={status} />
		</main>
	);
}


================================================
File: /apps/playground/src/app/(examples)/hook/page.tsx
================================================
"use client";

import { StyledButton } from "@/app/_components/styled-button";
import { StyledHeading } from "@/app/_components/styled-heading";
import { StyledInput } from "@/app/_components/styled-input";
import { useAction } from "next-safe-action/hooks";
import { ResultBox } from "../../_components/result-box";
import { deleteUser } from "./deleteuser-action";

export default function Hook() {
	// Safe action (`deleteUser`) and optional callbacks passed to `useAction` hook.
	const {
		execute,
		executeAsync,
		result,
		status,
		reset,
		isIdle,
		isExecuting,
		isTransitioning,
		isPending,
		hasSucceeded,
		hasErrored,
	} = useAction(deleteUser, {
		onSuccess({ data, input }) {
			console.log("HELLO FROM ONSUCCESS", data, input);
		},
		onError({ error, input }) {
			console.log("OH NO FROM ONERROR", error, input);
		},
		onSettled({ result, input }) {
			console.log("HELLO FROM ONSETTLED", result, input);
		},
		onExecute({ input }) {
			console.log("HELLO FROM ONEXECUTE", input);
		},
	});

	console.dir({
		status,
		isIdle,
		isExecuting,
		isTransitioning,
		isPending,
		hasSucceeded,
		hasErrored,
	});

	return (
		<main className="w-96 max-w-full px-4">
			<StyledHeading>Action using hook</StyledHeading>
			<form
				className="flex flex-col mt-8 space-y-4"
				onSubmit={async (e) => {
					e.preventDefault();
					const formData = new FormData(e.currentTarget);
					const input = Object.fromEntries(formData) as {
						userId: string;
					};

					// Action call. Here we use `executeAsync` that lets us await the result. You can also use the `execute` function,
					// which is synchronous.
					const r = await executeAsync(input);
					console.log("r", r);
				}}>
				<StyledInput
					type="text"
					name="userId"
					id="userId"
					placeholder="User ID"
				/>
				<StyledButton type="submit">Delete user</StyledButton>
				<StyledButton type="button" onClick={reset}>
					Reset
				</StyledButton>
			</form>
			<ResultBox result={result} status={status} />
		</main>
	);
}


================================================
File: /apps/playground/src/app/(examples)/hook/deleteuser-action.ts
================================================
"use server";

import { ActionError, action } from "@/lib/safe-action";
import { z } from "zod";

const schema = z.object({
	userId: z.string().min(1).max(10),
});

export const deleteUser = action
	.metadata({ actionName: "deleteUser" })
	.schema(schema)
	.action(async ({ parsedInput: { userId } }) => {
		await new Promise((res) => setTimeout(res, 1000));

		if (Math.random() > 0.5) {
			throw new ActionError("Could not delete user!");
		}

		return {
			deletedUserId: userId,
		};
	});


================================================
File: /apps/playground/src/app/(examples)/nested-schema/page.tsx
================================================
"use client";

import { StyledButton } from "@/app/_components/styled-button";
import { StyledHeading } from "@/app/_components/styled-heading";
import { useAction } from "next-safe-action/hooks";
import { ResultBox } from "../../_components/result-box";
import { buyProduct } from "./shop-action";

export default function NestedSchemaPage() {
	const { execute, result, status } = useAction(buyProduct);

	return (
		<main className="w-96 max-w-full px-4">
			<StyledHeading>Action using nested schema</StyledHeading>
			<form
				className="flex flex-col mt-8 space-y-4"
				onSubmit={async (e) => {
					e.preventDefault();

					// Change one of these two to generate validation errors.
					const userId = crypto.randomUUID();
					const productId = crypto.randomUUID();

					execute({
						user: { id: userId },
						product: { deeplyNested: { id: productId } },
					}); // this is the typesafe action called from client
				}}>
				<StyledButton type="submit">Buy product</StyledButton>
			</form>
			<ResultBox result={result} status={status} />
		</main>
	);
}


================================================
File: /apps/playground/src/app/(examples)/nested-schema/shop-action.ts
================================================
"use server";

import { action } from "@/lib/safe-action";
import { z } from "zod";

const schema = z
	.object({
		user: z.object({
			id: z.string().uuid(),
		}),
		product: z.object({
			deeplyNested: z.object({
				id: z.string().uuid(),
			}),
		}),
	})
	.superRefine((_, ctx) => {
		// Randomly generate validation error for root.
		if (Math.random() > 0.5) {
			ctx.addIssue({
				code: "custom",
				message: "Parent schema error",
			});
		}

		// Randomly generate validation error for user object.
		if (Math.random() > 0.5) {
			ctx.addIssue({
				code: "custom",
				path: ["user"],
				message: "Parent user error",
			});
			ctx.addIssue({
				code: "custom",
				path: ["user"],
				message: "Parent user error 2",
			});
		}

		// Randomly generate validation error for user id.
		if (Math.random() > 0.5) {
			ctx.addIssue({
				code: "custom",
				path: ["user", "id"],
				message: "Another bad user id error",
			});
		}

		// Randomly generate validation errors for product object.
		if (Math.random() > 0.5) {
			ctx.addIssue({
				code: "custom",
				path: ["product"],
				message: "Parent product error",
			});

			ctx.addIssue({
				code: "custom",
				path: ["product", "deeplyNested"],
				message: "Deeply nested product error",
			});

			ctx.addIssue({
				code: "custom",
				path: ["product", "deeplyNested", "id"],
				message: "Product not found in the store",
			});
		}
	});

export const buyProduct = action
	.metadata({ actionName: "buyProduct" })
	.schema(schema)
	.action(async () => {
		return {
			success: true,
		};
	});


================================================
File: /apps/playground/src/app/(examples)/empty-response/empty-action.ts
================================================
"use server";

import { action } from "@/lib/safe-action";
import { z } from "zod";

const schema = z.object({
	userId: z.string().uuid(),
});

export const emptyAction = action
	.metadata({ actionName: "emptyAction" })
	.schema(schema)
	.action(async () => {
		await new Promise((res) => setTimeout(res, 500));
	});


================================================
File: /apps/playground/src/app/(examples)/empty-response/page.tsx
================================================
"use client";

import { StyledButton } from "@/app/_components/styled-button";
import { StyledHeading } from "@/app/_components/styled-heading";
import { useAction } from "next-safe-action/hooks";
import { ResultBox } from "../../_components/result-box";
import { emptyAction } from "./empty-action";

export default function EmptyResponse() {
	const { execute, result, status, reset } = useAction(emptyAction);

	console.log("status:", status);

	return (
		<main className="w-96 max-w-full px-4">
			<StyledHeading>Action without response data</StyledHeading>
			<StyledButton
				type="button"
				className="mt-4"
				onClick={() => {
					execute({ userId: crypto.randomUUID() });
				}}>
				Execute action
			</StyledButton>
			<StyledButton className="mt-4" type="button" onClick={reset}>
				Reset
			</StyledButton>
			<ResultBox result={result} status={status} />
		</main>
	);
}


================================================
File: /apps/playground/src/app/(examples)/react-hook-form/page.tsx
================================================
"use client";

import { ResultBox } from "@/app/_components/result-box";
import { StyledButton } from "@/app/_components/styled-button";
import { StyledHeading } from "@/app/_components/styled-heading";
import { StyledInput } from "@/app/_components/styled-input";
import { zodResolver } from "@hookform/resolvers/zod";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { buyProduct } from "./buyproduct-action";
import { schema } from "./validation";

export default function ReactHookFormPage() {
	const { register, handleSubmit } = useForm<z.infer<typeof schema>>({
		resolver: zodResolver(schema),
	});

	const [result, setResult] = useState<any>({});

	return (
		<main className="w-96 max-w-full px-4">
			<StyledHeading>Action using React Hook Form</StyledHeading>
			<form
				className="flex flex-col mt-8 space-y-4"
				onSubmit={handleSubmit(async (data) => {
					const res = await buyProduct(data);
					setResult(res);
				})}>
				<StyledInput {...register("productId")} placeholder="Product ID" />
				<StyledButton type="submit">Buy product</StyledButton>
			</form>
			<ResultBox result={result} />
		</main>
	);
}


================================================
File: /apps/playground/src/app/(examples)/react-hook-form/buyproduct-action.ts
================================================
"use server";

import { action } from "@/lib/safe-action";
import { randomUUID } from "crypto";
import { schema } from "./validation";

export const buyProduct = action
	.metadata({ actionName: "buyProduct" })
	.schema(schema)
	.action(async ({ parsedInput: { productId } }) => {
		return {
			productId,
			transactionId: randomUUID(),
			transactionTimestamp: Date.now(),
		};
	});


================================================
File: /apps/playground/src/app/(examples)/react-hook-form/validation.ts
================================================
import { z } from "zod";

export const schema = z.object({
	productId: z.string().min(1),
});


================================================
File: /apps/playground/src/app/(examples)/direct/page.tsx
================================================
"use client";

import { StyledButton } from "@/app/_components/styled-button";
import { StyledHeading } from "@/app/_components/styled-heading";
import { StyledInput } from "@/app/_components/styled-input";
import { useState } from "react";
import { ResultBox } from "../../_components/result-box";
import { loginUser } from "./login-action";

export default function DirectExamplePage() {
	const [result, setResult] = useState<any>(undefined);

	return (
		<main className="w-96 max-w-full px-4">
			<StyledHeading>Action using direct call</StyledHeading>
			<form
				className="flex flex-col mt-8 space-y-4"
				onSubmit={async (e) => {
					e.preventDefault();
					const formData = new FormData(e.currentTarget);
					const input = Object.fromEntries(formData) as {
						username: string;
						password: string;
					};
					const res = await loginUser(input); // this is the typesafe action directly called
					setResult(res);
				}}>
				<StyledInput
					type="text"
					name="username"
					id="username"
					placeholder="Username"
				/>
				<StyledInput
					type="password"
					name="password"
					id="password"
					placeholder="Password"
				/>
				<StyledButton type="submit">Log in</StyledButton>
			</form>
			<ResultBox result={result} />
		</main>
	);
}


================================================
File: /apps/playground/src/app/(examples)/direct/login-action.ts
================================================
"use server";

import { action } from "@/lib/safe-action";
import {
	flattenValidationErrors,
	returnValidationErrors,
} from "next-safe-action";
import { z } from "zod";

const schema = z.object({
	username: z.string().min(3).max(10),
	password: z.string().min(8).max(100),
});

export const loginUser = action
	.metadata({ actionName: "loginUser" })
	.schema(schema, {
		// Here we use the `flattenValidationErrors` function to customize the returned validation errors
		// object to the client.
		handleValidationErrorsShape: async (ve) =>
			flattenValidationErrors(ve).fieldErrors,
	})
	.action(
		async ({ parsedInput: { username, password } }) => {
			if (username === "johndoe") {
				returnValidationErrors(schema, {
					username: {
						_errors: ["user_suspended"],
					},
				});
			}

			if (username === "user" && password === "password") {
				return {
					success: true,
				};
			}

			returnValidationErrors(schema, {
				username: {
					_errors: ["incorrect_credentials"],
				},
			});
		},
		{
			onSuccess: async (args) => {
				console.log("Logging from onSuccess callback:");
				console.dir(args, { depth: null });
			},
			onError: async (args) => {
				console.log("Logging from onError callback:");
				console.dir(args, { depth: null });
			},
			onSettled: async (args) => {
				console.log("Logging from onSettled callback:");
				console.dir(args, { depth: null });
			},
		}
	);


================================================
File: /apps/playground/src/app/(examples)/file-upload/page.tsx
================================================
"use client";

import { ResultBox } from "@/app/_components/result-box";
import { StyledButton } from "@/app/_components/styled-button";
import { StyledHeading } from "@/app/_components/styled-heading";
import { StyledInput } from "@/app/_components/styled-input";
import { useAction } from "next-safe-action/hooks";
import { fileUploadAction } from "./file-upload-action";

export default function FileUploadPage() {
	const { execute, result, status, input } = useAction(fileUploadAction);

	console.log("INPUT ->", Object.fromEntries(input?.entries() ?? []));
	console.log("RESULT ->", result);

	return (
		<main className="w-96 max-w-full px-4">
			<StyledHeading>File upload action</StyledHeading>
			<form action={execute} className="flex flex-col mt-8 space-y-4">
				<StyledInput
					type="file"
					name="image"
					placeholder="Image"
					accept="image/*"
				/>
				<StyledButton type="submit">Submit</StyledButton>
			</form>
			<ResultBox result={result} status={status} />
		</main>
	);
}


================================================
File: /apps/playground/src/app/(examples)/file-upload/file-upload-action.ts
================================================
"use server";

import { action } from "@/lib/safe-action";
import { zfd } from "zod-form-data";

const schema = zfd.formData({
	image: zfd.file(),
});

export const fileUploadAction = action
	.metadata({ actionName: "fileUploadAction" })
	.schema(schema)
	.action(async ({ parsedInput }) => {
		await new Promise((res) => setTimeout(res, 1000));

		// Do something useful with the file.
		console.log("fileUploadAction ->", parsedInput);

		return {
			ok: true,
		};
	});


================================================
File: /apps/playground/src/app/(examples)/layout.tsx
================================================
import { ChevronLeft } from "lucide-react";
import Link from "next/link";
import { type ReactNode } from "react";
import { ExampleGithubLink } from "../_components/example-github-link";

export default function ExamplesLayout({ children }: { children: ReactNode }) {
	return (
		<div>
			<div className="flex space-x-10 items-center justify-center">
				<Link
					href="/"
					className="flex items-center text-blue-600 dark:text-blue-400 hover:underline">
					<ChevronLeft className="w-6 h-6" />
					<span className="text-lg font-semibold tracking-tight">Go back</span>
				</Link>
				<ExampleGithubLink className="text-lg font-semibold flex items-center justify-center space-x-2 text-blue-600 dark:text-blue-400 hover:underline" />
			</div>
			<div className="mt-4">{children}</div>
		</div>
	);
}


================================================
File: /apps/playground/src/app/(examples)/stateful-form/page.tsx
================================================
"use client";

import { ResultBox } from "@/app/_components/result-box";
import { StyledButton } from "@/app/_components/styled-button";
import { StyledHeading } from "@/app/_components/styled-heading";
import { StyledInput } from "@/app/_components/styled-input";
import { useStateAction } from "next-safe-action/stateful-hooks";
import { statefulFormAction } from "./stateful-form-action";

export default function StatefulFormPage() {
	const { execute, result, status, input } = useStateAction(
		statefulFormAction,
		{
			initResult: { data: { newName: "jane" } }, // optionally pass initial state
		}
	);

	return (
		<main className="w-96 max-w-full px-4">
			<StyledHeading>
				Stateful form action using <pre>useStateAction()</pre>
			</StyledHeading>
			<form action={execute} className="flex flex-col mt-8 space-y-4">
				<StyledInput type="text" name="name" placeholder="Name" />
				<StyledButton type="submit">Submit</StyledButton>
			</form>
			<ResultBox result={result} status={status} />
		</main>
	);
}


================================================
File: /apps/playground/src/app/(examples)/stateful-form/stateful-form-action.ts
================================================
"use server";

import { action } from "@/lib/safe-action";
import { z } from "zod";
import { zfd } from "zod-form-data";

const schema = zfd.formData({
	name: zfd.text(z.string().min(1).max(20)),
});

// Note that we need to explicitly give a type to `stateAction` here, for its return object.
// This is because TypeScript can't infer the return type of the function and then "pass it" to
// the second argument of the server code function (`prevResult`). If you don't need to access `prevResult`,
// though, you can omit the type here, since it will be inferred just like with `action` method.
export const statefulFormAction = action
	.metadata({ actionName: "statefulFormAction" })
	.schema(schema)
	.stateAction<{
		prevName?: string;
		newName: string;
	}>(async ({ parsedInput, metadata }, { prevResult }) => {
		await new Promise((res) => setTimeout(res, 1000));

		return {
			prevName: prevResult.data?.newName,
			newName: parsedInput.name,
		};
	});


================================================
File: /apps/playground/src/app/(examples)/bind-arguments/page.tsx
================================================
"use client";

import { StyledButton } from "@/app/_components/styled-button";
import { StyledHeading } from "@/app/_components/styled-heading";
import { StyledInput } from "@/app/_components/styled-input";
import { useAction } from "next-safe-action/hooks";
import { ResultBox } from "../../_components/result-box";
import { onboardUser } from "./onboard-action";

export default function BindArguments() {
	const boundOnboardUser = onboardUser.bind(
		null,
		crypto.randomUUID(),
		Math.floor(Math.random() * 200)
	);

	const { execute, result, status, reset } = useAction(boundOnboardUser);

	console.log("status:", status);

	return (
		<main className="w-96 max-w-full px-4">
			<StyledHeading>Action binding arguments</StyledHeading>
			<form
				className="flex flex-col mt-8 space-y-4"
				onSubmit={(e) => {
					e.preventDefault();
					const formData = new FormData(e.currentTarget);
					const input = Object.fromEntries(formData) as {
						username: string;
					};

					// Action call.
					execute(input);
				}}>
				<StyledInput
					type="text"
					name="username"
					id="username"
					placeholder="Username"
				/>
				<StyledButton type="submit">Onboard user</StyledButton>
				<StyledButton type="button" onClick={reset}>
					Reset
				</StyledButton>
			</form>
			<ResultBox result={result} status={status} />
		</main>
	);
}


================================================
File: /apps/playground/src/app/(examples)/bind-arguments/onboard-action.ts
================================================
"use server";

import { action } from "@/lib/safe-action";
import { z } from "zod";

const schema = z.object({
	username: z.string().min(3).max(30),
});

const bindArgsSchemas: [userId: z.ZodString, age: z.ZodNumber] = [
	z.string().uuid(),
	z.number().min(18).max(150),
];

export const onboardUser = action
	.metadata({ actionName: "onboardUser" })
	.schema(schema)
	.bindArgsSchemas(bindArgsSchemas)
	.action(
		async ({
			parsedInput: { username },
			bindArgsParsedInputs: [userId, age],
		}) => {
			await new Promise((res) => setTimeout(res, 1000));

			return {
				message: `Welcome on board, ${username}! (age = ${age}, user id = ${userId})`,
			};
		}
	);


================================================
File: /apps/playground/src/app/(examples)/stateless-form/page.tsx
================================================
"use client";

import { ResultBox } from "@/app/_components/result-box";
import { StyledButton } from "@/app/_components/styled-button";
import { StyledHeading } from "@/app/_components/styled-heading";
import { StyledInput } from "@/app/_components/styled-input";
import { useAction } from "next-safe-action/hooks";
import { statelessFormAction } from "./stateless-form-action";

export default function StatelessFormPage() {
	const { execute, result, status, input } = useAction(statelessFormAction);

	console.log("INPUT ->", Object.fromEntries(input?.entries() ?? []));
	console.log("RESULT ->", result);

	return (
		<main className="w-96 max-w-full px-4">
			<StyledHeading>
				Stateless form action using <pre>useAction()</pre>
			</StyledHeading>
			<form action={execute} className="flex flex-col mt-8 space-y-4">
				<StyledInput type="text" name="name" placeholder="Name" />
				<StyledButton type="submit">Submit</StyledButton>
			</form>
			<ResultBox result={result} status={status} />
		</main>
	);
}


================================================
File: /apps/playground/src/app/(examples)/stateless-form/stateless-form-action.ts
================================================
"use server";

import { action } from "@/lib/safe-action";
import { z } from "zod";
import { zfd } from "zod-form-data";

const schema = zfd.formData({
	name: zfd.text(z.string().min(1).max(20)),
});

export const statelessFormAction = action
	.metadata({ actionName: "statelessFormAction" })
	.schema(schema)
	.action(async ({ parsedInput }) => {
		await new Promise((res) => setTimeout(res, 1000));

		return {
			newName: parsedInput.name,
		};
	});


================================================
File: /apps/playground/src/app/page.tsx
================================================
import { ExampleLink } from "./_components/example-link";

export default function Home() {
	return (
		<main className="text-center">
			<h1 className="text-4xl font-semibold">Playground</h1>
			<div className="mt-4 flex flex-col space-y-2">
				<ExampleLink href="/direct">Direct call</ExampleLink>
				<ExampleLink href="/async-schema">
					Direct call (async schema)
				</ExampleLink>
				<ExampleLink href="/with-context">With Context</ExampleLink>
				<ExampleLink href="/nested-schema">Nested schema</ExampleLink>
				<ExampleLink href="/hook">
					<span className="font-mono">useAction</span> hook
				</ExampleLink>
				<ExampleLink href="/optimistic-hook">
					<span className="font-mono">useOptimisticAction</span> hook
				</ExampleLink>
				<ExampleLink href="/stateless-form">
					Stateless form (<span className="font-mono">useAction</span> hook)
				</ExampleLink>
				<ExampleLink href="/stateful-form">
					Stateful form (<span className="font-mono">useStateAction</span> hook)
				</ExampleLink>
				<ExampleLink href="/file-upload">File upload</ExampleLink>
				<ExampleLink href="/bind-arguments">Bind arguments</ExampleLink>
				<ExampleLink href="/no-arguments">No arguments</ExampleLink>
				<ExampleLink href="/empty-response">Empty response</ExampleLink>
				<ExampleLink href="/react-hook-form">React Hook Form</ExampleLink>
			</div>
		</main>
	);
}


================================================
File: /apps/playground/src/app/github-logo.tsx
================================================
const GitHubLogo = (props: React.SVGProps<SVGSVGElement>) => {
	return (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="24"
			height="24"
			viewBox="0 0 24 24"
			fill="currentColor"
			{...props}>
			<path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
		</svg>
	);
};

export default GitHubLogo;


================================================
File: /apps/playground/src/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;


================================================
File: /apps/playground/src/app/_components/styled-heading.tsx
================================================
import type { ReactNode } from "react";

type Props = {
	children: ReactNode;
};

export function StyledHeading({ children }: Props) {
	return <h1 className="text-2xl font-semibold text-center">{children}</h1>;
}


================================================
File: /apps/playground/src/app/_components/result-box.tsx
================================================
import type { HookActionStatus } from "next-safe-action/hooks";

type Props = {
	result?: any;
	status?: HookActionStatus;
	customTitle?: string;
};

export function ResultBox({ result, status, customTitle }: Props) {
	return (
		<div className="mt-8">
			{status ? (
				<p className="text-lg font-semibold">Execution status: {status}</p>
			) : null}
			<p className="text-lg font-semibold">{customTitle || "Action result:"}</p>
			<pre className="mt-4">{JSON.stringify(result, null, 1)}</pre>
		</div>
	);
}


================================================
File: /apps/playground/src/app/_components/example-github-link.tsx
================================================
"use client";

import { Link } from "lucide-react";
import { usePathname } from "next/navigation";

type Props = {
	className?: string;
};

export function ExampleGithubLink({ className }: Props) {
	const pathname = usePathname();

	return (
		<a
			href={`https://github.com/TheEdoRan/next-safe-action/tree/main/apps/playground/src/app/(examples)${pathname}`}
			target="_blank"
			rel="noopener noreferrer"
			aria-label="Example link to GitHub"
			className={className}>
			<Link className="w-4 h-4" />
			<span>View on GitHub</span>
		</a>
	);
}


================================================
File: /apps/playground/src/app/_components/styled-input.tsx
================================================
import { forwardRef, type ComponentProps } from "react";

type Props = ComponentProps<"input">;

export const StyledInput = forwardRef<HTMLInputElement, Props>(
	function StyledInput(props: Props, ref) {
		return (
			<>
				<input
					{...props}
					ref={ref}
					className={`${props.className ?? ""} py-1 px-2 border rounded-md dark:bg-slate-800 dark:border-slate-700`}
				/>
			</>
		);
	}
);

StyledInput.displayName = "StyledInput";


================================================
File: /apps/playground/src/app/_components/styled-button.tsx
================================================
import { forwardRef, type ComponentProps } from "react";

type Props = ComponentProps<"button">;

export const StyledButton = forwardRef<HTMLButtonElement, Props>(
	function StyledButton(props: Props, ref) {
		return (
			<button
				{...props}
				ref={ref}
				className={`${props.className ?? ""} bg-slate-950 text-slate-50 px-3 py-2 rounded-md w-full font-medium dark:bg-slate-50 dark:text-slate-950`}
			/>
		);
	}
);

StyledButton.displayName = "StyledButton";


================================================
File: /apps/playground/src/app/_components/example-link.tsx
================================================
import { Link as LinkIcon } from "lucide-react";
import Link from "next/link";
import type { ReactNode } from "react";

type Props = {
	href: string;
	children: ReactNode;
};

export function ExampleLink({ href, children }: Props) {
	return (
		<Link href={href} className="text-lg">
			<span className="flex items-center justify-center space-x-2 hover:underline">
				<LinkIcon className="w-4 h-4" />
				<span>{children}</span>
			</span>
		</Link>
	);
}


================================================
File: /apps/playground/src/app/layout.tsx
================================================
import GitHubLogo from "./github-logo";
import "./globals.css";

export const metadata = {
	title: "Playground for next-safe-action",
	description: "A basic implementation of next-safe-action library",
};

export default function RootLayout({
	children,
}: {
	children: React.ReactNode;
}) {
	return (
		<html lang="en">
			<body className="antialiased bg-slate-50 dark:bg-slate-950 dark:text-slate-50 text-slate-950 flex flex-col min-h-screen items-center pt-24">
				<a
					id="github-link"
					href="https://github.com/TheEdoRan/next-safe-action"
					target="_blank"
					rel="noopener noreferrer"
					className="mb-8">
					<GitHubLogo width={40} height={40} />
				</a>
				{children}
			</body>
		</html>
	);
}


================================================
File: /.eslintignore
================================================
**/*.js
/website

================================================
File: /package.json
================================================
{
	"name": "next-safe-action-monorepo",
	"version": "0.0.0",
	"private": true,
	"description": "next-safe-action monorepo",
	"scripts": {
		"prepare": "is-ci || husky",
		"pg": "turbo run dev --filter=@apps/playground",
		"lint": "turbo run lint",
		"build": "turbo run build",
		"test:lib": "turbo run test --filter=next-safe-action",
		"lint:lib": "turbo run lint --filter=next-safe-action",
		"build:lib": "turbo run build --filter=next-safe-action --force",
		"deploy:lib": "turbo run deploy --filter=next-safe-action",
		"build:pg": "turbo run build --filter=@apps/playground --force"
	},
	"author": "Edoardo Ranghieri",
	"license": "MIT",
	"engines": {
		"node": ">=18.17"
	},
	"config": {
		"commitizen": {
			"path": "./node_modules/cz-conventional-changelog"
		}
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/TheEdoRan/next-safe-action.git"
	},
	"dependencies": {
		"@commitlint/cli": "^19.6.0",
		"@commitlint/config-conventional": "^19.6.0",
		"@manypkg/cli": "^0.22.0",
		"commitizen": "^4.3.1",
		"cz-conventional-changelog": "^3.3.0",
		"husky": "^9.1.7",
		"is-ci": "^3.0.1",
		"turbo": "^2.3.3"
	},
	"packageManager": "pnpm@9.15.0+sha512.76e2379760a4328ec4415815bcd6628dee727af3779aaa4c914e3944156c4299921a89f976381ee107d41f12cfa4b66681ca9c718f0668fa0831ed4c6d8ba56c"
}


================================================
File: /.nvmrc
================================================
22


================================================
File: /.husky/prepare-commit-msg
================================================
#!/usr/bin/env sh

exec < /dev/tty && pnpm exec cz --hook || true

================================================
File: /.husky/commit-msg
================================================
#!/usr/bin/env sh

pnpm exec commitlint --edit "${1}"

================================================
File: /commitlint.config.js
================================================
module.exports = {
	extends: ["@commitlint/config-conventional"],
};


================================================
File: /website/docs/troubleshooting.md
================================================
---
sidebar_position: 8
description: Troubleshoot common issues with next-safe-action.
---

# Troubleshooting

## TypeSchema issues (pre v7.2.0)

**NOTE**: next-safe-action used TypeSchema up to version 7.1.3. If you use version 7.2.0 or later, these issues are fixed.

### `Schema` and `parsedInput` are typed `any` (broken types) and build issues

At this time, TypeSchema (the library used under the hood up to v7.1.3 for supporting multiple validation libraries) doesn't work with TypeScript >= 5.5; the resulting types for inputs and schemas are `any`, so type inference is broken.

If you're in this situation, please upgrade to v7.2.0 or later to fix the issue.

### TypeSchema issues with Edge Runtime

TypeSchema enables support for many validation libraries, via adapters. However, since it relies on the dynamic import feature, it won't work with the Edge Runtime. Please upgrade to v7.2.0 or later to fix the issue.

## TypeScript error in monorepo

If you use next-safe-action in a monorepo, you'll likely experience this error:

```
Type error: The inferred type of 'action' cannot be named without a reference to '...'. This is likely not portable. A type annotation is necessary.
```

You can set this option in your `tsconfig.json` to remove the error:

```json title="tsconfig.json"
{
  "compilerOptions": {
    // highlight-next-line
    "baseUrl": "."
  }
}
```

Find more information about this in [this issue](https://github.com/TheEdoRan/next-safe-action/issues/64) on GitHub.

================================================
File: /website/docs/contributing.md
================================================
---
sidebar_position: 9
description: Learn how to contribute to next-safe-action via GitHub.
---

# Contributing

If you want to contribute to next-safe-action, please check out the [contributing guide](https://github.com/TheEdoRan/next-safe-action/tree/next/CONTRIBUTING.md).

If you found bugs or just want to ask a question, feel free to open an issue or a discussion by following the [issue templates](https://github.com/TheEdoRan/next-safe-action/issues/new/choose).

### Donations

If you find this project useful, please consider making a [donation](https://github.com/sponsors/TheEdoRan). This is absolutely not required, but is very much appreciated, since it will help to cover the time and resources required to maintain this project. Thank you!

## Sponsors

A big shout-out to all our [sponsors](https://github.com/sponsors/TheEdoRan)! You’re the driving force behind this library's growth, and we're truly grateful for your support. ❤️

<a href="https://arcjet.com/?ref=next-safe-action" target="_blank">
  <picture>
    <source media="(prefers-color-scheme: dark)" srcSet="https://arcjet.com/logo/arcjet-dark-lockup-voyage-horizontal.svg" />
    <img src="https://arcjet.com/logo/arcjet-light-lockup-voyage-horizontal.svg" alt="Arcjet Logo" height="128" width="auto" />
  </picture>
  <br />Arcjet
</a>

================================================
File: /website/docs/recipes/playground.md
================================================
---
sidebar_position: 1
description: Explore a basic implementation of next-safe-action.
---

# Playground

You can find a basic working implementation [here](https://next-safe-action-playground.vercel.app/).

If you want to explore the project, you can check out its source code [here](https://github.com/TheEdoRan/next-safe-action/tree/main/apps/playground).


================================================
File: /website/docs/recipes/_category_.json
================================================
{
	"label": "Recipes",
	"position": 4
}


================================================
File: /website/docs/recipes/upload-files.md
================================================
---
sidebar_position: 9
description: Learn how to upload a file using next-safe-action.
---

# Upload files

Server Actions also allow you to upload files by using forms and inputs with type `file`.

:::note
1. File uploads only works with Node.js >= 20. Node.js 18 is not supported.
2. If you exceed 1 MB in size, by default, Next.js throws an error on the server informing that the file is too big. You can customize the max size by setting the [`bodySizeLimit`](https://nextjs.org/docs/app/api-reference/next-config-js/serverActions#bodysizelimit) option in `next.config.js`.
:::

Since you **must** use `FormData` to upload files, here we use Zod and the [`zod-form-data`](https://www.npmjs.com/package/zod-form-data) library to validate and parse the input.

```typescript title="file-upload-action.ts"
"use server";

import { action } from "@/lib/safe-action";
// highlight-next-line
import { zfd } from "zod-form-data";

// highlight-start
const schema = zfd.formData({
  image: zfd.file(),
});
// highlight-end

export const fileUploadAction = action
  .schema(schema)
  .action(async ({ parsedInput }) => {
    await new Promise((res) => setTimeout(res, 1000));

    // Do something useful with the file.
    // highlight-next-line
    console.log("fileUploadAction ->", parsedInput);

    return {
      ok: true,
    };
  });
```

```tsx title="file-upload.tsx"
"use client";

import { useAction } from "next-safe-action/hooks";
import { fileUploadAction } from "./file-upload-action";

export default function FileUploadPage() {
  // highlight-next-line
  const { execute } = useAction(fileUploadAction);

  return (
    // highlight-start
    <form action={execute}>
      <input
        type="file"
        name="image"
        placeholder="Image"
        accept="image/*"
      />
    // highlight-end
      <button type="submit">Submit</button>
    </form>
  );
}
```

================================================
File: /website/docs/recipes/i18n.md
================================================
---
sidebar_position: 10 
description: Learn how to use next-safe-action with a i18n solution.
---

# i18n

If you're using a i18n solution, there's a high probability that you'll need to await the translations and then pass them to schemas.\
next-safe-action allows you to do that by passing an async function to the [`schema`](/docs/define-actions/instance-methods#schema) method that returns a promise with the schema.\
The setup is pretty simple:

```typescript
"use server";

import { actionClient } from "@/lib/safe-action";
import { z } from "zod";
import { getTranslations } from "my-i18n-lib";

// highlight-start
async function getSchema() {
  // This is an example of a i18n setup.
  const t = await getTranslations();
  return mySchema(t); // this is the schema that will be used to validate and parse the input
}
// highlight-end

export const myAction = actionClient.schema(getSchema).action(async ({ parsedInput }) => {
  // Do something useful here...
});
```

================================================
File: /website/docs/recipes/form-actions.md
================================================
---
sidebar_position: 2
description: Learn how to use next-safe-action with form actions.
---

# Form actions

You can utilize Server Actions as form actions too. next-safe-action allows you to define _stateful_ or _stateless_ form actions.

### `FormData` input

For defining actions with `FormData` input, the recommended approach is to use the [`zod-form-data`](https://www.npmjs.com/package/zod-form-data) library, which allows you to do that. In these two examples below we'll be using it.

## Stateless form actions

You can define a _stateless_ safe action using the [`action`](/docs/define-actions/instance-methods#action--stateaction) instance method, and then pass it to the `action` prop of a form using [`direct execution`](/docs/execute-actions/direct-execution), [`useAction`](/docs/execute-actions/hooks/useaction) hook or [`useOptimisticAction`](/docs/execute-actions/hooks/useoptimisticaction) hook.

With this method, you can access previous result from the client component, both by awaiting the safe action or by using the `result` prop returned by the hooks. You can't access previous result on the server, though, and this is why this approach is called _stateless_: the server doesn't know the previous result of the action execution.

Here's an example using the `useAction` hook:

```typescript title="stateless-form-action.ts"
"use server";

import { actionClient } from "@/lib/safe-action";
import { z } from "zod";
import { zfd } from "zod-form-data";

const schema = zfd.formData({
  name: zfd.text(z.string().min(1).max(20)),
});

export const statelessFormAction = actionClient
  .schema(schema)
  // highlight-start
  .action(async ({ parsedInput }) => {
    await new Promise((res) => setTimeout(res, 1000));

    return {
      newName: parsedInput.name,
    };
  });
  // highlight-end
```

```tsx title="stateless-form.tsx"
"use client";

import { useAction } from "next-safe-action/hooks";
import { statelessFormAction } from "./stateless-form-action";

export default function StatelessForm() {
  // highlight-next-line
  const { execute } = useAction(statelessFormAction);

  return (
    // highlight-next-line
    <form action={execute}>
      <input type="text" name="name" placeholder="Name" />
      <button type="submit">Submit</button>
    </form>
  );
}
```

You can also find this example in the playground app: [stateless form action](https://github.com/TheEdoRan/next-safe-action/tree/main/apps/playground/src/app/(examples)/stateless-form) example.

## Stateful form actions

You can define a _stateful_ safe action using the [`stateAction`](/docs/define-actions/instance-methods#action--stateaction) instance method, and then pass it to the `action` prop of a form using the [`useStateAction`](/docs/execute-actions/hooks/usestateaction) hook.

With this method, you can access previous result both from the client component, by using the `result` prop returned by the hook, and on the server, where you define the action. More information about that in the [`stateAction`](/docs/define-actions/instance-methods#action--stateaction) and [`useStateAction`](/docs/execute-actions/hooks/usestateaction) sections.



Note that if you want or need to use _stateful_ actions:
1. You **must** define them with [`stateAction`](/docs/define-actions/instance-methods#action--stateaction) instance method. This changes the signature of the Server Action function, placing the `prevResult` as the first argument.
2. If you're on Next.js < 15, you can manually pass them to `useFormState` hook, which will be deprecated.
3. Starting from Next.js 15, you **should** use the built-in `useStateAction` hook (which uses React's [`useActionState`](https://react.dev/reference/react/useActionState) hook under the hood) exported from `next-safe-action/stateful-hooks` path.

Here's an example of a stateful action, using the `useStateAction` hook:

```typescript title="stateful-form-action.ts"
"use server";

import { action } from "@/lib/safe-action";
import { z } from "zod";
import { zfd } from "zod-form-data";

const schema = zfd.formData({
  name: zfd.text(z.string().min(1).max(20)),
});

// Note that we need to explicitly give a type to `stateAction` here, for its return object.
// This is because TypeScript can't infer the return type of the function and then "pass it" to
// the second argument of the server code function (`prevResult`). If you don't need to access `prevResult`,
// though, you can omit the type here, since it will be inferred just like with `action` method.
export const statefulFormAction = action
  .schema(schema)
  // highlight-start
  .stateAction<{
    prevName?: string;
    newName: string;
  }>(async ({ parsedInput }, { prevResult }) => {
    return {
      prevName: prevResult.data?.newName,
      newName: parsedInput.name,
    };
  });
  // highlight-end
```

```tsx title="stateful-form.tsx"
"use client";

import { useStateAction } from "next-safe-action/stateful-hooks";
import { statefulFormAction } from "./stateful-form-action";

export default function StatefulForm() {
  // highlight-start
  const { execute } = useStateAction(
    statefulFormAction,
    {
      initResult: { data: { newName: "jane" } }, // optionally pass initial state
    }
  );
  // highlight-end

  return (
    // highlight-next-line
    <form action={execute}>
      <input type="text" name="name" placeholder="Name" />
      <button type="submit">Submit</button>
    </form>
  );
}
```

You can also find this example in the playground app: [stateful form action](https://github.com/TheEdoRan/next-safe-action/tree/main/apps/playground/src/app/(examples)/stateful-form) example.

================================================
File: /website/docs/execute-actions/direct-execution.md
================================================
---
sidebar_position: 1
description: You can execute safe actions by directrly calling them inside Client Components.
---

# Direct execution

The first way to execute Server Actions inside Client Components is by importing it and directly calling it in a function. This method is the simplest one, but in some cases it could be all you need, for example if you just need the action result inside an `onClick` or `onSubmit` handlers, without overcomplicating things.

### Example

1. Define a new action called `loginUser`, that takes a username and a password as input:

```typescript title=src/app/login-action.ts
"use server";

import { actionClient } from "@/lib/safe-action";
import { returnValidationErrors } from "next-safe-action";
import { z } from "zod";

const schema = z.object({
  username: z.string().min(3).max(10),
  password: z.string().min(8).max(100),
});

export const loginUser = actionClient
  .schema(schema)
  .action(async ({ parsedInput: { username, password } }) => {
    // logic here...
  });
```

2. Then, in your Client Component, you can use it like this:

```tsx
"use client";

import { loginUser } from "@/app/login-action";

export default function Login() {
  return (
    <button
      onClick={async () => {
        // Result is scoped to this function.
        // highlight-start
        const result = await loginUser({
          username: "johndoe",
          password: "123456",
        });
        // highlight-end

        // You can do something with it here.
      }}>
      Log in
    </button>
  );
}
```

### Action result object

Every action you execute returns an object with the same structure. This is described in the [action result object](/docs/define-actions/action-result-object) section.

Explore a working example [here](<https://github.com/TheEdoRan/next-safe-action/tree/main/apps/playground/src/app/(examples)/direct>).


================================================
File: /website/docs/execute-actions/_category_.json
================================================
{
	"label": "Execute actions",
	"position": 3
}


================================================
File: /website/docs/execute-actions/hooks/useoptimisticaction.md
================================================
---
sidebar_position: 2
description: Learn how to use the useOptimisticAction hook.
---

# `useOptimisticAction`

:::info
`useOptimisticAction` **does not wait** for the action to finish execution before returning the optimistic data. It is then synced with the real result from server when the action has finished its execution. If you need to perform normal mutations, use [`useAction`](/docs/execute-actions/hooks/useaction) instead.
:::

Let's say you have some todos in your database and want to add a new one. The following example shows how you can use `useOptimisticAction` to add a new todo item optimistically.

### Example

1. Define a new action called `addTodo`, that takes a `Todo` object as input:

```typescript title=src/app/addtodo-action.ts
"use server";

import { action } from "@/lib/safe-action";
import { revalidatePath } from "next/cache";
import { z } from "zod";

const schema = z.object({
  id: z.string().uuid(),
  body: z.string().min(1),
  completed: z.boolean(),
});

export type Todo = z.infer<typeof schema>;

let todos: Todo[] = [];
export const getTodos = async () => todos;

export const addTodo = action
  .metadata({ actionName: "" })
  .schema(schema)
  .action(async ({ parsedInput }) => {
    await new Promise((res) => setTimeout(res, 500));

    todos.push(parsedInput);

    // This Next.js function revalidates the provided path.
    // More info here: https://nextjs.org/docs/app/api-reference/functions/revalidatePath
    revalidatePath("/optimistic-hook");

    return {
      createdTodo: parsedInput,
    };
  });

```

2. Then, in the parent Server Component, you need to pass the current todos state to the Client Component:

```tsx title=src/app/page.tsx
import { getTodos } from "./addtodo-action";

export default function Home() {
  return (
    <main>
      {/* Here we pass current todos to the Client Component.
      This is updated on the server every time the action is executed, since we
      used `revalidatePath()` inside action's server code. */}
      <TodosBox todos={getTodos()} />
    </main>
  );
}
```

3. Finally, in your Client Component, you can use it like this:

```tsx title=src/app/todos-box.tsx
"use client";

import { useOptimisticAction } from "next-safe-action/hooks";
import { addTodo, type Todo } from "@/app/addtodo-action";

type Props = {
  todos: Todo[];
};

export default function TodosBox({ todos }: Props) {
  // highlight-start
  const { execute, result, optimisticState } = useOptimisticAction(
    addTodo,
    {
      currentState: { todos }, // gets passed from Server Component
      updateFn: (state, newTodo) => {
        return { 
          todos: [...state.todos, newTodo] 
        };
      }
    }
  );
  // highlight-end

  return (
    <div>
      <button
        onClick={() => {
          // Here we execute the action. The input is also passed to `updateFn` as the second argument,
          // in this case `newTodo`.
          // highlight-next-line
          execute({ id: crypto.randomUUID(), body: "New Todo", completed: false });
        }}>
        Add todo
      </button>
      {/* Optimistic state gets updated right after the `execute` call (next render), it doesn't wait for the server to respond. */}
      <pre>Optimistic state: {optimisticState}</pre>
    </div>
  );
}
```

### `useOptimisticAction` arguments

- `safeActionFn`: the safe action that will be called via `execute` or `executeAsync` functions.
- `utils`: object with required `currentState` and `updateFn` properties and optional [base utils](/docs/execute-actions/hooks/hook-base-utils) and [callbacks](/docs/execute-actions/hooks/hook-callbacks). `currentState` is passed from the parent Server Component, and `updateFn` tells the hook how to update the optimistic state before receiving the server response.

### `useOptimisticAction` return object

- `execute`: an action caller with no return. Input is the same as the safe action you passed to the hook.
- `executeAsync`: an action caller that returns a promise with the return value of the safe action. Input is the same as the safe action you passed to the hook.
- `input`: the input passed to the `execute` or `executeAsync` function.
- `result`: result of the action after its execution.
- `optimisticState`: the optimistic state updated right after `execute` call (on the next render), with the behavior defined in `updateFn`.
- `reset`: programmatically reset execution state (`input`, `status` and `result`).
- `status`: string that represents the current action status.
- `isIdle`: true if the action status is `idle`.
- `isTransitioning`: true if the transition status  from the `useTransition` hook used under the hood is `true`.
- `isExecuting`: true if the action status is `executing`.
- `isPending`: true if the action status is `executing` or `isTransitioning`.
- `hasSucceeded`: true if the action status is `hasSucceeded`.
- `hasErrored`: true if the action status is `hasErrored`.

For checking the action status, the recommended way is to use the `isPending` shorthand property. Using `isExecuting` or checking if `status` is `"executing"` could cause race conditions when using navigation functions, such as `redirect`.

Explore a working example [here](<https://github.com/TheEdoRan/next-safe-action/tree/main/apps/playground/src/app/(examples)/optimistic-hook>).


================================================
File: /website/docs/execute-actions/hooks/usestateaction.md
================================================
---
sidebar_position: 3
description: Learn how to use the useStateAction hook.
---

# `useStateAction`

`useStateAction` keeps track of the previous action execution result(s), thanks to the [`useActionState`](https://react.dev/reference/react/useActionState) hook from React that is used under the hood. This hook works with actions declared with the [`stateAction`](/docs/define-actions/instance-methods#action--stateaction) instance method, that changes the function signature, placing a `prevResult` argument in the first position, and an input (if a validation schema was provided) in the second one. When a stateful action is passed to `useStateAction` hook, the returned `execute` function will accept just the (optional) input and returns the action result, as the normal `useAction` hook does.

Note that you're not required to use this hook in combination with the `stateAction` method for Form Actions, you can also define _stateless_ actions using the `action` method. More information about this in the [Form Actions](/docs/recipes/form-actions) recipe.

:::note
React's `useActionState` hook has replaced the previous `useFormState` hook, that is deprecated in React 19. You can explore the documentation for it in the [React docs](https://react.dev/reference/react/useActionState).
:::

:::warning important
The `useActionState` hook requires Next.js >= 15 to work, because previous versions do not support the React's [`useActionState`](https://react.dev/reference/react/useActionState) hook that is used under the hood. In the meantime, you can use the [`stateAction`](/docs/define-actions/instance-methods#action--stateaction) method manually with React 18's `useFormState` hook.

The `useActionState` hook is exported from `next-safe-action/stateful-hooks` path, unlike the other two hooks. This is because it uses React 19 features and would cause build errors in React 18.
:::

Let's say you want to update the number of likes of a post in your application, mutating directly the database.

### Example

1. Define a new stateful action called `statefulAction`, that takes a name as input and returns the name you just passed, as well as the previous one (if any).

Note two important things: 
  1. We're defining an action that will be used as a Form Action, so here we use the [`zod-form-data`](https://www.npmjs.com/package/zod-form-data) library to generate the input validation schema;
  2. We use [`stateAction`](/docs/define-actions/instance-methods#action--stateaction) instance method to define the action. You **must** use this method, because `useStateAction` hook requires `prevResult` to be the first argument of the Server Action function. Using this method also allows you to access the previous action result in `serverCodeFn`, via the `prevResult` property in the second argument of the function:

```typescript title=src/app/stateful-action.ts
"use server";

import { actionClient } from "@/lib/safe-action";
import { z } from "zod";
import { zfd } from "zod-form-data";

const schema = zfd.formData({
  name: zfd.text(z.string().min(1).max(20)),
});

export const statefulAction = actionClient
  .metadata({ actionName: "statefulAction" })
  .schema(schema)
  // Note that we need to explicitly give a type to `stateAction` here,
  // for its return object. This is because TypeScript can't infer the
  // return type of the function and then "pass it" to the second argument
  // of the server code function (`prevResult`). If you don't need to
  // access `prevResult`, though, you can omit the type here, since it
  // will be inferred just like with `action` method.
  // highlight-start
  .stateAction<{
    prevName?: string;
    newName: string;
  }>(async ({ parsedInput, metadata }, { prevResult }) => {
    await new Promise((res) => setTimeout(res, 1000));

    return {
      prevName: prevResult.data?.newName,
      newName: parsedInput.name,
    };
  });
  // highlight-end
```

1. Then, in your Client Component, you can define a form like this one, and pass the action we just defined to the form `action` prop:

```tsx title=src/app/stateful-form.tsx
"use client";

import { useStateAction } from "next-safe-action/stateful-hooks";
import { statefulAction } from "./stateful-action";

export default function StatefulFormPage() {
  // highlight-start
  const { execute, result, status } = useStateAction(statefulAction, {
    initResult: { data: { newName: "jane" } }, // optionally pass initial state
  });
  // highlight-end

  return (
    // highlight-next-line
    <form action={execute}>
      <input type="text" name="name" placeholder="Name" />
      <button type="submit">Submit</button>
    </form>
  );
}
```

### `useStateAction` arguments

- `safeActionFn`: the safe stateful action that will be called via `execute` or `executeAsync` functions.
- `utils`: object with optional `initResult`, `permalink`, [base utils](/docs/execute-actions/hooks/hook-base-utils) and [callbacks](/docs/execute-actions/hooks/hook-callbacks) properties. `initResult` is used to define the initial state of the stateful action. If not passed, the initial state will default to an empty object: `{}`. `permalink` is documented in [React docs](https://react.dev/reference/react/useActionState#parameters) for `useActionState` hook.

### `useStateAction` return object

- `execute`: an action caller with no return. Input is the same as the safe action you passed to the hook.
- `input`: the input passed to the `execute` function.
- `result`: result of the action after its execution.
- `status`: string that represents the current action status.
- `isIdle`: true if the action status is `idle`.
- `isTransitioning`: true if the transition status  from the `useTransition` hook used under the hood is `true`.
- `isExecuting`: true if the action status is `executing`.
- `isPending`: true if the action status is `executing` or `isTransitioning`.
- `hasSucceeded`: true if the action status is `hasSucceeded`.
- `hasErrored`: true if the action status is `hasErrored`.

For checking the action status, the recommended way is to use the `isPending` shorthand property. Using `isExecuting` or checking if `status` is `"executing"` could cause race conditions when using navigation functions, such as `redirect`.

Explore a working example [here](<https://github.com/TheEdoRan/next-safe-action/tree/main/apps/playground/src/app/(examples)/stateful-form>).

## Progressive enhancement

`useStateAction` doesn't support progressive enhancement, since it wraps the form action returned by the `useActionState` hook from React with additional functionality that only works with JavaScript enabled. This behavior has been discussed in [this issue](https://github.com/TheEdoRan/next-safe-action/issues/189) and in [this discussion](https://github.com/TheEdoRan/next-safe-action/discussions/190) on GitHub.

To fix this, you can pass the stateful action to the `useActionState` hook from React directly:

```tsx
"use client";

import { useActionState } from "react";
import { testAction } from "./action";

export function TestForm() {
  // highlight-next-line
  const [state, action, isPending] = useActionState(testAction, {});

  return {
    // highlight-next-line
    <form action={action}>
      ...
    </form>
  }
}
```

================================================
File: /website/docs/execute-actions/hooks/_category_.json
================================================
{
	"label": "Hooks",
	"position": 2
}


================================================
File: /website/docs/execute-actions/hooks/hook-base-utils.md
================================================
---
sidebar_position: 4
description: Hook base utilities shared by all hooks.
---

# Hook base utils

Hook base utilities are a set of properties shared by all hooks.

## `executeOnMount?` \[deprecated\]

:::warning deprecated
This property is deprecated and will be removed in the next major version. Actions should be used only for data mutations, so executing them on component mount is not recommended.
:::

`executeOnMount` is an optional object that, if passed to the hook, will `execute` the action when the component is mounted. It expects an `input` property of the same type as the input of the action and an optional `delayMs` property, which is the number of milliseconds to wait before executing the action (defaults to 0).

================================================
File: /website/docs/execute-actions/hooks/useaction.md
================================================
---
sidebar_position: 1
description: Learn how to use the useAction hook.
---

# `useAction`

:::info
`useAction` **waits** for the action to finish execution before returning the result. If you need to perform optimistic updates, use [`useOptimisticAction`](/docs/execute-actions/hooks/useoptimisticaction) instead.
:::

With this hook, you get full control of the action execution flow.
Let's say, for instance, you want to change what's displayed by a component when a button is clicked.

### Example

1. Define a new action called `greetUser`, that takes a name as input and returns a greeting:

```typescript title=src/app/greet-action.ts
"use server";

const schema = z.object({
  name: z.string(),
});

export const greetUser = actionClient
  .schema(schema)
  .action(async ({ parsedInput: { name } }) => {
    return { message: `Hello ${name}!` };
  });
```

2. In your Client Component, you can use it like this:

```tsx title=src/app/greet.tsx
"use client";

import { useAction } from "next-safe-action/hooks";
import { greetUser } from "@/app/greet-action";

export default function Greet() {
  const [name, setName] = useState("");
  // highlight-next-line
  const { execute, result } = useAction(greetUser);

  return (
    <div>
      <input type="text" onChange={(e) => setName(e.target.value)} />
      <button
        onClick={() => {
          // highlight-next-line
          execute({ name });
        }}>
        Greet user
      </button>
      {result.data?.message ? <p>{result.data.message}</p> : null}
    </div>
  );
}
```

As you can see, here we display a greet message after the action is performed, if it succeeds.

### `useAction` arguments

- `safeActionFn`: the safe action that will be called via `execute` or `executeAsync` functions.
- `utils?`: object with optional [base utils](/docs/execute-actions/hooks/hook-base-utils) and [callbacks](/docs/execute-actions/hooks/hook-callbacks).

### `useAction` return object

- `execute`: an action caller with no return. Input is the same as the safe action you passed to the hook.
- `executeAsync`: an action caller that returns a promise with the return value of the safe action. Input is the same as the safe action you passed to the hook.
- `input`: the input passed to the `execute` or `executeAsync` function.
- `result`: result of the action after its execution.
- `reset`: programmatically reset execution state (`input`, `status` and `result`).
- `status`: string that represents the current action status.
- `isIdle`: true if the action status is `idle`.
- `isTransitioning`: true if the transition status  from the `useTransition` hook used under the hood is `true`.
- `isExecuting`: true if the action status is `executing`.
- `isPending`: true if the action status is `executing` or `isTransitioning`.
- `hasSucceeded`: true if the action status is `hasSucceeded`.
- `hasErrored`: true if the action status is `hasErrored`.

For checking the action status, the recommended way is to use the `isPending` shorthand property. Using `isExecuting` or checking if `status` is `"executing"` could cause race conditions when using navigation functions, such as `redirect`.

Explore a working example [here](<https://github.com/TheEdoRan/next-safe-action/tree/main/apps/playground/src/app/(examples)/hook>).


================================================
File: /website/docs/execute-actions/hooks/hook-callbacks.md
================================================
---
sidebar_position: 5
description: Hook callbacks are a way to perform custom logic based on the current action execution status.
---

# Hook callbacks

- `onExecute`: called when `status` is `"executing"`.
- `onSuccess`: called when `status` is `"hasSucceeded"`.
- `onError`: called when `status` is `"hasErrored"`.
- `onSettled`: called when `status` is either `"hasSucceeded"` or `"hasErrored"`.

Hook callbacks are a way to perform custom logic based on the current action execution status. You can pass them to the three hooks in the `utils` object, which is the second argument. All of them are optional and don't return anything, they can also be async or not:

```tsx
const action = useAction(testAction, {
  onExecute: ({ input }) => {},
  onSuccess: ({ data, input }) => {},
  onError: ({ error, input }) => {},
  onSettled: ({ result, input }) => {},
});
```

================================================
File: /website/docs/define-actions/action-utils.md
================================================
---
sidebar_position: 7
description: Action utils is an object with useful properties and callbacks functions that you can use to customize the action execution flow.
---

# Action utils

Action utils is an object with some useful properties and callbacks passed as the second argument of the [`action`/`stateAction`](/docs/define-actions/instance-methods#action--stateaction) method.

## Throw errors when they occur

Starting from v7.4.0, you can now pass optional `throwServerError` and `throwValidationErrors` properties at the action level, if you want or need that behavior. Note that the `throwValidationErrors` property set at the action level has a higher priority than the one at the instance level, so if you set it to `false` while the one at the instance level is `true`, validation errors will **not** be thrown.


## Action callbacks

- `onSuccess`: called when action execution succeeds.
- `onError`: called when action execution fails (validation errors or server error).
- `onSettled`: called when action execution succeeds or fails.

With action callbacks you can perform custom logic after the action is executed, on the server side. You can pass them to [`action`/`stateAction`](/docs/define-actions/instance-methods#action--stateaction) method as the second argument, after the server code function. Their return value is not used and they **must** be async functions.

```tsx
import { actionClient } from "@/lib/safe-action";
import { z } from "zod";

const action = actionClient
  .schema(z.object({ test: z.string() }))
  .action(async () => {
    // ...
  }, {
    onSuccess: async ({
      data,
      ctx,
      metadata,
      clientInput,
      bindArgsClientInputs,
      parsedInput,
      bindArgsParsedInputs,
      hasRedirected,
      hasNotFound,
      hasForbidden,
      hasUnauthorized
    }) => {},
    onError: async ({
      error,
      ctx,
      metadata,
      clientInput,
      bindArgsClientInputs
    }) => {},
    onSettled: async ({
      result,
      ctx,
      metadata,
      clientInput,
      bindArgsClientInputs,
      hasRedirected,
      hasNotFound,
      hasForbidden,
      hasUnauthorized
    }) => {},
  });
```

================================================
File: /website/docs/define-actions/bind-arguments.md
================================================
---
sidebar_position: 4
description: Learn how to pass additional arguments to your actions.
---

# Bind arguments

Next.js allows you to [pass additional arguments to your actions by using the `bind` method](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#passing-additional-arguments). This method supports Progressive Enhancement.

next-safe-action exposes a [`bindArgsSchemas` method](/docs/define-actions/instance-methods#bindargsschemas) that expects an array of schemas for bind arguments.

For example, here we're going to define an `onboardUser` action that has `userId` and `age` as bind arguments and an object with an `username` property as the main argument:

```typescript title="src/app/onboard-action.ts"
"use server";

import { actionClient } from "@/lib/safe-action";
import { z } from "zod";

const schema = z.object({
  username: z.string().min(3).max(30),
});

export const onboardUser = actionClient
  .schema(schema)
  // We can pass a named tuple type here, to get named parameters in the final function.
  // highlight-start
  .bindArgsSchemas<[userId: z.ZodString, age: z.ZodNumber]>([
    z.string().uuid(),
    z.number().min(18).max(150),
  ])
  // highlight-end
  .action(
    async ({
      parsedInput: { username },
      // highlight-next-line
      bindArgsParsedInputs: [userId, age],
    }) => {
      await new Promise((res) => setTimeout(res, 1000));

      return {
        message: `Welcome on board, ${username}! (age = ${age}, user id = ${userId})`,
      };
    }
  );
```

Then, we can use it like this inside a component:

```typescript title="src/app/onboard/page.tsx"
"use client";

import { useAction } from "next-safe-action/hooks";
import { onboardUser } from "./onboard-action";

export default function OnboardPage() {
  // Here we bind `userId` and `age` to `onboardUser`.
  // `boundOnboardUser` will have just `{ username: string }` as its argument, after this `bind` call.
  // highlight-start
  const boundOnboardUser = onboardUser.bind(
    null,
    "d3a96f0f-e509-4f2f-b7d0-cdf50f0dc772",
    30
  );
  // highlight-end

  // highlight-next-line
  const { execute, result, status, reset } = useAction(boundOnboardUser);

  // ...
}
```


================================================
File: /website/docs/define-actions/action-result-object.md
================================================
---
sidebar_position: 8
description: Action result object is the result of an action execution.
---

# Action result object

Here's how action result object is structured (all keys are optional):

- `data`: when execution is successful, what you returned in action's server code.
- `validationErrors`: when input data doesn't pass validation, an object that contains the validation errors. Can be customized using [`defaultValidationErrorsShape`](/docs/define-actions/create-the-client#defaultvalidationerrorsshape) initialization option and/or via [`handleValidationErrorsShape`function passed to `schema` method](/docs/define-actions/validation-errors#customize-validation-errors-format).
- `bindArgsValidationErrors`: when bound arguments don't pass validation, an object that contains the validation errors. Can be customized using [`defaultValidationErrorsShape`](/docs/define-actions/create-the-client#defaultvalidationerrorsshape) initialization option and/or via [`handleBindArgsValidationErrorsShape` function passed to `bindArgsSchemas` method](/docs/define-actions/validation-errors#customize-validation-errors-format).
- `serverError`: when execution fails, an error object that contains the error message, customizable by using the [`handleServerError`](/docs/define-actions/create-the-client#handleservererror) initialization function.

================================================
File: /website/docs/define-actions/instance-methods.md
================================================
---
sidebar_position: 2
description: List of methods of the safe action client.
---

# Instance methods

The instance created by `createSafeActionClient` has the following methods:

### `use`

```typescript
use(middlewareFn: MiddlewareFn) => new SafeActionClient()
```

`use` accepts a middleware function of type `MiddlewareFn` as argument and returns a new instance of the safe action client with that middleware function added to the stack, that will be executed after the last one, if any. Check out how to `use` middleware in [the related section](/docs/define-actions/middleware).

### `metadata`

```typescript
metadata(data: Metadata) => new SafeActionClient()
```

`metadata` expects an argument of the same type as the return value of the [`defineMetadataSchema`](/docs/define-actions/create-the-client#definemetadataschema) optional initialization function. If you don't provide this function to the action client when you initialize it, `metadata` will be `undefined`.

`metadata` lets you specify useful data about the safe action you're executing. You can access it in the `middlewareFn` passed to [`use`](#use) and in [`serverCodeFn`](#servercodefn) passed to [`action`/`stateAction`](#action--stateaction). If there's a mismatch between the metadata schema and the data you pass to `metadata`, the action will throw an error during execution. It returns a new instance of the safe action client.

### `schema`

```typescript
schema(inputSchema: S, utils?: { handleValidationErrorsShape?: HandleValidationErrorsShapeFn } }) => new SafeActionClient()
```

`schema` accepts an input schema of type `Schema` or a function that returns a promise of type `Schema` and an optional `utils` object that accepts an async [`handleValidationErrorsShape`](/docs/define-actions/validation-errors#customize-validation-errors-format) function. The schema is used to define the arguments that the safe action will receive, the optional [`handleValidationErrorsShape`](/docs/define-actions/validation-errors#customize-validation-errors-format) function is used to return a custom format for validation errors. If you don't pass an input schema, `parsedInput` and validation errors will be typed `undefined`, and `clientInput` will be typed `void`. It returns a new instance of the safe action client.

### `bindArgsSchemas`

```typescript
bindArgsSchemas(bindArgsSchemas: BAS, bindArgsUtils?: { handleBindArgsValidationErrorsShape?: HandleBindArgsValidationErrorsShapeFn }) => new SafeActionClient()
```

`bindArgsSchemas` accepts an array of bind input schemas of type `Schema[]` and an optional `bindArgsUtils` object that accepts an async [`handleBindArgsValidationErrorsShape`](/docs/define-actions/validation-errors#customize-validation-errors-format) function. The schema is used to define the bind arguments that the safe action will receive, the optional [`handleBindArgsValidationErrorsShape`](/docs/define-actions/validation-errors#customize-validation-errors-format) function is used to [return a custom format for bind arguments validation errors](/docs/define-actions/validation-errors#customize-validation-errors-format). It returns a new instance of the safe action client.

### `outputSchema`

```typescript
outputSchema(outputSchema: S) => new SafeActionClient()
```

`outputSchema` accepts a schema of type `Schema`. That schema is used to define what the safe action will return. If you don't pass an output schema when you're defining an action, the return type will be inferred instead. If validation fails, an `ActionOutputDataValidationError` is internally thrown. You can catch it inside [`handleServerError`](/docs/define-actions/create-the-client#handleservererror) and access the `validationErrors` property to get the validation errors. It returns a new instance of the safe action client.

### `action` / `stateAction`

```typescript
action(serverCodeFn: ServerCodeFn, utils?: SafeActionUtils) => SafeActionFn
```

```typescript
stateAction(serverCodeFn: StateServerCodeFn, utils?: SafeActionUtils) => SafeStateActionFn
```

`action`/`stateAction` is the final method in the list. It accepts a [`serverCodeFn`](#servercodefn) of type `ServerCodeFn`/`StateServerCodeFn` and an optional object with [action utils](/docs/define-actions/action-utils), and it returns a new safe action function of type `SafeActionFn`/`SafeStateActionFn`, which can be called from your components. When an action doesn't need input arguments, you can directly use this method without passing a schema to [`schema`](#schema) method.

When the action is executed, all middleware functions in the chain will be called at runtime, in the order they were defined.

### When to use `action` or `stateAction`

The only difference between `action` and `stateAction` is that [`useStateAction`](/docs/execute-actions/hooks/usestateaction) hook **requires** the usage of `stateAction` when defining a new Server Action function. Using `stateAction` changes the function signature: the first argument of the safe action will be `prevResult`, and the second one the client input, if a validation schema was passed to [`schema`](#schema) method. 

Note that when you use `stateAction`, and also want to access `prevResult` in `serverCodeFn`, you **must** type the returned data type of the function, since it can't be inferred, due to TypeScript limitations. See an example of this in the [`useStateAction` usage](/docs/execute-actions/hooks/usestateaction#example) section.

### `serverCodeFn`

```typescript title="Stateless action"
serverCodeFn(
  args: { parsedInput, bindArgsParsedInputs, clientInput, bindArgsClientInputs, ctx, metadata }
) => Promise<Data>;
```

```typescript title="Stateful action"
serverCodeFn = (
  args: { parsedInput, bindArgsParsedInputs, clientInput, bindArgsClientInputs, ctx, metadata },
  utils: { prevResult }
) => Promise<Data>;
```

`serverCodeFn` is the async function of type `ServerCodeFn`/`StateServerCodeFn` that will be executed on the **server side** when the action is invoked. If input validation fails, or execution gets halted in a middleware function, the server code function will not be called.

In the case of a stateful safe action, `serverCodeFn` will also receive the `prevResult` as a property of the second argument (`utils` object) from the previous action execution, thanks to the [`useStateAction`](/docs/execute-actions/hooks/usestateaction) hook (that uses React's [`useActionState`](https://react.dev/reference/react/useActionState) hook under the hood).

================================================
File: /website/docs/define-actions/_category_.json
================================================
{
	"label": "Define actions",
	"position": 2
}


================================================
File: /website/docs/define-actions/middleware.md
================================================
---
sidebar_position: 3
description: Learn how to use middleware functions in your actions.
---

# Middleware

next-safe-action, since version 7, ships with a composable and powerful middleware system, which allows you to create functions for almost every kind of use case you can imagine (authorization, logging, role based access, etc.). It works very similarly to the [tRPC implementation](https://trpc.io/docs/server/middlewares).

Middleware functions are defined using [`use`](/docs/define-actions/instance-methods#use) method in your action clients, via the `middlewareFn` argument.

## Usage

You can chain multiple middleware functions, that will be executed in the order they were defined. You can also await the next middleware function(s) in the stack (useful, for instance, for logging), and then return the result of the execution. Chaining functions is very useful when you want to dynamically extend the context and/or halt execution based on your use case.

### Instance level middleware

Instance level is the right place when you want to share middleware behavior for all the actions you're going to define; for example when you need to log the result of actions execution, or verify if the user intending to execute the operation is authorized to do so, and if not, halt the execution at that point, by throwing an error.

Here we'll use a logging middleware in the base client and then extend it with an authorization middleware in `authActionClient`. We'll also define a safe action called `editProfile`, that will use `authActionClient` as its client. Note that the `handleServerError` function passed to the base client will also be used for `authActionClient`:

```typescript title="src/lib/safe-action.ts"
import {
  createSafeActionClient,
  DEFAULT_SERVER_ERROR_MESSAGE,
} from "next-safe-action";
import { cookies } from "next/headers";
import { z } from "zod";
import { getUserIdFromSessionId } from "./db";

class ActionError extends Error {}

// Base client.
const actionClient = createSafeActionClient({
  handleServerError(e) {
    console.error("Action error:", e.message);

    if (e instanceof ActionError) {
      return e.message;
    }

    return DEFAULT_SERVER_ERROR_MESSAGE;
  },
  defineMetadataSchema() {
    return z.object({
      actionName: z.string(),
    });
  },
  // Define logging middleware.
  // highlight-start
}).use(async ({ next, clientInput, metadata }) => {
  console.log("LOGGING MIDDLEWARE");

  const startTime = performance.now();

  // Here we await the action execution.
  const result = await next();

  const endTime = performance.now();

  console.log("Result ->", result);
  console.log("Client input ->", clientInput);
  console.log("Metadata ->", metadata);
  console.log("Action execution took", endTime - startTime, "ms");

  // And then return the result of the awaited action.
  return result;
});
// highlight-end

// Auth client defined by extending the base one.
// Note that the same initialization options and middleware functions of the base client
// will also be used for this one.
export const authActionClient = actionClient
  // Define authorization middleware.
  // highlight-start
  .use(async ({ next }) => {
    const session = cookies().get("session")?.value;

    if (!session) {
      throw new Error("Session not found!");
    }

    const userId = await getUserIdFromSessionId(session);

    if (!userId) {
      throw new Error("Session is not valid!");
    }

    // Return the next middleware with `userId` value in the context
    return next({ ctx: { userId } });
  });
  // highlight-end
```

Here we import `authActionClient` in the action's file:

```typescript title="src/app/edituser-action.ts"
"use server";

// highlight-next-line
import { authActionClient } from "@/lib/safe-action";
import { z } from "zod";

const editProfile = authActionClient
  // We can pass the action name inside `metadata()`.
  .metadata({ actionName: "editProfile" })
  // Here we pass the input schema.
  .schema(z.object({ newUsername: z.string() }))
  // Here we get `userId` from the middleware defined in `authActionClient`.
  // highlight-next-line
  .action(async ({ parsedInput: { newUsername }, ctx: { userId } }) => {
    await saveNewUsernameInDb(userId, newUsername);

    return {
      updated: true,
    };
  });
```

### Action level middleware

Server Action level is the right place for middleware checks that only specific actions need to make. For instance, when you want to restrict the execution to specific user roles.

In this example we'll use the same `authActionClient` defined above to define a `deleteUser` action that chains a middleware function which restricts the execution of this operation to just admins:

```typescript title="src/app/deleteuser-action.ts"
"use server";

import { authActionClient } from "@/lib/safe-action";
import { z } from "zod";

const deleteUser = authActionClient
  // highlight-start
  .use(async ({ next, ctx }) => {
    // `userId` comes from the context set in the previous middleware function.
    const userRole = await getUserRole(ctx.userId);

    if (userRole !== "admin") {
      throw new ActionError("Only admins can delete users.");
    }

    // Here we pass the same untouched context (`userId`) to the next function, since we don't need
    // to add data to the context here.
    return next();
  })
  // highlight-end
  .metadata({ actionName: "deleteUser" })
  .action(async ({ ctx: { userId } }) => {
    // Here we're sure that the user that is performing this operation is an admin.
    await deleteUserFromDb(userId);
  });
```

If a regular user tries to do the same, the execution will be stopped at the last middleware function, defined at the action level, that checks the user role.

---

## `middlewareFn` arguments

- `clientInput`: the raw input (not parsed) passed from client.
- `bindArgsClientInputs`: the raw array of bind arguments inputs (not parsed).
- `ctx`: type safe context value from previous middleware function(s).
- `metadata`: metadata for the action.
- `next` function that will execute the next function in the middleware stack or the server code function. You can opionally extend the `ctx` inside of it.

## `middlewareFn` return value

`middlewareFn` returns a Promise of a `MiddlewareResult` object. It extends the result of a safe action with `success` property, and `parsedInput`, `bindArgsParsedInputs` and `ctx` optional properties. This is the exact return type of the `next` function, so you must always return it (or its result) to continue executing the middleware chain.

## Extend context

Context is a special object that holds information about the current execution state. This object is passed to middleware functions and server code functions when defining actions.

Starting from version 7.6.0, context is extended by default when defining middleware functions. For instance, if you want both the `sessionId` and `userId` in the context, by using two different middleware functions (trivial example), you can do it like this:

```typescript title="src/lib/safe-action.ts"
import { createSafeActionClient } from "next-safe-action";

export const actionClient = createSafeActionClient()
  .use(async ({ next }) => {
    const sessionId = await getSessionId();
    return next({ ctx: { sessionId } })
  })
  .use(async ({ next, ctx }) => {
    const { sessionId } = ctx; // Context contains `sessionId`
    const userId = await getUserIdBySessionId(sessionId);
    return next({ ctx: { userId } })
  })
  .use(async ({ next }) => {
    // You can also define a middleware function that doesn't extend or modify the context.
    return next();
  })
```

And then use the client to define an action:

```typescript title="src/app/test-action.ts"
"use server";

import { actionClient } from "@/lib/safe-action";

export const testAction = actionClient
  .action(async ({ ctx }) => {
    // Context contains `sessionId` and `userId` thanks to the middleware.
    // highlight-next-line
    const { sessionId, userId } = ctx;
  });
```

## Create standalone middleware

:::info
Since version 7.7.0, this API is stable, so it was renamed from `experimental_createMiddleware` to `createMiddleware`.
:::

Starting from version 7.6.0, you can create standalone middleware functions using the built-in `createMiddleware()` function.

Thanks to this feature, and the previously mentioned [context extension](#extend-context), you can now define standalone middleware functions and even publish them as packages, if you want to.

Here's how to use `createMiddleware()`:

```typescript title="src/lib/safe-action.ts"
import { createSafeActionClient, createMiddleware } from "next-safe-action";
import { z } from "zod";

export const actionClient = createSafeActionClient({
  defineMetadataSchema: () => z.object({
    actionName: z.string(),
  }),
  handleServerError: (e) => {
    console.error("Action error:", e.message);
    return {
      message: e.message,
    }
  }
}).use(async ({ next }) => {
  return next({ ctx: { foo: "bar" } });
});

// This middleware works with any client.
// highlight-start
const myMiddleware1 = createMiddleware().define(async ({ next }) => {
  // Do something useful here...
  return next({ ctx: { baz: "qux" } });
});
// highlight-end

// This middleware works with clients that at minimum have `ctx.foo`, `metadata.actionName`
// and `serverError.message` properties. More information below. *
// highlight-start
const myMiddleware2 = createMiddleware<{
  ctx: { foo: string }; // [1]
  metadata: { actionName: string }; // [2]
  serverError: { message: string } // [3]
}>().define(async ({ next }) => {
  // Do something useful here...
  return next({ ctx: { john: "doe" } });
});
// highlight-end

// You can use it like a regular middleware function.
export const actionClientWithMyMiddleware = actionClient.use(myMiddleware1).use(myMiddleware2);
```

An action defined using the `actionClientWithMyMiddleware` will contain `foo`, `baz` and `john` in its context.

\* Note that you can pass, **but not required to**, an object with three generic properties to the `createMiddleware()` function: `ctx` \[1\], `metadata` \[2\] and `serverError` \[3\]. Those keys are optional, and you should only provide them if you want your middleware to require **at minimum** the shape you passed in as generic. By doing that, following the above example, you can then access `ctx.foo` and `metadata.actionName` in the middleware you're defining, and by awaiting the `next` function you'll see that `serverError` is an object with the `message` property. If you pass a middleware that requires those properties to a client that doesn't have them, you'll get an error in `use()` method.

================================================
File: /website/docs/define-actions/validation-errors.md
================================================
---
sidebar_position: 5
description: Learn how to customize or manually creating validation errors.
---

# Validation errors

## Customize validation errors format

next-safe-action, by default, emulates Zod's [`format`](https://zod.dev/ERROR_HANDLING?id=formatting-errors) method for building both validation and bind args validation errors and return them to the client.

This can be customized both at the safe action client level and at the action level by:
- using [`defaultValidationErrorsShape`](/docs/define-actions/create-the-client#defaultvalidationerrorsshape) optional property in `createSafeActionClient`;
- using `handleValidationErrorsShape` and `handleBindArgsValidationErrorsShape` optional async functions in [`schema`](/docs/define-actions/instance-methods#schema) and [`bindArgsSchemas`](/docs/define-actions/instance-methods#bindargsschemas) methods.

The second way overrides the shape set at the instance level, per action.

For example, if you want to flatten the validation errors (emulation of Zod's [`flatten`](https://zod.dev/ERROR_HANDLING?id=flattening-errors) method), you can (but not required to) use the `flattenValidationErrors` utility function exported from the library, combining it with `handleValidationErrorsShape` inside `schema` method:

```typescript src="src/app/login-action.ts"
"use server";

import { actionClient } from "@/lib/safe-action";
import {
  flattenValidationErrors,
  flattenBindArgsValidationErrors,
} from "next-safe-action";
import { z } from "zod";

const schema = z.object({
  username: z.string().min(3).max(10),
  password: z.string().min(8).max(100),
});

const bindArgsSchemas = [z.string().uuid()] as const;

export const loginUser = actionClient
  .schema(schema, {
    // Here we use the `flattenValidationErrors` function to customize the returned validation errors
    // object to the client.
    // highlight-next-line
    handleValidationErrorsShape: async (ve, utils) => flattenValidationErrors(ve).fieldErrors,
  })
  .bindArgsSchemas(bindArgsSchemas, {
    // Here we use the `flattenBindArgsValidatonErrors` function to customize the returned bind args
    // validation errors object array to the client.
    // highlight-next-line
    handleBindArgsValidationErrorsShape: async (ve, utils) => flattenBindArgsValidationErrors(ve),
  })
  .action(async ({ parsedInput: { username, password } }) => {
    // Your code here...
  });
```

The second argument of both `handleValidationErrorsShape` and `handleBindArgsValidationErrorsShape` functions is an `utils` object that contains info about the current action execution (`clientInput`, `bindArgsClientInputs`, `metadata` and `ctx` properties). It's passed to the functions to allow granular and dynamic customization of the validation errors shape.

:::note
If you chain multiple `schema` methods, as explained in the [Extend previous schema](/docs/define-actions/extend-previous-schemas) page, and want to override the default validation errors shape, you **must** use `handleValidationErrorsShape` inside the last `schema` method, otherwise there would be a type mismatch in the returned action result.
:::

### `flattenValidationErrors` and `flattenBindArgsValidationErrors` utility functions

Exported `flattenValidationErrors` and `flattenBindArgsValidationErrors` utility functions emulate Zod's [`flatten`](https://zod.dev/ERROR_HANDLING?id=flattening-errors) method for building validation errors and return them to the client. Be aware that they discard errors for nested fields in objects, but when dealing with simple one-level schemas, it's sometimes better to use the flattened format instead of the formatted one.

So, for instance, a formatted (default) validation errors object like this:

```typescript
validationErrors = {
  _errors: ["A global error"],
  username: {
    _errors: ["Username format is invalid", "Username is too short"],
  },
  password: {
    _errors: ["Password must be at least 8 characters long"],
  },
};
```

When passed to `flattenValidationErrors`, the function will return a flattened version of it:

```typescript
const flattenedErrors = flattenValidationErrors(validationErrors);

// `flattenedErrors` will be:
flattenedErrors = {
  formErrors: ["A global error"],
  fieldErrors: {
    username: ["Username format is invalid", "Username is too short"],
    password: ["Password must be at least 8 characters long"],
  },
};
```

`flattenBindArgsValidationErrors` works the same way, but with bind args (in [`bindArgsSchemas`](/docs/define-actions/instance-methods#bindargsschemas) method), to build the validation errors array.

### `formatValidationErrors` and `formatBindArgsValidationErrors` utility functions

These functions emulate Zod's [`format`](https://zod.dev/ERROR_HANDLING?id=formatting-errors) method for building validation and bind args validation errors and return them to the client. You can use them, for instance, if you set the [`defaultValidationErrorsShape`](/docs/define-actions/create-the-client#defaultvalidationerrorsshape) to `flattened` in `createSafeActionClient` and need the formatted shape for a specific action.

## Create custom validation errors

When input data fails schema validation, a `validationErrors` object is returned to the client. This object contains all the fields that failed validation, and their corresponding error messages.

It's often useful to also define custom logic to set additional validation errors by ourselves, for example when a user is signing up and password/confirm password fields don't match, and/or when the email is already in use.

Let's see how to implement this specific case in the optimal way, using both schema refinements and errors set in action's server code function, thanks to `returnValidationErrors`.

### Schema refinements

First of all, we must check if the password and confirm password fields match. Using Zod in this example as our validation library, we can utilize `.refine` or `.superRefine` at the schema level to do that:

```typescript
import { z } from "zod";

const schema = z
  .object({
    email: z.string().email(),
    password: z.string().min(8).max(100),
    confirmPassword: z.string().min(8).max(100),
  })
  // highlight-start
  .refine(({ password, confirmPassword }) => password === confirmPassword, {
    path: ["confirmPassword"],
    message: "Passwords do not match",
  });
  // highlight-end
```

If the two fields don't match, a custom validation error will be set for the `confirmPassword` field. This is the perfect place to make this check, because verifying that two fields are the same should be a schema job.

### `returnValidationErrors`

When registering a new user, we also need to check if the email is already stored in the database, and if so, inform the user that that address is taken by someone else. The best place to make this check is inside the action's server code function. If we find out that the email is already taken by another user, we can return a custom validation error to the client using `returnValidationErrors`:

```typescript
import { returnValidationErrors } from "next-safe-action";
import { actionClient } from "@/lib/safe-action";

// Here we're using the same schema declared above.
const signupAction = actionClient
  .schema(schema)
  .action(async ({ parsedInput: { email } }) => {
    // Assume this is a database call.
    if (!isEmailAvailable(email)) {
      // highlight-start
      returnValidationErrors(schema, {
        email: {
          _errors: ["Email already registered"],
        },
      });
      // highlight-end
    }

    ...
  });
```

Note that:

- You're required to pass a schema as the first argument of `returnValidationErrors`. This is used to infer the type of the validation errors set via the second argument.
- Errors set using `returnValidationErrors` will not be merged with the schema ones. If schema validation fails, the execution stops before reaching action's server code function. Otherwise, the action's backend code would receive invalid parsed input.
- `returnValidationErrors` returns `never`. This means that internally it throws an error that gets caught and processed by next-safe-action, so code declared below the `returnValidationErrors` invocation will not be executed.
- Since it returns `never`, you don't need to use `return` before this function call, and you can call it only once per execution path (it works the same way as Next.js `redirect` and `notFound` functions).

================================================
File: /website/docs/define-actions/extend-previous-schemas.md
================================================
---
sidebar_position: 6
description: Learn how to use next-safe-action with a i18n solution.
---

# Extend previous schema(s)

Sometimes it's useful to define an action "template" with a base schema and then extend it with additional properties. This can be done inside the [`schema`](/docs/define-actions/instance-methods#schema) method by passing an async function that has the previous schema as its argument. See the example below:

```typescript
"use server";

import { actionClient } from "@/lib/safe-action";
import { z } from "zod";

const schema = z.object({
  username: z.string(),
});

const myAction = actionClient
  .schema(schema)
  // highlight-start
  .schema(async (prevSchema) => {
    // Here we extend the previous schema with `password` property.
    return prevSchema.extend({ password: z.string() });
  })
  .schema(async (prevSchema) => {
    // Here with `age` property.
    return prevSchema.extend({ age: z.number().positive() });
  })
  // highlight-end
  // `parsedInput` will be an object with `username`, `password` and `age` properties.
  .action(async ({ parsedInput: { username, password, age } }) => { 
    // Do something useful here...
  });
```

Note that if you don't use `prevSchema` inside the `schema` method, the previous schema(s) will be overwritten.

================================================
File: /website/docs/define-actions/create-the-client.mdx
================================================
---
sidebar_position: 1
description: Learn how to create a safe action client,
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Create the client

After [installing the correct packages](/docs/getting-started#installation), the first thing you have to do is to create an instance of the safe action client, using the correct configuration based on your validation library of choice:

<Tabs groupId="validation-libraries">
<TabItem value="zod" label="Zod" default>
```typescript title="src/lib/safe-action.ts"
import { createSafeActionClient } from "next-safe-action";

export const actionClient = createSafeActionClient();
```

When using Zod, you don't need to specify a `validationAdapter`, because it's the default validation library for next-safe-action.
</TabItem>
<TabItem value="valibot" label="Valibot">
```typescript title="src/lib/safe-action.ts"
import { createSafeActionClient } from "next-safe-action";
import { valibotAdapter } from "next-safe-action/adapters/valibot";

export const actionClient = createSafeActionClient({
  validationAdapter: valibotAdapter(),
});
```
</TabItem>
<TabItem value="yup" label="Yup">
```typescript title="src/lib/safe-action.ts"
import { createSafeActionClient } from "next-safe-action";
import { yupAdapter } from "next-safe-action/adapters/yup";

export const actionClient = createSafeActionClient({
  validationAdapter: yupAdapter(),
});
```
</TabItem>
<TabItem value="typebox" label="TypeBox">
```typescript title="src/lib/safe-action.ts"
import { createSafeActionClient } from "next-safe-action";
import { typeboxAdapter } from "next-safe-action/adapters/typebox";

export const actionClient = createSafeActionClient({
  validationAdapter: typeboxAdapter(),
});
```
</TabItem>
</Tabs>


In the following section we will go through all the options that can be passed to the `createSafeActionClient` function to customize the client behavior for your needs.

## Initialization options

### `validationAdapter?`

This optional function is used to define which validation adapter should be used to validate the client input, based on the validation library of your choice. If not provided, the default `zodAdapter()` is used.

### `handleServerError?`

:::info
This function has been introduced in v7.9.0. Previous versions had two separate functions: `handleServerErrorLog` and `handleReturnedServerError`. The `handleServerError` function is simply a merge of the two, since having two functions for this task was unnecessary. The refactoring is super simple, you just have to combine the two functions body into one. Find out more about this in the [v7.9.0 changelog](https://github.com/TheEdoRan/next-safe-action/releases/tag/v7.9.0).
:::

This optional function handles errors that occur during action's server execution, middleware included. It's used to customize logging and the shape of the server error returned to the client. You also have access to useful properties via the `utils` object, which is the second argument of the function. If not provided, it defaults to console logging the error message and returning a generic string to the client, for all the errors (`DEFAULT_SERVER_ERROR_MESSAGE`, exported from `next-safe-action`).

Here's a simple example, changing the default message for every error thrown on the server, while keeping the console logging:

```typescript title=src/lib/safe-action.ts
import { createSafeActionClient } from "next-safe-action";

export const actionClient = createSafeActionClient({
  // Can also be an async function.
  handleServerError(e, utils) {
    // You can access these properties inside the `utils` object.
    const { clientInput, bindArgsClientInputs, metadata, ctx } = utils;

    // Log to console.
    console.error("Action error:", e.message);

    // Return generic message
    return "Oh no, something went wrong!";
  },
});
```

<br/>

A more useful one would be to customize the message based on the error type. We can, for instance, create a custom error class and check the error type inside this function:

```typescript title=src/lib/safe-action.ts
import { createSafeActionClient, DEFAULT_SERVER_ERROR_MESSAGE } from "next-safe-action";

class MyCustomError extends Error {}

export const actionClient = createSafeActionClient({
  // Can also be an async function.
  handleServerError(e) {
    // Log to console.
    console.error("Action error:", e.message);

    // In this case, we can use the 'MyCustomError` class to unmask errors
    // and return them with their actual messages to the client.
    if (e instanceof MyCustomError) {
      return e.message;
    }

    // Every other error that occurs will be masked with the default message.
    return DEFAULT_SERVER_ERROR_MESSAGE;
  },
});
```

You can also easily rethrow all occurred server errors, if you prefer that behavior. This way, `serverError` in the [action result object](/docs/define-actions/action-result-object) will always be undefined and the action called from the client will throw the server error:

```typescript title=src/lib/safe-action.ts
import { createSafeActionClient } from "next-safe-action";

class MyCustomError extends Error {}

export const actionClient = createSafeActionClient({
  // Can also be an async function.
  handleServerError(e) {
    // Log to console.
    console.error("Action error:", e.message);

    // Rethrow all server errors:
    throw e;
  },
});
```

### `defineMetadataSchema?`

This optional function is used to define the type of the metadata for safe actions. If not provided, `metadata` will default to `undefined` value. You can find more information about metadata in the [`metadata` instance method section](/docs/define-actions/instance-methods#metadata). If you define a metadata schema and you don't call the `metadata` method before defining an action, an error will be thrown.

Here's an example defining a client with a metadata object containing `actionName` as a string, using a Zod schema:

```typescript title="src/app/safe-action.ts"
import { createSafeActionClient } from "next-safe-action";
import { z } from "zod";

export const actionClient = createSafeActionClient({
  defineMetadataSchema() {
    return z.object({
      actionName: z.string(),
    });
  },
});
```

### `defaultValidationErrorsShape?`

This optional property is used to specify the default shape of the validation errors. The two possible values are `flattened` and `formatted`. The first one emulates Zod [`flatten`](https://zod.dev/ERROR_HANDLING?id=flattening-errors) method, the second one emulates Zod [`format`](https://zod.dev/ERROR_HANDLING?id=formatting-errors) method, both for `validationErrors` and `bindArgsValidationErrors`. You can override the default shape in `schema` and `bindArgsSchemas` methods, more information about that [here](/docs/define-actions/validation-errors#customize-validation-errors-format). If this property is not provided, the default shape is `formatted`, as it also catches errors for nested schema objects.

```typescript
import { createSafeActionClient } from "next-safe-action";

export const actionClient = createSafeActionClient({
  // By default all actions will return validation errors in the `flattened` shape.
  defaultValidationErrorsShape: "flattened",
});
```

### `throwValidationErrors?`

This optional boolean property changes the default behavior of validation errors handling. When this option is set to `true`, the action will throw a `ActionValidationError` with the related validation errors in a `validationErrors` property. This option also works for server validation errors set with [`returnValidationErrors`](/docs/define-actions/validation-errors#returnvalidationerrors) function. The errors shape follows the `defaultValidationErrorsShape` option or the overridden one set in [`schema`](/docs/define-actions/instance-methods#schema) using the optional [`handleValidationErrorsShape`](/docs/define-actions/validation-errors#customize-validation-errors-format) function. The default value is `false`.

================================================
File: /website/docs/migrations/v4-to-v5.md
================================================
---
sidebar_position: 2
description: Learn how to migrate from next-safe-action version 4 to version 5.
sidebar_label: v4 to v5
---

# Migration from v4 to v5

Version 5.x.x of `next-safe-action` is required for Next.js >= 14 applications.

:::note
You can continue to use version 4 of the library, compatible with Next.js 13: `npm i next-safe-action@4`
:::

## BREAKING CHANGES

Server Actions are now stable, so there's no need to enable them as an experimental feature in your Next.js config file anymore:

```diff title=next.config.js
module.exports = {
-  experimental: {
-    serverActions: true
-  }
}
```

### Internal changes (hooks)

React now exports `useOptimistic` hook, instead of the previous `experimental_useOptimistic`. This is why a new major version of `next-safe-action` is required for Next.js >= 14 apps.


================================================
File: /website/docs/migrations/v5-to-v6.md
================================================
---
sidebar_position: 3
description: Learn how to migrate from next-safe-action version 5 to version 6.
sidebar_label: v5 to v6
---

# Migration from v5 to v6

## What's new?

With next-safe-action version 6, you can now use a wide range of validation libraries, even multiple and custom ones at the same time, thanks to the great [TypeSchema](https://typeschema.com/) library. You can find supported libraries [here](https://typeschema.com/#coverage).

Existing code will not be affected, since Zod is supported by TypeSchema. However, now you can for example define a new safe action using [Yup](https://github.com/jquense/yup) or [Valibot](https://valibot.dev/), while still keeping existing actions with Zod validation, and everything will be handled internally by next-safe-action, thanks to the TypeSchema abstractions.

## BREAKING CHANGES

### Action result object

- Property `validationError` is now called `validationErrors`.

### Safe action client

- `handleReturnedServerError()` function now directly returns the server error message as a `string`, instead of a `{ serverError: string }` object.

### Hooks

Hooks are now exported from `next-safe-action/hooks` instead of `next-safe-action/hook`.

### Types

- `ServerCode` is now called `ServerCodeFn`.

## Misc changes

### Types

- Exported new `SafeClientOpts` type, which represents the options for the safe action client, used internally by `createSafeActionClient()` function.


================================================
File: /website/docs/migrations/v3-to-v4.md
================================================
---
sidebar_position: 1
description: Learn how to migrate from next-safe-action version 3 to version 4.
sidebar_label: v3 to v4
---

# Migration from v3 to v4

Version 4.x.x of `next-safe-action` introduced many improvements, some fixes, and some breaking changes.

This guide will help you migrate from v3 to v4, hopefully without too much trouble.

:::note
You can continue to use version 3 of the library if you want to. There are no security implications, since version 4 introduced some new features and changed some functions and properties names. No security patches were committed to v4, at least for the time being, so v3 is currently still safe to use. You'll not get new features in v3, though.
:::

## BREAKING CHANGES

### Safe action client

- `buildContext()` function is now called `middleware()`, and it can still return a context object.
- `serverErrorLogFunction()` function is now called `handleServerErrorLog()`.

### Hooks

- `res` object is now called `result`.
- Action status before was reported through returned `hasExecuted`, `isExecuting`, `hasSucceeded` and `hasErrored` properties. Now there's a single property of type string called `status` that contains the current action status, and it can be `"idle"`, `"executing"`, `"hasSucceeded"` or `"hasErrored"`.
- Reorganized callbacks arguments for `onSuccess` and `onError`:
  - from `onSuccess(data, reset, input)` to `onSuccess(data, input, reset)`
  - from `onError(error, reset, input)` to `onError(error, input, reset)`
- `useOptimisticAction` just required a safe action and an initial optimistic state before. Now it requires a `reducer` function too, that determines the behavior of the optimistic state update when the `execute` function is called. Also, now only one input argument is required by `execute`, instead of two. The same input passed to the actual safe action is now passed to the `reducer` function too, as the second argument (`input`). More information about this hook can be found [here](/docs/execute-actions/hooks/useoptimisticaction).

### Types

- `ActionDefinition` is now called `ServerCode`.
- `HookRes` is now called `HookResult`.
- `ClientCaller` is now called `SafeAction`.

## New features

### Hooks

- Added optional `onSettled` callback for `useAction` and `useOptimisticAction` hooks. It gets executed if the action succeeds or fails, after `onSuccess` and `onError`.

## Fixes

- Fixed an issue with Zod input validation parsing. Before, if an async `superRefine()` was used when defining the schema, the validation would fail, resulting in a `serverError` response for the client. Now the validation is done through `safeParseAsync()`, so the problem is gone.

## Misc

### Safe action client

- Now `Context` returned by `middleware()` (previously called `buildContext()` in v3) is not required to be an object anymore, it can be of any type.

### Hooks

- Before, you had to return an object from actions you wanted to execute via `useOptimisticAction` hook. Now, with the new exposed `reducer` function (see above), you can return anything you want from action server code body.


================================================
File: /website/docs/migrations/v6-to-v7.md
================================================
---
sidebar_position: 4
description: Learn how to migrate from next-safe-action version 6 to version 7.
sidebar_label: v6 to v7
---

# Migration from v6 to v7

## What's new?

Well, pretty much everything. Version 7 now works using methods; you might be familiar with this design if you have worked with [tRPC](https://trpc.io/) or [Kysely](https://kysely.dev/). A complete rewrite of the library in this direction was needed to vastly improve next-safe-action's APIs, and ensure that future versions will not break them (unless React/Next.js APIs change under the hood). The new design is much more resilient, powerful and flexible. 

## TL;DR

_But please still read this migration guide carefully before upgrading to v7._

Assuming you're using Zod, in previous versions, you'd define an auth action client and then an action like this:

```typescript title="action-client-v6.ts"
import { createSafeActionClient } from "next-safe-action";
import { cookies } from "next/headers";

// Base client
export const baseActionClient = createSafeActionClient();

// Auth client
export const authActionClient = createSafeActionClient({
  async middleware(parsedInput) {
    const session = cookies().get("session")?.value;

    if (!session) {
      throw new Error("Session not found!");
    }

    const userId = await getUserIdFromSessionId(session);

    if (!userId) {
      throw new Error("Session is not valid!");
    }

    return { userId };
  },
});
```


```typescript title="action-v6.ts"
"use server";

import { authActionClient } from "@/lib/safe-action";
import { z } from "zod";

export const editProfile = authActionClient(z.object({ username: z.string() }), async ({ username }, { ctx: { userId } }) => {
  await saveNewUsernameInDb(userId, username);

  return {
    updated: true,
  }
})
```

The same behavior can be achieved in v7 with the following refectored code:

```typescript title="action-client-v7.ts"
import { createSafeActionClient } from "next-safe-action";
import { cookies } from "next/headers";

// Base client
export const actionClient = createSafeActionClient();

// Auth client
export const authActionClient = actionClient.use(async ({ next, ctx }) => {
  const session = cookies().get("session")?.value;

  if (!session) {
    throw new Error("Session not found!");
  }

  const userId = await getUserIdFromSessionId(session);

  if (!userId) {
    throw new Error("Session is not valid!");
  }

  return next({ ctx: { userId } });
});
```

```typescript title="action-v7.ts"
"use server";

import { authActionClient } from "@/lib/safe-action";
import { z } from "zod";

export const editProfile = authActionClient
  .schema(z.object({ username: z.string() }))
  .action(async ({ parsedInput: { username }, ctx: { userId } }) => {
    await saveNewusernameInDb(userId, username)

    return {
      updated: true,
    }
  });
```

## New features

### [Allow setting validation errors in action server code function](https://github.com/TheEdoRan/next-safe-action/issues/62)

Sometimes it's useful to set custom validation errors in the action server code function, for example when the user wants to log in, but there was a problem with the email or password fields. next-safe-action v7 introduces a new function called [`returnValidationErrors`](/docs/define-actions/validation-errors#returnvalidationerrors) that allows you to do that.

### [Support schema nested objects validation](https://github.com/TheEdoRan/next-safe-action/issues/51)

Before v7, next-safe-action allowed you to define schemas with nested objects, but validation errors were not correctly set for nested fields. Version 7 of the library changes the returned errors to be an object with nested fields, that emulates Zod's [`format`](https://zod.dev/ERROR_HANDLING?id=formatting-errors) method.

### [Support middleware chaining](https://github.com/TheEdoRan/next-safe-action/issues/90)

This is a core change in next-safe-action v7. In previous versions, you could define just one "monolithic" middleware at the instance level. So, the previous workflow was to define multiple safe action clients, each one with its own middleware.

With version 7, you can chain multiple middleware functions using the [`use`](/docs/define-actions/instance-methods#use) method, both at the instance level and at the action level. This is explained in detail in the [middleware page](/docs/define-actions/middleware) of the documentation. The new design is much more flexible and powerful, allowing you to do things that just couldn't be done before, such as extending context, logging action execution, [integrating with third party systems for error reporting](https://github.com/TheEdoRan/next-safe-action/issues/39#issuecomment-2062387039), etc.

### [Generic type for `serverError`](https://github.com/TheEdoRan/next-safe-action/issues/86)

The `serverError` property of the [action result object](/docs/define-actions/action-result-object) is now of generic type. By default it's a `string` with a default value of "Something went wrong while executing the operation.". You can customize error value and type using the [`handleServerError`](/docs/define-actions/create-the-client#handleservererror) initialization function, just like pre-v7. Basically, what you return from that function is what `serverError` will be on the client.

### [Support binding additional arguments](https://github.com/TheEdoRan/next-safe-action/issues/29)

Next.js allows you to [pass additional arguments to the action](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#passing-additional-arguments) using JavaScript `bind` method. This approach has the advantage of supporting progressive enhancement.

next-safe-action v7 supports bind arguments via the [`bindArgsSchemas`](/docs/define-actions/instance-methods#bindargsschemas) method.

### [Support setting default validation errors shape per instance](https://github.com/TheEdoRan/next-safe-action/issues/153)

By default, next-safe-action v7 returns validation errors in an object of the same shape as Zod's [`format`](https://zod.dev/ERROR_HANDLING?id=formatting-errors) method. You can override this behavior globally by setting the [`defaultValidationErrorsShape`](/docs/define-actions/create-the-client#defaultvalidationerrorsshape) optional property to `flattened` in `createSafeActionClient` method. Doing so, the validation errors are returned in the shape of the Zod's [`format`](https://zod.dev/ERROR_HANDLING?id=formatting-errors) method. If you need a custom format for a specific action, you can override the default shape using the `handleValidationErrorsShape` and `handleBindArgsValidationErrorsShape` optional functions in `schema` and `bindArgsSchemas` methods, as explained below.

### [Support custom validation errors shape](https://github.com/TheEdoRan/next-safe-action/issues/98)

As already said above, by default version 7 now returns validation errors in the same format of the Zod's [`format`](https://zod.dev/ERROR_HANDLING?id=formatting-errors) method.

This is customizable by using the `handleValidationErrorsShape`/`handleBindArgsValidationErrorsShape` optional functions in `schema`/`bindArgsSchemas` methods. Check out [this page](/docs/define-actions/validation-errors#customize-validation-errors-format) for more information. For example, if you need to work with flattened errors for a specific action, next-safe-action conveniently provides two functions to do that: [`flattenValidationErrors` and `flattenBindArgsValidationErrors`](/docs/define-actions/validation-errors#flattenvalidationerrors-and-flattenbindargsvalidationerrors-utility-functions).

### [Allow calling `action` method without `schema`](https://github.com/TheEdoRan/next-safe-action/issues/107)

Sometimes it's not necessary to define an action with input. In this case, you can omit the [`schema`](/docs/define-actions/instance-methods#schema) method and use directly the [`action`/`stateAction`](/docs/define-actions/instance-methods#action--stateaction) method.

### [Support passing schema via async function](https://github.com/TheEdoRan/next-safe-action/issues/155)

When working with i18n solutions, often you'll find implementations that require awaiting a `getTranslations` function in order to get the translations, that then get passed to the schema. Starting from version 7, next-safe-action allows you to pass an async function to the [`schema`](/docs/define-actions/instance-methods#schema) method, that returns a promise of type `Schema`. More information about this feature can be found in [this discussion](https://github.com/TheEdoRan/next-safe-action/discussions/111) on GitHub and in the [i18n](/docs/recipes/i18n) recipe page.

### [Support action execution callbacks](https://github.com/TheEdoRan/next-safe-action/issues/162)

It's sometimes useful to be able to execute custom logic on the server side after an action succeeds or fails. Starting from version 7, next-safe-action allows you to pass action callbacks when defining an action. More information about this feature can be found [here](/docs/define-actions/action-utils#action-callbacks).

### [Support stateful actions using React `useActionState` hook](https://github.com/TheEdoRan/next-safe-action/issues/91)

React added a hook called `useActionState` that replaces the previous `useFormState` hook and improves it. next-safe-action v7 uses it under the hood in the exported [`useStateAction`](/docs/execute-actions/hooks/usestateaction) hook, that keeps track of the state of the action execution.

Note that this hook expects as argument actions defined using the `stateAction` method, and not the usual `action` method. Find more information about these two methods [here](/docs/define-actions/instance-methods#action--stateaction).

:::warning important
The `useActionState` hook requires Next.js >= 15 to work, because previous versions do not support the React's [`useActionState`](https://react.dev/reference/react/useActionState) hook that is used under the hood. In the meantime, you can use the [`stateAction`](/docs/define-actions/instance-methods#action--stateaction) method manually with React 18's `useFormState` hook.

The `useActionState` hook is exported from `next-safe-action/stateful-hooks` path, unlike the other two hooks. This is because it uses React 19 features and would cause build errors in React 18.
:::

### [Return input from hooks](https://github.com/TheEdoRan/next-safe-action/issues/117)

Sometimes it's useful to access the input passed to an action when using hooks. Starting from version 7, `input` property is returned from hooks.

### [Return shorthand statuses from hooks](https://github.com/TheEdoRan/next-safe-action/issues/133)

Starting from version 7, `isIdle`, `isExecuting`, `hasSucceeded` and `hasErrored` are returned from hooks, in addition to the `status` property. This is the same behavior of next-safe-action pre-v4 and very similar to the [TanStack Query](https://tanstack.com/query/latest) API.

### [Return `executeAsync` from `useAction` and `useOptimisticAction` hooks](https://github.com/TheEdoRan/next-safe-action/issues/146)

Sometimes it's useful to await the result of an action execution when using actions via hooks. Starting from version 7, `executeAsync` is returned from `useAction` and `useOptimisticAction` hooks. It's essentially the same as the original safe action function, with the added benefits of the hooks execution behavior. Note that it's currently not possible to return this function from the `useStateAction` hook, due to internal React limitations.

## Refactors

### `serverCodeFn` signature

Previously, `serverCodeFn` had two arguments: `parsedInput` and `ctx`. Now, it only has one argument, which is an object that contains `parsedInput` and `ctx`, and other useful properties. In the case of [`stateAction`](/docs/define-actions/instance-methods#action--stateaction) method, `serverCodeFn` also has an additional argument, which is an object that contains the previous result of the action. Find more information about `serverCodeFn` [here](/docs/define-actions/instance-methods#servercodefn).

### `useOptimisticAction` signature

The function signature for `useOptimisticAction` has been updated to be much more clear and readable. Before, you had to pass `currentState` and `updateFn` as the second and third argument of the hook. Now, the first argument is the safe action, and additional required and optional properties are placed inside the second argument of the hook, which is an object.

Other than that, now `currentState` is unlinked from the safe action's return value. The action purpose in optimistic state updates is just to make mutations of data. Then, the fresh data is refetched from the parent Server Component, so it didn't make sense to lock the type of `currentState` to the action's return type. This is explained in detail [here](https://github.com/TheEdoRan/next-safe-action/discussions/127#discussioncomment-9480520) and [here](https://github.com/TheEdoRan/next-safe-action/pull/134).

Find more information about the updated `useOptimisticAction` hook [here](/docs/execute-actions/hooks/useoptimisticaction).

### Hook callbacks arguments

Previously, there were multiple arguments in hook callbacks. Now, metadata is passed inside a single object that is the first argument of each function. Find more information about the updated callbacks [here](/docs/execute-actions/hooks/hook-callbacks).

### Action metadata

In version 6, you could pass metadata to actions via the third argument of the safe action function, after `serverCodeFn`. In version 7, there's a dedicated `metadata` method that lets you define useful data for the action execution. This data can then be accessed in middleware functions and `serverCodeFn`. Find more information about the `metadata` method [here](/docs/define-actions/instance-methods#metadata).

## Internal changes

### TypeSchema update

TypeSchema was updated to v0.13, so now, if you want to use a validation library other than Zod, you also need to install the related [TypeSchema adapter](https://typeschema.com/#coverage).

## Requirements

next-safe-action version 7 requires Next.js 14 and React 18.2.0 or later to work. For `useActionState` hook, the minimum required Next.js version is 15, since previous versions don't support the React's `useStateAction` hook that is used under the hood. The `useActionState` hook is exported from `next-safe-action/stateful-hooks` path.

## What about v6?

You can still keep using version 6 and eventually upgrade to version 7. Note that version 6 is frozen and no new features will be released in the future for it. v6 documentation can still be found [here](https://v6.next-safe-action.dev).

================================================
File: /website/docs/migrations/_category_.json
================================================
{
	"label": "Migrations",
	"position": 7
}


================================================
File: /website/docs/integrations/react-hook-form.md
================================================
---
sidebar_position: 1
description: Learn how to integrate next-safe-action with React Hook Form.
---

# React Hook Form

next-safe-action works great in combo with [React Hook Form](https://react-hook-form.com/).

By using the react-hook-form adapter, you'll get first-class integration and complete customization for advanced use cases. First, install the following dependencies:

```bash npm2yarn
npm i next-safe-action react-hook-form @hookform/resolvers @next-safe-action/adapter-react-hook-form
```

Then, take a look at the project page on GitHub to learn how to use it: [@next-safe-action/adapter-react-hook-form](https://github.com/next-safe-action/adapter-react-hook-form).

================================================
File: /website/docs/integrations/_category_.json
================================================
{
	"label": "Integrations",
	"position": 5
}


================================================
File: /website/docs/getting-started.mdx
================================================
---
sidebar_position: 1
description: Getting started with next-safe-action version 7.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Getting started

:::info Requirements

- Next.js >= 14 (>= 15 for [`useStateAction`](/docs/execute-actions/hooks/usestateaction) hook)
- React >= 18.2.0
- TypeScript >= 5
- A supported validation library: Zod, Valibot, Yup, TypeBox
:::

**next-safe-action** provides a typesafe Server Actions implementation for Next.js App Router applications.

## Installation

The library works with multiple validation libraries, at this time:
- Zod
- Valibot
- Yup
- TypeBox

Choose your preferred one in the tabs below to get the correct instructions.

<Tabs groupId="validation-libraries">
<TabItem value="zod" label="Zod" default>
```bash npm2yarn
npm i next-safe-action zod
```
</TabItem>
<TabItem value="valibot" label="Valibot">
```bash npm2yarn
npm i next-safe-action valibot
```
</TabItem>
<TabItem value="yup" label="Yup">
```bash npm2yarn
npm i next-safe-action yup
```
</TabItem>
<TabItem value="typebox" label="TypeBox">
```bash npm2yarn
npm i next-safe-action @sinclair/typebox
```
</TabItem>
</Tabs>


## Usage

### 1. Instantiate a new client

You can create a new client with the following code:

<Tabs groupId="validation-libraries">
<TabItem value="zod" label="Zod" default>
```typescript title="src/lib/safe-action.ts"
import { createSafeActionClient } from "next-safe-action";

export const actionClient = createSafeActionClient();
```

When using Zod, you don't need to specify a `validationAdapter`, because it's the default validation library for next-safe-action.
</TabItem>
<TabItem value="valibot" label="Valibot">
```typescript title="src/lib/safe-action.ts"
import { createSafeActionClient } from "next-safe-action";
import { valibotAdapter } from "next-safe-action/adapters/valibot";

export const actionClient = createSafeActionClient({
  validationAdapter: valibotAdapter(),
});
```
</TabItem>
<TabItem value="yup" label="Yup">
```typescript title="src/lib/safe-action.ts"
import { createSafeActionClient } from "next-safe-action";
import { yupAdapter } from "next-safe-action/adapters/yup";

export const actionClient = createSafeActionClient({
  validationAdapter: yupAdapter(),
});
```
</TabItem>
<TabItem value="typebox" label="TypeBox">
```typescript title="src/lib/safe-action.ts"
import { createSafeActionClient } from "next-safe-action";
import { typeboxAdapter } from "next-safe-action/adapters/typebox";

export const actionClient = createSafeActionClient({
  validationAdapter: typeboxAdapter(),
});
```
</TabItem>
</Tabs>


This is a basic client, without any options or middleware functions. If you want to explore the full set of options, check out the [create the client](/docs/define-actions/create-the-client) section.

### 2. Define a new action

This is how a safe action is created. Providing a validation input schema to the function via [`schema()`](/docs/define-actions/instance-methods#schema), we're sure that data that comes in is type safe and validated.
The [`action()`](/docs/define-actions/instance-methods#action--stateaction) method lets you define what happens on the server when the action is called from client, via an async function that receives the parsed input and context as arguments. In short, this is your _server code_. **It never runs on the client**:

<Tabs groupId="validation-libraries">
<TabItem value="zod" label="Zod" default>
```typescript title="src/app/login-action.ts"
"use server"; // don't forget to add this!

import { z } from "zod";
import { actionClient } from "@/lib/safe-action";

// This schema is used to validate input from client.
const schema = z.object({
  username: z.string().min(3).max(10),
  password: z.string().min(8).max(100),
});

export const loginUser = actionClient
  .schema(schema)
  .action(async ({ parsedInput: { username, password } }) => {
    if (username === "johndoe" && password === "123456") {
      return {
        success: "Successfully logged in",
      };
    }

    return { failure: "Incorrect credentials" };
  });
```
</TabItem>
<TabItem value="valibot" label="Valibot">
```typescript title="src/app/login-action.ts"
"use server"; // don't forget to add this!

import * as v from "valibot";
import { actionClient } from "@/lib/safe-action";

// This schema is used to validate input from client.
const schema = v.object({
  username: v.pipe(v.string(), v.minLength(3), v.maxLength(10)),
  password: v.pipe(v.string(), v.minLength(8), v.maxLength(100)),
});

export const loginUser = actionClient
  .schema(schema)
  .action(async ({ parsedInput: { username, password } }) => {
    if (username === "johndoe" && password === "123456") {
      return {
        success: "Successfully logged in",
      };
    }

    return { failure: "Incorrect credentials" };
  });
```
</TabItem>
<TabItem value="yup" label="Yup">
```typescript title="src/app/login-action.ts"
"use server"; // don't forget to add this!

import * as y from "yup";
import { actionClient } from "@/lib/safe-action";

// This schema is used to validate input from client.
const schema = y.object({
  username: y.string().min(3).max(10).required(),
  password: y.string().min(8).max(100).required(),
});

export const loginUser = actionClient
  .schema(schema)
  .action(async ({ parsedInput: { username, password } }) => {
    if (username === "johndoe" && password === "123456") {
      return {
        success: "Successfully logged in",
      };
    }

    return { failure: "Incorrect credentials" };
  });
```
</TabItem>
<TabItem value="typebox" label="TypeBox">
```typescript title="src/app/login-action.ts"
"use server"; // don't forget to add this!

import { Type } from "@sinclair/typebox";
import { actionClient } from "@/lib/safe-action";

// This schema is used to validate input from client.
const schema = Type.Object({
  username: Type.String({ minLength: 3, maxLength: 10 }),
  password: Type.String({ minLength: 8, maxLength: 100 }),
});

export const loginUser = actionClient
  .schema(schema)
  .action(async ({ parsedInput: { username, password } }) => {
    if (username === "johndoe" && password === "123456") {
      return {
        success: "Successfully logged in",
      };
    }

    return { failure: "Incorrect credentials" };
  });
```
</TabItem>
</Tabs>

`action` returns a function that can be called from the client.

### 3. Import and execute the action

In this example, we're **directly** calling the Server Action from a Client Component:

```tsx title="src/app/login.tsx"
"use client"; // this is a Client Component

import { loginUser } from "./login-action";

export default function Login() {
  return (
    <button
      onClick={async () => {
        // Typesafe action called from client.
        // highlight-start
        const res = await loginUser({
          username: "johndoe",
          password: "123456",
        });
        // highlight-end

        // Result keys.
        res?.data;
        res?.validationErrors;
        res?.bindArgsValidationErrors;
        res?.serverError;
      }}>
      Log in
    </button>
  );
}
```

You also can execute Server Actions with hooks, which are a more powerful way to handle mutations. For more information about these, check out the [`useAction`](/docs/execute-actions/hooks/useaction), [`useOptimisticAction`](/docs/execute-actions/hooks/useoptimisticaction) and [`useStateAction`](/docs/execute-actions/hooks/usestateaction) hooks sections.

================================================
File: /website/docs/types/_category_.json
================================================
{
	"label": "Types",
	"position": 6
}


================================================
File: /website/docs/types/infer-types.md
================================================
---
sidebar_position: 1
description: Learn how to infer types with next-safe-action.
---

# Infer types

next-safe-action, since version 7.6.4, exports utility types for type inference. Here's a guide on how to use them.

Suppose we have declared this safe action client:

```typescript title="src/lib/safe-action.ts"
import { z } from "zod";
import { createSafeActionClient, createMiddleware } from "next-safe-action";
import { getSessionData } from "@/services/auth"

// Here we declare a standalone auth middleware.
export const authMiddleware = createMiddleware<{
  ctx: { sessionToken: string };
  metadata: { actionName: string };
}>().define(async ({ ctx, next }) => {
  const { sessionId, userId } = await getSessionData(ctx.sessionToken);

  return next({
    ctx: {
      sessionId,
      userId,
    },
  });
});

// Here we declare the safe action client.
export const actionClient = createSafeActionClient({
  defineMetadataSchema: () => {
    return z.object({
      actionName: z.string(),
    });
  },
  handleServerError: (e) => {
    console.error("Action error:", e.message);
    return {
      errorMessage: e.message,
    };
  },
})
  .use(async ({ next }) => {
    return next({
      ctx: {
        sessionToken: "someToken",
      },
    });
  })
  .use(authMiddleware);
```

And then this action function:

```typescript title="src/app/test-action.ts"
"use server";

import { z } from "zod";
import { actionClient } from "@/lib/safe-action";

const testActionSchema = z.object({
  username: z.string(),
});

const testActionBindArgsSchemas: [email: z.ZodString, age: z.ZodNumber] = [z.string(), z.number()];

export const testAction = actionClient
  .use(authMiddleware)
  .schema(testActionSchema)
  .bindArgsSchemas(testActionBindArgsSchemas)
  .action(async () => {
    return {
      successful: true,
    };
  });
```

We'll use these exported functions in the following examples.

## `/`

The library exports several utility types from the root path that help you infer types of a safe action client, a middleware function or a safe action function.

Here's the list of utility types exported from `next-safe-action` path:
- `InferSafeActionFnInput`: infer input types of a safe action function
- `InferSafeActionFnResult`: infer result type of a safe action function
- `InferMiddlewareFnNextCtx`: infer the type of context returned by a middleware function using the `next` function
- `InferCtx`: infer the type of context of a safe action client, or the context passed to a middleware function 
- `InferMetadata`: infer the type of metadata of a safe action client or middleware function
- `InferServerError`: infer the type of the `serverError` of a safe action function, middleware function or safe action function

### Example

```typescript
import type {
  InferCtx,
  InferMetadata,
  InferMiddlewareFnNextCtx,
  InferSafeActionFnInput,
  InferSafeActionFnResult,
  InferServerError,
} from "next-safe-action";
import type { actionClient, authMiddleware } from "@/lib/safe-action";
import type { testAction } from "@/app/test-action";

// Use `InferSafeActionFnInput` to infer the input types of a safe action function.
// highlight-next-line
type inferredTestActionInput = InferSafeActionFnInput<typeof testAction>;
/*
{
  clientInput: {
    username: string;
  };
  bindArgsClientInputs: [email: string, age: number];
  parsedInput: {
    username: string;
  };
  bindArgsParsedInputs: [email: string, age: number];
}
*/

// Use `InferSafeActionFnResult` to infer the result type of a safe action function.
// highlight-next-line
type inferredTestActionResult = InferSafeActionFnResult<typeof testAction>;
/*
{
  data?: {
    successful: boolean;
  } | undefined;
  serverError?: string | undefined;
  validationErrors?: {
    _errors?: string[];
    username?: {
      _errors?: string[];
    } | undefined;
  } | undefined;
  bindArgsValidationErrors?: [email: { _errors?: string[] }, age: { _errors?: string[] }] | undefined;
}
*/

// Use `InferMiddlewareFnNextCtx` to infer the type of the context returned by a middleware function using
// the `next` function.
// highlight-next-line
type inferredAuthMiddlewareNextCtx = InferMiddlewareFnNextCtx<typeof authMiddleware>;
/*
{
  sessionId: string;
  userId: string;
}
*/

// Use `InferCtx` to infer the type of the context of a safe action client, or the context passed to a
// middleware function. Here's an example with a safe action client:
// highlight-next-line
type inferredSafeActionClientCtx = InferCtx<typeof actionClient>;
/*
{
  sessionToken: string;
} & {
  sessionId: string;
  userId: string;
}
*/

// Use `InferMetadata` to infer the type of the metadata of a safe action client or middleware function.
// Here's an example with a middleware function:
// highlight-next-line
type inferredMiddlewareMetadata = InferMetadata<typeof authMiddleware>;
/*
{
  actionName: string;
}
*/

// Use `InferServerError` to infer the type of the `serverError` of a safe action client, middleware function,
// or safe action function. Here's an example with a safe action:
// highlight-next-line
type inferredServerError = InferServerError<typeof testAction>;
/*
{
  errorMessage: string;
}
*/
```

## `/hooks`

The library also exports three types from the `/hooks` path that help you infer types when using `useAction`, `useOptimisticAction` and `useStateAction` hooks.

Here's a list of utility types exported from `next-safe-action/hooks`:

- `InferUseActionHookReturn`: infers the return type of the `useAction` hook - only works with actions defined using the [`action`](/docs/define-actions/instance-methods#action--stateaction) method
- `InferUseOptimisticActionHookReturn`: infers the return type of the `useOptimisticAction` hook - only works with stateless actions defined using the [`action`](/docs/define-actions/instance-methods#action--stateaction) method
- `InferUseStateActionHookReturn`: infers the return type of the `useStateAction` hook - only works with stateful actions defined using the [`stateAction`](/docs/define-actions/instance-methods#action--stateaction) method

### Example

```typescript
import type { testAction } from "@/app/test-action";

// Use `InferUseActionHookReturn` to infer the return type of the `useAction` hook with a provided
// safe action function.
// highlight-next-line
type inferredTestActionHookReturn = InferUseActionHookReturn<typeof testAction>;
/*
{
  execute: (input: { username: string }) => void;
  executeAsync: (input: { username: string }) => Promise<SafeActionResult>;
  input: { username: string };
  result: SafeActionResult;
  reset: () => void;
  status: HookActionStatus;
} & HookShorthandStatus
*/

// Use `InferUseActionHookReturn` to infer the return type of the `useOptimisticAction` hook with a provided
// safe action function. You can pass the server state as the second generic parameter, which defaults
// to `any`.
// highlight-start
type inferredTestActionOptimisticHookReturn = InferUseOptimisticActionHookReturn<
  typeof testAction,
  { myServerState: { foo: string } }
>;
// highlight-end
/*
{
  execute: (input: { username: string }) => void;
  executeAsync: (input: { username: string }) => Promise<SafeActionResult>;
  input: { username: string };
  result: SafeActionResult;
  reset: () => void;
  status: HookActionStatus;
  optimisticState: { myServerState: { foo: string } };
} & HookShorthandStatus
*/

// Use `InferUseStateActionHookReturn` to infer the return type of the `useStateAction` hook with a
// provided stateful safe action. In this case, by providing the type of `testAction` as the
// generic parameter will, the resulting type will be `never`, because `testAction` is not defined
// using `stateAction()` method. Supposing that we change the definition of the function to be stateful,
// the resulting type will be:
// highlight-next-line
type inferredTestActionStateHookReturn = InferUseStateActionHookReturn<typeof testAction>;
/*
{
  execute: (input: { username: string }) => void;
  input: { username: string };
  result: SafeActionResult;
  status: HookActionStatus;
} & HookShorthandStatus
*/
```

================================================
File: /website/sidebars.js
================================================
/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.
 */

// @ts-check

/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
const sidebars = {
	// By default, Docusaurus generates a sidebar from the docs folder structure
	docsSidebar: [{ type: "autogenerated", dirName: "." }],

	// But you can create a sidebar manually
	/*
  tutorialSidebar: [
    'intro',
    'hello',
    {
      type: 'category',
      label: 'Tutorial',
      items: ['tutorial-basics/create-a-document'],
    },
  ],
   */
};

module.exports = sidebars;


================================================
File: /website/.gitignore
================================================
# Dependencies
/node_modules

# Production
/build

# Generated files
.docusaurus
.cache-loader

# Misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*


================================================
File: /website/postcss.config.js
================================================
// postcss.config.js
module.exports = {
	plugins: {
		"postcss-import": {},
		"tailwindcss/nesting": "postcss-nested",
		"tailwindcss": {},
		"autoprefixer": {},
	},
};


================================================
File: /website/vercel.json
================================================
{
	"redirects": [
		{
			"source": "/docs/safe-action-client/:path",
			"destination": "/docs/define-actions/:path"
		},
		{
			"source": "/docs/execution/:path",
			"destination": "/docs/execute-actions/:path"
		}
	]
}


================================================
File: /website/package.json
================================================
{
	"name": "website",
	"version": "0.0.0",
	"private": true,
	"scripts": {
		"docusaurus": "docusaurus",
		"start": "docusaurus start",
		"build": "docusaurus build",
		"swizzle": "docusaurus swizzle",
		"deploy": "docusaurus deploy",
		"clear": "docusaurus clear",
		"serve": "docusaurus serve",
		"write-translations": "docusaurus write-translations",
		"write-heading-ids": "docusaurus write-heading-ids",
		"typecheck": "tsc"
	},
	"dependencies": {
		"@docusaurus/core": "3.6.3",
		"@docusaurus/preset-classic": "3.6.3",
		"@docusaurus/remark-plugin-npm2yarn": "^3.6.3",
		"@mdx-js/react": "^3.1.0",
		"acorn": "8.14.0",
		"clsx": "^2.1.1",
		"lucide-react": "^0.468.0",
		"prism-react-renderer": "^2.4.0",
		"react": "^18",
		"react-dom": "^18"
	},
	"devDependencies": {
		"@docusaurus/module-type-aliases": "3.6.3",
		"@docusaurus/tsconfig": "^3.6.3",
		"@docusaurus/types": "^3.6.3",
		"autoprefixer": "^10.4.20",
		"postcss": "^8.4.49",
		"postcss-nested": "^7.0.2",
		"tailwindcss": "^3.4.16",
		"tailwindcss-bg-patterns": "^0.3.0",
		"typescript": "^5.7.2"
	},
	"browserslist": {
		"production": [
			">0.5%",
			"not dead",
			"not op_mini all"
		],
		"development": [
			"last 1 chrome version",
			"last 1 firefox version",
			"last 1 safari version"
		]
	},
	"engines": {
		"node": ">=18.0"
	}
}


================================================
File: /website/babel.config.js
================================================
module.exports = {
	presets: [require.resolve("@docusaurus/core/lib/babel/preset")],
};


================================================
File: /website/tsconfig.json
================================================
{
	// This file is not used in compilation. It is here just for a nice editor experience.
	"extends": "@docusaurus/tsconfig",
	"compilerOptions": {
		"baseUrl": "."
	}
}


================================================
File: /website/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@docusaurus/core':
        specifier: 3.6.3
        version: 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/preset-classic':
        specifier: 3.6.3
        version: 3.6.3(@algolia/client-search@4.23.3)(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(@types/react@18.2.79)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.13.0)(typescript@5.7.2)
      '@docusaurus/remark-plugin-npm2yarn':
        specifier: ^3.6.3
        version: 3.6.3
      '@mdx-js/react':
        specifier: ^3.1.0
        version: 3.1.0(@types/react@18.2.79)(react@18.3.1)
      acorn:
        specifier: 8.14.0
        version: 8.14.0
      clsx:
        specifier: ^2.1.1
        version: 2.1.1
      lucide-react:
        specifier: ^0.468.0
        version: 0.468.0(react@18.3.1)
      prism-react-renderer:
        specifier: ^2.4.0
        version: 2.4.0(react@18.3.1)
      react:
        specifier: ^18
        version: 18.3.1
      react-dom:
        specifier: ^18
        version: 18.3.1(react@18.3.1)
    devDependencies:
      '@docusaurus/module-type-aliases':
        specifier: 3.6.3
        version: 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/tsconfig':
        specifier: ^3.6.3
        version: 3.6.3
      '@docusaurus/types':
        specifier: ^3.6.3
        version: 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      autoprefixer:
        specifier: ^10.4.20
        version: 10.4.20(postcss@8.4.49)
      postcss:
        specifier: ^8.4.49
        version: 8.4.49
      postcss-nested:
        specifier: ^7.0.2
        version: 7.0.2(postcss@8.4.49)
      tailwindcss:
        specifier: ^3.4.16
        version: 3.4.16
      tailwindcss-bg-patterns:
        specifier: ^0.3.0
        version: 0.3.0(tailwindcss@3.4.16)
      typescript:
        specifier: ^5.7.2
        version: 5.7.2

packages:

  '@algolia/autocomplete-core@1.9.3':
    resolution: {integrity: sha512-009HdfugtGCdC4JdXUbVJClA0q0zh24yyePn+KUGk3rP7j8FEe/m5Yo/z65gn6nP/cM39PxpzqKrL7A6fP6PPw==}

  '@algolia/autocomplete-plugin-algolia-insights@1.9.3':
    resolution: {integrity: sha512-a/yTUkcO/Vyy+JffmAnTWbr4/90cLzw+CC3bRbhnULr/EM0fGNvM13oQQ14f2moLMcVDyAx/leczLlAOovhSZg==}
    peerDependencies:
      search-insights: '>= 1 < 3'

  '@algolia/autocomplete-preset-algolia@1.9.3':
    resolution: {integrity: sha512-d4qlt6YmrLMYy95n5TB52wtNDr6EgAIPH81dvvvW8UmuWRgxEtY0NJiPwl/h95JtG2vmRM804M0DSwMCNZlzRA==}
    peerDependencies:
      '@algolia/client-search': '>= 4.9.1 < 6'
      algoliasearch: '>= 4.9.1 < 6'

  '@algolia/autocomplete-shared@1.9.3':
    resolution: {integrity: sha512-Wnm9E4Ye6Rl6sTTqjoymD+l8DjSTHsHboVRYrKgEt8Q7UHm9nYbqhN/i0fhUYA3OAEH7WA8x3jfpnmJm3rKvaQ==}
    peerDependencies:
      '@algolia/client-search': '>= 4.9.1 < 6'
      algoliasearch: '>= 4.9.1 < 6'

  '@algolia/cache-browser-local-storage@4.23.3':
    resolution: {integrity: sha512-vRHXYCpPlTDE7i6UOy2xE03zHF2C8MEFjPN2v7fRbqVpcOvAUQK81x3Kc21xyb5aSIpYCjWCZbYZuz8Glyzyyg==}

  '@algolia/cache-common@4.23.3':
    resolution: {integrity: sha512-h9XcNI6lxYStaw32pHpB1TMm0RuxphF+Ik4o7tcQiodEdpKK+wKufY6QXtba7t3k8eseirEMVB83uFFF3Nu54A==}

  '@algolia/cache-in-memory@4.23.3':
    resolution: {integrity: sha512-yvpbuUXg/+0rbcagxNT7un0eo3czx2Uf0y4eiR4z4SD7SiptwYTpbuS0IHxcLHG3lq22ukx1T6Kjtk/rT+mqNg==}

  '@algolia/client-account@4.23.3':
    resolution: {integrity: sha512-hpa6S5d7iQmretHHF40QGq6hz0anWEHGlULcTIT9tbUssWUriN9AUXIFQ8Ei4w9azD0hc1rUok9/DeQQobhQMA==}

  '@algolia/client-analytics@4.23.3':
    resolution: {integrity: sha512-LBsEARGS9cj8VkTAVEZphjxTjMVCci+zIIiRhpFun9jGDUlS1XmhCW7CTrnaWeIuCQS/2iPyRqSy1nXPjcBLRA==}

  '@algolia/client-common@4.23.3':
    resolution: {integrity: sha512-l6EiPxdAlg8CYhroqS5ybfIczsGUIAC47slLPOMDeKSVXYG1n0qGiz4RjAHLw2aD0xzh2EXZ7aRguPfz7UKDKw==}

  '@algolia/client-personalization@4.23.3':
    resolution: {integrity: sha512-3E3yF3Ocr1tB/xOZiuC3doHQBQ2zu2MPTYZ0d4lpfWads2WTKG7ZzmGnsHmm63RflvDeLK/UVx7j2b3QuwKQ2g==}

  '@algolia/client-search@4.23.3':
    resolution: {integrity: sha512-P4VAKFHqU0wx9O+q29Q8YVuaowaZ5EM77rxfmGnkHUJggh28useXQdopokgwMeYw2XUht49WX5RcTQ40rZIabw==}

  '@algolia/events@4.0.1':
    resolution: {integrity: sha512-FQzvOCgoFXAbf5Y6mYozw2aj5KCJoA3m4heImceldzPSMbdyS4atVjJzXKMsfX3wnZTFYwkkt8/z8UesLHlSBQ==}

  '@algolia/logger-common@4.23.3':
    resolution: {integrity: sha512-y9kBtmJwiZ9ZZ+1Ek66P0M68mHQzKRxkW5kAAXYN/rdzgDN0d2COsViEFufxJ0pb45K4FRcfC7+33YB4BLrZ+g==}

  '@algolia/logger-console@4.23.3':
    resolution: {integrity: sha512-8xoiseoWDKuCVnWP8jHthgaeobDLolh00KJAdMe9XPrWPuf1by732jSpgy2BlsLTaT9m32pHI8CRfrOqQzHv3A==}

  '@algolia/recommend@4.23.3':
    resolution: {integrity: sha512-9fK4nXZF0bFkdcLBRDexsnGzVmu4TSYZqxdpgBW2tEyfuSSY54D4qSRkLmNkrrz4YFvdh2GM1gA8vSsnZPR73w==}

  '@algolia/requester-browser-xhr@4.23.3':
    resolution: {integrity: sha512-jDWGIQ96BhXbmONAQsasIpTYWslyjkiGu0Quydjlowe+ciqySpiDUrJHERIRfELE5+wFc7hc1Q5hqjGoV7yghw==}

  '@algolia/requester-common@4.23.3':
    resolution: {integrity: sha512-xloIdr/bedtYEGcXCiF2muajyvRhwop4cMZo+K2qzNht0CMzlRkm8YsDdj5IaBhshqfgmBb3rTg4sL4/PpvLYw==}

  '@algolia/requester-node-http@4.23.3':
    resolution: {integrity: sha512-zgu++8Uj03IWDEJM3fuNl34s746JnZOWn1Uz5taV1dFyJhVM/kTNw9Ik7YJWiUNHJQXcaD8IXD1eCb0nq/aByA==}

  '@algolia/transporter@4.23.3':
    resolution: {integrity: sha512-Wjl5gttqnf/gQKJA+dafnD0Y6Yw97yvfY8R9h0dQltX1GXTgNs1zWgvtWW0tHl1EgMdhAyw189uWiZMnL3QebQ==}

  '@alloc/quick-lru@5.2.0':
    resolution: {integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==}
    engines: {node: '>=10'}

  '@ampproject/remapping@2.3.0':
    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
    engines: {node: '>=6.0.0'}

  '@babel/code-frame@7.26.2':
    resolution: {integrity: sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.26.2':
    resolution: {integrity: sha512-Z0WgzSEa+aUcdiJuCIqgujCshpMWgUpgOxXotrYPSA53hA3qopNaqcJpyr0hVb1FeWdnqFA35/fUtXgBK8srQg==}
    engines: {node: '>=6.9.0'}

  '@babel/core@7.26.0':
    resolution: {integrity: sha512-i1SLeK+DzNnQ3LL/CswPCa/E5u4lh1k6IAEphON8F+cXt0t9euTshDru0q7/IqMa1PMPz5RnHuHscF8/ZJsStg==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.26.2':
    resolution: {integrity: sha512-zevQbhbau95nkoxSq3f/DC/SC+EEOUZd3DYqfSkMhY2/wfSeaHV1Ew4vk8e+x8lja31IbyuUa2uQ3JONqKbysw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-annotate-as-pure@7.25.9':
    resolution: {integrity: sha512-gv7320KBUFJz1RnylIg5WWYPRXKZ884AGkYpgpWW02TH66Dl+HaC1t1CKd0z3R4b6hdYEcmrNZHUmfCP+1u3/g==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-builder-binary-assignment-operator-visitor@7.25.9':
    resolution: {integrity: sha512-C47lC7LIDCnz0h4vai/tpNOI95tCd5ZT3iBt/DBH5lXKHZsyNQv18yf1wIIg2ntiQNgmAvA+DgZ82iW8Qdym8g==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.25.9':
    resolution: {integrity: sha512-j9Db8Suy6yV/VHa4qzrj9yZfZxhLWQdVnRlXxmKLYlhWUVB1sB2G5sxuWYXk/whHD9iW76PmNzxZ4UCnTQTVEQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-create-class-features-plugin@7.25.9':
    resolution: {integrity: sha512-UTZQMvt0d/rSz6KI+qdu7GQze5TIajwTS++GUozlw8VBJDEOAqSXwm1WvmYEZwqdqSGQshRocPDqrt4HBZB3fQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-create-regexp-features-plugin@7.25.9':
    resolution: {integrity: sha512-ORPNZ3h6ZRkOyAa/SaHU+XsLZr0UQzRwuDQ0cczIA17nAzZ+85G5cVkOJIj7QavLZGSe8QXUmNFxSZzjcZF9bw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-define-polyfill-provider@0.6.2':
    resolution: {integrity: sha512-LV76g+C502biUK6AyZ3LK10vDpDyCzZnhZFXkH1L75zHPj68+qc8Zfpx2th+gzwA2MzyK+1g/3EPl62yFnVttQ==}
    peerDependencies:
      '@babel/core': ^7.4.0 || ^8.0.0-0 <8.0.0

  '@babel/helper-member-expression-to-functions@7.25.9':
    resolution: {integrity: sha512-wbfdZ9w5vk0C0oyHqAJbc62+vet5prjj01jjJ8sKn3j9h3MQQlflEdXYvuqRWjHnM12coDEqiC1IRCi0U/EKwQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.25.9':
    resolution: {integrity: sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-transforms@7.26.0':
    resolution: {integrity: sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-optimise-call-expression@7.25.9':
    resolution: {integrity: sha512-FIpuNaz5ow8VyrYcnXQTDRGvV6tTjkNtCK/RYNDXGSLlUD6cBuQTSw43CShGxjvfBTfcUA/r6UhUCbtYqkhcuQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-plugin-utils@7.25.9':
    resolution: {integrity: sha512-kSMlyUVdWe25rEsRGviIgOWnoT/nfABVWlqt9N19/dIPWViAOW2s9wznP5tURbs/IDuNk4gPy3YdYRgH3uxhBw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-remap-async-to-generator@7.25.9':
    resolution: {integrity: sha512-IZtukuUeBbhgOcaW2s06OXTzVNJR0ybm4W5xC1opWFFJMZbwRj5LCk+ByYH7WdZPZTt8KnFwA8pvjN2yqcPlgw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-replace-supers@7.25.9':
    resolution: {integrity: sha512-IiDqTOTBQy0sWyeXyGSC5TBJpGFXBkRynjBeXsvbhQFKj2viwJC76Epz35YLU1fpe/Am6Vppb7W7zM4fPQzLsQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-simple-access@7.25.9':
    resolution: {integrity: sha512-c6WHXuiaRsJTyHYLJV75t9IqsmTbItYfdj99PnzYGQZkYKvan5/2jKJ7gu31J3/BJ/A18grImSPModuyG/Eo0Q==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-skip-transparent-expression-wrappers@7.25.9':
    resolution: {integrity: sha512-K4Du3BFa3gvyhzgPcntrkDgZzQaq6uozzcpGbOO1OEJaI+EJdqWIMTLgFgQf6lrfiDFo5FU+BxKepI9RmZqahA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.25.9':
    resolution: {integrity: sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.25.9':
    resolution: {integrity: sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.25.9':
    resolution: {integrity: sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-wrap-function@7.25.9':
    resolution: {integrity: sha512-ETzz9UTjQSTmw39GboatdymDq4XIQbR8ySgVrylRhPOFpsd+JrKHIuF0de7GCWmem+T4uC5z7EZguod7Wj4A4g==}
    engines: {node: '>=6.9.0'}

  '@babel/helpers@7.26.0':
    resolution: {integrity: sha512-tbhNuIxNcVb21pInl3ZSjksLCvgdZy9KwJ8brv993QtIVKJBBkYXz4q4ZbAv31GdnC+R90np23L5FbEBlthAEw==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.26.2':
    resolution: {integrity: sha512-DWMCZH9WA4Maitz2q21SRKHo9QXZxkDsbNZoVD62gusNtNBBqDg9i7uOhASfTfIGNzW+O+r7+jAlM8dwphcJKQ==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/plugin-bugfix-firefox-class-in-computed-class-key@7.25.9':
    resolution: {integrity: sha512-ZkRyVkThtxQ/J6nv3JFYv1RYY+JT5BvU0y3k5bWrmuG4woXypRa4PXmm9RhOwodRkYFWqC0C0cqcJ4OqR7kW+g==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-bugfix-safari-class-field-initializer-scope@7.25.9':
    resolution: {integrity: sha512-MrGRLZxLD/Zjj0gdU15dfs+HH/OXvnw/U4jJD8vpcP2CJQapPEv1IWwjc/qMg7ItBlPwSv1hRBbb7LeuANdcnw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression@7.25.9':
    resolution: {integrity: sha512-2qUwwfAFpJLZqxd02YW9btUCZHl+RFvdDkNfZwaIJrvB8Tesjsk8pEQkTvGwZXLqXUx/2oyY3ySRhm6HOXuCug==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining@7.25.9':
    resolution: {integrity: sha512-6xWgLZTJXwilVjlnV7ospI3xi+sl8lN8rXXbBD6vYn3UYDlGsag8wrZkKcSI8G6KgqKP7vNFaDgeDnfAABq61g==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.13.0

  '@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly@7.25.9':
    resolution: {integrity: sha512-aLnMXYPnzwwqhYSCyXfKkIkYgJ8zv9RK+roo9DkTXz38ynIhd9XCbN08s3MGvqL2MYGVUGdRQLL/JqBIeJhJBg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-proposal-private-property-in-object@7.21.0-placeholder-for-preset-env.2':
    resolution: {integrity: sha512-SOSkfJDddaM7mak6cPEpswyTRnuRltl429hMraQEglW+OkovnCzsiszTmsrlY//qLFjCpQDFRvjdm2wA5pPm9w==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-dynamic-import@7.8.3':
    resolution: {integrity: sha512-5gdGbFon+PszYzqs83S3E5mpi7/y/8M9eC90MRTZfduQOYW76ig6SOSPNe41IG5LoP3FGBn2N0RjVDSQiS94kQ==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-import-assertions@7.26.0':
    resolution: {integrity: sha512-QCWT5Hh830hK5EQa7XzuqIkQU9tT/whqbDz7kuaZMHFl1inRRg7JnuAEOQ0Ur0QUl0NufCk1msK2BeY79Aj/eg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-import-attributes@7.26.0':
    resolution: {integrity: sha512-e2dttdsJ1ZTpi3B9UYGLw41hifAubg19AtCu/2I/F1QNVclOBr1dYpTdmdyZ84Xiz43BS/tCUkMAZNLv12Pi+A==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-jsx@7.25.9':
    resolution: {integrity: sha512-ld6oezHQMZsZfp6pWtbjaNDF2tiiCYYDqQszHt5VV437lewP9aSi2Of99CK0D0XB21k7FLgnLcmQKyKzynfeAA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-typescript@7.25.9':
    resolution: {integrity: sha512-hjMgRy5hb8uJJjUcdWunWVcoi9bGpJp8p5Ol1229PoN6aytsLwNMgmdftO23wnCLMfVmTwZDWMPNq/D1SY60JQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-unicode-sets-regex@7.18.6':
    resolution: {integrity: sha512-727YkEAPwSIQTv5im8QHz3upqp92JTWhidIC81Tdx4VJYIte/VndKf1qKrfnnhPLiPghStWfvC/iFaMCQu7Nqg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-transform-arrow-functions@7.25.9':
    resolution: {integrity: sha512-6jmooXYIwn9ca5/RylZADJ+EnSxVUS5sjeJ9UPk6RWRzXCmOJCy6dqItPJFpw2cuCangPK4OYr5uhGKcmrm5Qg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-async-generator-functions@7.25.9':
    resolution: {integrity: sha512-RXV6QAzTBbhDMO9fWwOmwwTuYaiPbggWQ9INdZqAYeSHyG7FzQ+nOZaUUjNwKv9pV3aE4WFqFm1Hnbci5tBCAw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-async-to-generator@7.25.9':
    resolution: {integrity: sha512-NT7Ejn7Z/LjUH0Gv5KsBCxh7BH3fbLTV0ptHvpeMvrt3cPThHfJfst9Wrb7S8EvJ7vRTFI7z+VAvFVEQn/m5zQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-block-scoped-functions@7.25.9':
    resolution: {integrity: sha512-toHc9fzab0ZfenFpsyYinOX0J/5dgJVA2fm64xPewu7CoYHWEivIWKxkK2rMi4r3yQqLnVmheMXRdG+k239CgA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-block-scoping@7.25.9':
    resolution: {integrity: sha512-1F05O7AYjymAtqbsFETboN1NvBdcnzMerO+zlMyJBEz6WkMdejvGWw9p05iTSjC85RLlBseHHQpYaM4gzJkBGg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-class-properties@7.25.9':
    resolution: {integrity: sha512-bbMAII8GRSkcd0h0b4X+36GksxuheLFjP65ul9w6C3KgAamI3JqErNgSrosX6ZPj+Mpim5VvEbawXxJCyEUV3Q==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-class-static-block@7.26.0':
    resolution: {integrity: sha512-6J2APTs7BDDm+UMqP1useWqhcRAXo0WIoVj26N7kPFB6S73Lgvyka4KTZYIxtgYXiN5HTyRObA72N2iu628iTQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.12.0

  '@babel/plugin-transform-classes@7.25.9':
    resolution: {integrity: sha512-mD8APIXmseE7oZvZgGABDyM34GUmK45Um2TXiBUt7PnuAxrgoSVf123qUzPxEr/+/BHrRn5NMZCdE2m/1F8DGg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-computed-properties@7.25.9':
    resolution: {integrity: sha512-HnBegGqXZR12xbcTHlJ9HGxw1OniltT26J5YpfruGqtUHlz/xKf/G2ak9e+t0rVqrjXa9WOhvYPz1ERfMj23AA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-destructuring@7.25.9':
    resolution: {integrity: sha512-WkCGb/3ZxXepmMiX101nnGiU+1CAdut8oHyEOHxkKuS1qKpU2SMXE2uSvfz8PBuLd49V6LEsbtyPhWC7fnkgvQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-dotall-regex@7.25.9':
    resolution: {integrity: sha512-t7ZQ7g5trIgSRYhI9pIJtRl64KHotutUJsh4Eze5l7olJv+mRSg4/MmbZ0tv1eeqRbdvo/+trvJD/Oc5DmW2cA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-duplicate-keys@7.25.9':
    resolution: {integrity: sha512-LZxhJ6dvBb/f3x8xwWIuyiAHy56nrRG3PeYTpBkkzkYRRQ6tJLu68lEF5VIqMUZiAV7a8+Tb78nEoMCMcqjXBw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-duplicate-named-capturing-groups-regex@7.25.9':
    resolution: {integrity: sha512-0UfuJS0EsXbRvKnwcLjFtJy/Sxc5J5jhLHnFhy7u4zih97Hz6tJkLU+O+FMMrNZrosUPxDi6sYxJ/EA8jDiAog==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-transform-dynamic-import@7.25.9':
    resolution: {integrity: sha512-GCggjexbmSLaFhqsojeugBpeaRIgWNTcgKVq/0qIteFEqY2A+b9QidYadrWlnbWQUrW5fn+mCvf3tr7OeBFTyg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-exponentiation-operator@7.25.9':
    resolution: {integrity: sha512-KRhdhlVk2nObA5AYa7QMgTMTVJdfHprfpAk4DjZVtllqRg9qarilstTKEhpVjyt+Npi8ThRyiV8176Am3CodPA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-export-namespace-from@7.25.9':
    resolution: {integrity: sha512-2NsEz+CxzJIVOPx2o9UsW1rXLqtChtLoVnwYHHiB04wS5sgn7mrV45fWMBX0Kk+ub9uXytVYfNP2HjbVbCB3Ww==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-for-of@7.25.9':
    resolution: {integrity: sha512-LqHxduHoaGELJl2uhImHwRQudhCM50pT46rIBNvtT/Oql3nqiS3wOwP+5ten7NpYSXrrVLgtZU3DZmPtWZo16A==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-function-name@7.25.9':
    resolution: {integrity: sha512-8lP+Yxjv14Vc5MuWBpJsoUCd3hD6V9DgBon2FVYL4jJgbnVQ9fTgYmonchzZJOVNgzEgbxp4OwAf6xz6M/14XA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-json-strings@7.25.9':
    resolution: {integrity: sha512-xoTMk0WXceiiIvsaquQQUaLLXSW1KJ159KP87VilruQm0LNNGxWzahxSS6T6i4Zg3ezp4vA4zuwiNUR53qmQAw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-literals@7.25.9':
    resolution: {integrity: sha512-9N7+2lFziW8W9pBl2TzaNht3+pgMIRP74zizeCSrtnSKVdUl8mAjjOP2OOVQAfZ881P2cNjDj1uAMEdeD50nuQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-logical-assignment-operators@7.25.9':
    resolution: {integrity: sha512-wI4wRAzGko551Y8eVf6iOY9EouIDTtPb0ByZx+ktDGHwv6bHFimrgJM/2T021txPZ2s4c7bqvHbd+vXG6K948Q==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-member-expression-literals@7.25.9':
    resolution: {integrity: sha512-PYazBVfofCQkkMzh2P6IdIUaCEWni3iYEerAsRWuVd8+jlM1S9S9cz1dF9hIzyoZ8IA3+OwVYIp9v9e+GbgZhA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-modules-amd@7.25.9':
    resolution: {integrity: sha512-g5T11tnI36jVClQlMlt4qKDLlWnG5pP9CSM4GhdRciTNMRgkfpo5cR6b4rGIOYPgRRuFAvwjPQ/Yk+ql4dyhbw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-modules-commonjs@7.25.9':
    resolution: {integrity: sha512-dwh2Ol1jWwL2MgkCzUSOvfmKElqQcuswAZypBSUsScMXvgdT8Ekq5YA6TtqpTVWH+4903NmboMuH1o9i8Rxlyg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-modules-systemjs@7.25.9':
    resolution: {integrity: sha512-hyss7iIlH/zLHaehT+xwiymtPOpsiwIIRlCAOwBB04ta5Tt+lNItADdlXw3jAWZ96VJ2jlhl/c+PNIQPKNfvcA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-modules-umd@7.25.9':
    resolution: {integrity: sha512-bS9MVObUgE7ww36HEfwe6g9WakQ0KF07mQF74uuXdkoziUPfKyu/nIm663kz//e5O1nPInPFx36z7WJmJ4yNEw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-named-capturing-groups-regex@7.25.9':
    resolution: {integrity: sha512-oqB6WHdKTGl3q/ItQhpLSnWWOpjUJLsOCLVyeFgeTktkBSCiurvPOsyt93gibI9CmuKvTUEtWmG5VhZD+5T/KA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-transform-new-target@7.25.9':
    resolution: {integrity: sha512-U/3p8X1yCSoKyUj2eOBIx3FOn6pElFOKvAAGf8HTtItuPyB+ZeOqfn+mvTtg9ZlOAjsPdK3ayQEjqHjU/yLeVQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-nullish-coalescing-operator@7.25.9':
    resolution: {integrity: sha512-ENfftpLZw5EItALAD4WsY/KUWvhUlZndm5GC7G3evUsVeSJB6p0pBeLQUnRnBCBx7zV0RKQjR9kCuwrsIrjWog==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-numeric-separator@7.25.9':
    resolution: {integrity: sha512-TlprrJ1GBZ3r6s96Yq8gEQv82s8/5HnCVHtEJScUj90thHQbwe+E5MLhi2bbNHBEJuzrvltXSru+BUxHDoog7Q==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-object-rest-spread@7.25.9':
    resolution: {integrity: sha512-fSaXafEE9CVHPweLYw4J0emp1t8zYTXyzN3UuG+lylqkvYd7RMrsOQ8TYx5RF231be0vqtFC6jnx3UmpJmKBYg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-object-super@7.25.9':
    resolution: {integrity: sha512-Kj/Gh+Rw2RNLbCK1VAWj2U48yxxqL2x0k10nPtSdRa0O2xnHXalD0s+o1A6a0W43gJ00ANo38jxkQreckOzv5A==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-optional-catch-binding@7.25.9':
    resolution: {integrity: sha512-qM/6m6hQZzDcZF3onzIhZeDHDO43bkNNlOX0i8n3lR6zLbu0GN2d8qfM/IERJZYauhAHSLHy39NF0Ctdvcid7g==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-optional-chaining@7.25.9':
    resolution: {integrity: sha512-6AvV0FsLULbpnXeBjrY4dmWF8F7gf8QnvTEoO/wX/5xm/xE1Xo8oPuD3MPS+KS9f9XBEAWN7X1aWr4z9HdOr7A==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-parameters@7.25.9':
    resolution: {integrity: sha512-wzz6MKwpnshBAiRmn4jR8LYz/g8Ksg0o80XmwZDlordjwEk9SxBzTWC7F5ef1jhbrbOW2DJ5J6ayRukrJmnr0g==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-private-methods@7.25.9':
    resolution: {integrity: sha512-D/JUozNpQLAPUVusvqMxyvjzllRaF8/nSrP1s2YGQT/W4LHK4xxsMcHjhOGTS01mp9Hda8nswb+FblLdJornQw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-private-property-in-object@7.25.9':
    resolution: {integrity: sha512-Evf3kcMqzXA3xfYJmZ9Pg1OvKdtqsDMSWBDzZOPLvHiTt36E75jLDQo5w1gtRU95Q4E5PDttrTf25Fw8d/uWLw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-property-literals@7.25.9':
    resolution: {integrity: sha512-IvIUeV5KrS/VPavfSM/Iu+RE6llrHrYIKY1yfCzyO/lMXHQ+p7uGhonmGVisv6tSBSVgWzMBohTcvkC9vQcQFA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-constant-elements@7.24.1':
    resolution: {integrity: sha512-QXp1U9x0R7tkiGB0FOk8o74jhnap0FlZ5gNkRIWdG3eP+SvMFg118e1zaWewDzgABb106QSKpVsD3Wgd8t6ifA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-display-name@7.25.9':
    resolution: {integrity: sha512-KJfMlYIUxQB1CJfO3e0+h0ZHWOTLCPP115Awhaz8U0Zpq36Gl/cXlpoyMRnUWlhNUBAzldnCiAZNvCDj7CrKxQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-jsx-development@7.25.9':
    resolution: {integrity: sha512-9mj6rm7XVYs4mdLIpbZnHOYdpW42uoiBCTVowg7sP1thUOiANgMb4UtpRivR0pp5iL+ocvUv7X4mZgFRpJEzGw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-jsx@7.25.9':
    resolution: {integrity: sha512-s5XwpQYCqGerXl+Pu6VDL3x0j2d82eiV77UJ8a2mDHAW7j9SWRqQ2y1fNo1Z74CdcYipl5Z41zvjj4Nfzq36rw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-react-pure-annotations@7.25.9':
    resolution: {integrity: sha512-KQ/Takk3T8Qzj5TppkS1be588lkbTp5uj7w6a0LeQaTMSckU/wK0oJ/pih+T690tkgI5jfmg2TqDJvd41Sj1Cg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-regenerator@7.25.9':
    resolution: {integrity: sha512-vwDcDNsgMPDGP0nMqzahDWE5/MLcX8sv96+wfX7as7LoF/kr97Bo/7fI00lXY4wUXYfVmwIIyG80fGZ1uvt2qg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-regexp-modifiers@7.26.0':
    resolution: {integrity: sha512-vN6saax7lrA2yA/Pak3sCxuD6F5InBjn9IcrIKQPjpsLvuHYLVroTxjdlVRHjjBWxKOqIwpTXDkOssYT4BFdRw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/plugin-transform-reserved-words@7.25.9':
    resolution: {integrity: sha512-7DL7DKYjn5Su++4RXu8puKZm2XBPHyjWLUidaPEkCUBbE7IPcsrkRHggAOOKydH1dASWdcUBxrkOGNxUv5P3Jg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-runtime@7.25.9':
    resolution: {integrity: sha512-nZp7GlEl+yULJrClz0SwHPqir3lc0zsPrDHQUcxGspSL7AKrexNSEfTbfqnDNJUO13bgKyfuOLMF8Xqtu8j3YQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-shorthand-properties@7.25.9':
    resolution: {integrity: sha512-MUv6t0FhO5qHnS/W8XCbHmiRWOphNufpE1IVxhK5kuN3Td9FT1x4rx4K42s3RYdMXCXpfWkGSbCSd0Z64xA7Ng==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-spread@7.25.9':
    resolution: {integrity: sha512-oNknIB0TbURU5pqJFVbOOFspVlrpVwo2H1+HUIsVDvp5VauGGDP1ZEvO8Nn5xyMEs3dakajOxlmkNW7kNgSm6A==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-sticky-regex@7.25.9':
    resolution: {integrity: sha512-WqBUSgeVwucYDP9U/xNRQam7xV8W5Zf+6Eo7T2SRVUFlhRiMNFdFz58u0KZmCVVqs2i7SHgpRnAhzRNmKfi2uA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-template-literals@7.25.9':
    resolution: {integrity: sha512-o97AE4syN71M/lxrCtQByzphAdlYluKPDBzDVzMmfCobUjjhAryZV0AIpRPrxN0eAkxXO6ZLEScmt+PNhj2OTw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-typeof-symbol@7.25.9':
    resolution: {integrity: sha512-v61XqUMiueJROUv66BVIOi0Fv/CUuZuZMl5NkRoCVxLAnMexZ0A3kMe7vvZ0nulxMuMp0Mk6S5hNh48yki08ZA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-typescript@7.25.9':
    resolution: {integrity: sha512-7PbZQZP50tzv2KGGnhh82GSyMB01yKY9scIjf1a+GfZCtInOWqUH5+1EBU4t9fyR5Oykkkc9vFTs4OHrhHXljQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-unicode-escapes@7.25.9':
    resolution: {integrity: sha512-s5EDrE6bW97LtxOcGj1Khcx5AaXwiMmi4toFWRDP9/y0Woo6pXC+iyPu/KuhKtfSrNFd7jJB+/fkOtZy6aIC6Q==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-unicode-property-regex@7.25.9':
    resolution: {integrity: sha512-Jt2d8Ga+QwRluxRQ307Vlxa6dMrYEMZCgGxoPR8V52rxPyldHu3hdlHspxaqYmE7oID5+kB+UKUB/eWS+DkkWg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-unicode-regex@7.25.9':
    resolution: {integrity: sha512-yoxstj7Rg9dlNn9UQxzk4fcNivwv4nUYz7fYXBaKxvw/lnmPuOm/ikoELygbYq68Bls3D/D+NBPHiLwZdZZ4HA==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-transform-unicode-sets-regex@7.25.9':
    resolution: {integrity: sha512-8BYqO3GeVNHtx69fdPshN3fnzUNLrWdHhk/icSwigksJGczKSizZ+Z6SBCxTs723Fr5VSNorTIK7a+R2tISvwQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/preset-env@7.26.0':
    resolution: {integrity: sha512-H84Fxq0CQJNdPFT2DrfnylZ3cf5K43rGfWK4LJGPpjKHiZlk0/RzwEus3PDDZZg+/Er7lCA03MVacueUuXdzfw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/preset-modules@0.1.6-no-external-plugins':
    resolution: {integrity: sha512-HrcgcIESLm9aIR842yhJ5RWan/gebQUJ6E/E5+rf0y9o6oj7w0Br+sWuL6kEQ/o/AdfvR1Je9jG18/gnpwjEyA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0 || ^8.0.0-0 <8.0.0

  '@babel/preset-react@7.25.9':
    resolution: {integrity: sha512-D3to0uSPiWE7rBrdIICCd0tJSIGpLaaGptna2+w7Pft5xMqLpA1sz99DK5TZ1TjGbdQ/VI1eCSZ06dv3lT4JOw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/preset-typescript@7.26.0':
    resolution: {integrity: sha512-NMk1IGZ5I/oHhoXEElcm+xUnL/szL6xflkFZmoEU9xj1qSJXpiS7rsspYo92B4DRCDvZn2erT5LdsCeXAKNCkg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/runtime-corejs3@7.26.0':
    resolution: {integrity: sha512-YXHu5lN8kJCb1LOb9PgV6pvak43X2h4HvRApcN5SdWeaItQOzfn1hgP6jasD6KWQyJDBxrVmA9o9OivlnNJK/w==}
    engines: {node: '>=6.9.0'}

  '@babel/runtime@7.26.0':
    resolution: {integrity: sha512-FDSOghenHTiToteC/QRlv2q3DhPZ/oOXTBoirfWNx1Cx3TMVcGWQtMMmQcSvb/JjpNeGzx8Pq/b4fKEJuWm1sw==}
    engines: {node: '>=6.9.0'}

  '@babel/template@7.25.9':
    resolution: {integrity: sha512-9DGttpmPvIxBb/2uwpVo3dqJ+O6RooAFOS+lB+xDqoE2PVCE8nfoHMdZLpfCQRLwvohzXISPZcgxt80xLfsuwg==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.25.9':
    resolution: {integrity: sha512-ZCuvfwOwlz/bawvAuvcj8rrithP2/N55Tzz342AkTvq4qaWbGfmCk/tKhNaV2cthijKrPAA8SRJV5WWe7IBMJw==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.26.0':
    resolution: {integrity: sha512-Z/yiTPj+lDVnF7lWeKCIJzaIkI0vYO87dMpZ4bg4TDrFe4XXLFWL1TbXU27gBP3QccxV9mZICCrnjnYlJjXHOA==}
    engines: {node: '>=6.9.0'}

  '@colors/colors@1.5.0':
    resolution: {integrity: sha512-ooWCrlZP11i8GImSjTHYHLkvFDP48nS4+204nGb1RiX/WXYHmJA2III9/e2DWVabCESdW7hBAEzHRqUn9OUVvQ==}
    engines: {node: '>=0.1.90'}

  '@csstools/cascade-layer-name-parser@2.0.4':
    resolution: {integrity: sha512-7DFHlPuIxviKYZrOiwVU/PiHLm3lLUR23OMuEEtfEOQTOp9hzQ2JjdY6X5H18RVuUPJqSCI+qNnD5iOLMVE0bA==}
    engines: {node: '>=18'}
    peerDependencies:
      '@csstools/css-parser-algorithms': ^3.0.4
      '@csstools/css-tokenizer': ^3.0.3

  '@csstools/color-helpers@5.0.1':
    resolution: {integrity: sha512-MKtmkA0BX87PKaO1NFRTFH+UnkgnmySQOvNxJubsadusqPEC2aJ9MOQiMceZJJ6oitUl/i0L6u0M1IrmAOmgBA==}
    engines: {node: '>=18'}

  '@csstools/css-calc@2.1.0':
    resolution: {integrity: sha512-X69PmFOrjTZfN5ijxtI8hZ9kRADFSLrmmQ6hgDJ272Il049WGKpDY64KhrFm/7rbWve0z81QepawzjkKlqkNGw==}
    engines: {node: '>=18'}
    peerDependencies:
      '@csstools/css-parser-algorithms': ^3.0.4
      '@csstools/css-tokenizer': ^3.0.3

  '@csstools/css-color-parser@3.0.6':
    resolution: {integrity: sha512-S/IjXqTHdpI4EtzGoNCHfqraXF37x12ZZHA1Lk7zoT5pm2lMjFuqhX/89L7dqX4CcMacKK+6ZCs5TmEGb/+wKw==}
    engines: {node: '>=18'}
    peerDependencies:
      '@csstools/css-parser-algorithms': ^3.0.4
      '@csstools/css-tokenizer': ^3.0.3

  '@csstools/css-parser-algorithms@3.0.4':
    resolution: {integrity: sha512-Up7rBoV77rv29d3uKHUIVubz1BTcgyUK72IvCQAbfbMv584xHcGKCKbWh7i8hPrRJ7qU4Y8IO3IY9m+iTB7P3A==}
    engines: {node: '>=18'}
    peerDependencies:
      '@csstools/css-tokenizer': ^3.0.3

  '@csstools/css-tokenizer@3.0.3':
    resolution: {integrity: sha512-UJnjoFsmxfKUdNYdWgOB0mWUypuLvAfQPH1+pyvRJs6euowbFkFC6P13w1l8mJyi3vxYMxc9kld5jZEGRQs6bw==}
    engines: {node: '>=18'}

  '@csstools/media-query-list-parser@4.0.2':
    resolution: {integrity: sha512-EUos465uvVvMJehckATTlNqGj4UJWkTmdWuDMjqvSUkjGpmOyFZBVwb4knxCm/k2GMTXY+c/5RkdndzFYWeX5A==}
    engines: {node: '>=18'}
    peerDependencies:
      '@csstools/css-parser-algorithms': ^3.0.4
      '@csstools/css-tokenizer': ^3.0.3

  '@csstools/postcss-cascade-layers@5.0.1':
    resolution: {integrity: sha512-XOfhI7GShVcKiKwmPAnWSqd2tBR0uxt+runAxttbSp/LY2U16yAVPmAf7e9q4JJ0d+xMNmpwNDLBXnmRCl3HMQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-color-function@4.0.6':
    resolution: {integrity: sha512-EcvXfC60cTIumzpsxWuvVjb7rsJEHPvqn3jeMEBUaE3JSc4FRuP7mEQ+1eicxWmIrs3FtzMH9gR3sgA5TH+ebQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-color-mix-function@3.0.6':
    resolution: {integrity: sha512-jVKdJn4+JkASYGhyPO+Wa5WXSx1+oUgaXb3JsjJn/BlrtFh5zjocCY7pwWi0nuP24V1fY7glQsxEYcYNy0dMFg==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-content-alt-text@2.0.4':
    resolution: {integrity: sha512-YItlZUOuZJCBlRaCf8Aucc1lgN41qYGALMly0qQllrxYJhiyzlI6RxOTMUvtWk+KhS8GphMDsDhKQ7KTPfEMSw==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-exponential-functions@2.0.5':
    resolution: {integrity: sha512-mi8R6dVfA2nDoKM3wcEi64I8vOYEgQVtVKCfmLHXupeLpACfGAided5ddMt5f+CnEodNu4DifuVwb0I6fQDGGQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-font-format-keywords@4.0.0':
    resolution: {integrity: sha512-usBzw9aCRDvchpok6C+4TXC57btc4bJtmKQWOHQxOVKen1ZfVqBUuCZ/wuqdX5GHsD0NRSr9XTP+5ID1ZZQBXw==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-gamut-mapping@2.0.6':
    resolution: {integrity: sha512-0ke7fmXfc8H+kysZz246yjirAH6JFhyX9GTlyRnM0exHO80XcA9zeJpy5pOp5zo/AZiC/q5Pf+Hw7Pd6/uAoYA==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-gradients-interpolation-method@5.0.6':
    resolution: {integrity: sha512-Itrbx6SLUzsZ6Mz3VuOlxhbfuyLTogG5DwEF1V8dAi24iMuvQPIHd7Ti+pNDp7j6WixndJGZaoNR0f9VSzwuTg==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-hwb-function@4.0.6':
    resolution: {integrity: sha512-927Pqy3a1uBP7U8sTfaNdZVB0mNXzIrJO/GZ8us9219q9n06gOqCdfZ0E6d1P66Fm0fYHvxfDbfcUuwAn5UwhQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-ic-unit@4.0.0':
    resolution: {integrity: sha512-9QT5TDGgx7wD3EEMN3BSUG6ckb6Eh5gSPT5kZoVtUuAonfPmLDJyPhqR4ntPpMYhUKAMVKAg3I/AgzqHMSeLhA==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-initial@2.0.0':
    resolution: {integrity: sha512-dv2lNUKR+JV+OOhZm9paWzYBXOCi+rJPqJ2cJuhh9xd8USVrd0cBEPczla81HNOyThMQWeCcdln3gZkQV2kYxA==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-is-pseudo-class@5.0.1':
    resolution: {integrity: sha512-JLp3POui4S1auhDR0n8wHd/zTOWmMsmK3nQd3hhL6FhWPaox5W7j1se6zXOG/aP07wV2ww0lxbKYGwbBszOtfQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-light-dark-function@2.0.7':
    resolution: {integrity: sha512-ZZ0rwlanYKOHekyIPaU+sVm3BEHCe+Ha0/px+bmHe62n0Uc1lL34vbwrLYn6ote8PHlsqzKeTQdIejQCJ05tfw==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-logical-float-and-clear@3.0.0':
    resolution: {integrity: sha512-SEmaHMszwakI2rqKRJgE+8rpotFfne1ZS6bZqBoQIicFyV+xT1UF42eORPxJkVJVrH9C0ctUgwMSn3BLOIZldQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-logical-overflow@2.0.0':
    resolution: {integrity: sha512-spzR1MInxPuXKEX2csMamshR4LRaSZ3UXVaRGjeQxl70ySxOhMpP2252RAFsg8QyyBXBzuVOOdx1+bVO5bPIzA==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-logical-overscroll-behavior@2.0.0':
    resolution: {integrity: sha512-e/webMjoGOSYfqLunyzByZj5KKe5oyVg/YSbie99VEaSDE2kimFm0q1f6t/6Jo+VVCQ/jbe2Xy+uX+C4xzWs4w==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-logical-resize@3.0.0':
    resolution: {integrity: sha512-DFbHQOFW/+I+MY4Ycd/QN6Dg4Hcbb50elIJCfnwkRTCX05G11SwViI5BbBlg9iHRl4ytB7pmY5ieAFk3ws7yyg==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-logical-viewport-units@3.0.3':
    resolution: {integrity: sha512-OC1IlG/yoGJdi0Y+7duz/kU/beCwO+Gua01sD6GtOtLi7ByQUpcIqs7UE/xuRPay4cHgOMatWdnDdsIDjnWpPw==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-media-minmax@2.0.5':
    resolution: {integrity: sha512-sdh5i5GToZOIAiwhdntRWv77QDtsxP2r2gXW/WbLSCoLr00KTq/yiF1qlQ5XX2+lmiFa8rATKMcbwl3oXDMNew==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-media-queries-aspect-ratio-number-values@3.0.4':
    resolution: {integrity: sha512-AnGjVslHMm5xw9keusQYvjVWvuS7KWK+OJagaG0+m9QnIjZsrysD2kJP/tr/UJIyYtMCtu8OkUd+Rajb4DqtIQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-nested-calc@4.0.0':
    resolution: {integrity: sha512-jMYDdqrQQxE7k9+KjstC3NbsmC063n1FTPLCgCRS2/qHUbHM0mNy9pIn4QIiQGs9I/Bg98vMqw7mJXBxa0N88A==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-normalize-display-values@4.0.0':
    resolution: {integrity: sha512-HlEoG0IDRoHXzXnkV4in47dzsxdsjdz6+j7MLjaACABX2NfvjFS6XVAnpaDyGesz9gK2SC7MbNwdCHusObKJ9Q==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-oklab-function@4.0.6':
    resolution: {integrity: sha512-Hptoa0uX+XsNacFBCIQKTUBrFKDiplHan42X73EklG6XmQLG7/aIvxoNhvZ7PvOWMt67Pw3bIlUY2nD6p5vL8A==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-progressive-custom-properties@4.0.0':
    resolution: {integrity: sha512-XQPtROaQjomnvLUSy/bALTR5VCtTVUFwYs1SblvYgLSeTo2a/bMNwUwo2piXw5rTv/FEYiy5yPSXBqg9OKUx7Q==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-random-function@1.0.1':
    resolution: {integrity: sha512-Ab/tF8/RXktQlFwVhiC70UNfpFQRhtE5fQQoP2pO+KCPGLsLdWFiOuHgSRtBOqEshCVAzR4H6o38nhvRZq8deA==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-relative-color-syntax@3.0.6':
    resolution: {integrity: sha512-yxP618Xb+ji1I624jILaYM62uEmZcmbdmFoZHoaThw896sq0vU39kqTTF+ZNic9XyPtPMvq0vyvbgmHaszq8xg==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-scope-pseudo-class@4.0.1':
    resolution: {integrity: sha512-IMi9FwtH6LMNuLea1bjVMQAsUhFxJnyLSgOp/cpv5hrzWmrUYU5fm0EguNDIIOHUqzXode8F/1qkC/tEo/qN8Q==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-sign-functions@1.1.0':
    resolution: {integrity: sha512-SLcc20Nujx/kqbSwDmj6oaXgpy3UjFhBy1sfcqPgDkHfOIfUtUVH7OXO+j7BU4v/At5s61N5ZX6shvgPwluhsA==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-stepped-value-functions@4.0.5':
    resolution: {integrity: sha512-G6SJ6hZJkhxo6UZojVlLo14MohH4J5J7z8CRBrxxUYy9JuZiIqUo5TBYyDGcE0PLdzpg63a7mHSJz3VD+gMwqw==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-text-decoration-shorthand@4.0.1':
    resolution: {integrity: sha512-xPZIikbx6jyzWvhms27uugIc0I4ykH4keRvoa3rxX5K7lEhkbd54rjj/dv60qOCTisoS+3bmwJTeyV1VNBrXaw==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-trigonometric-functions@4.0.5':
    resolution: {integrity: sha512-/YQThYkt5MLvAmVu7zxjhceCYlKrYddK6LEmK5I4ojlS6BmO9u2yO4+xjXzu2+NPYmHSTtP4NFSamBCMmJ1NJA==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/postcss-unset-value@4.0.0':
    resolution: {integrity: sha512-cBz3tOCI5Fw6NIFEwU3RiwK6mn3nKegjpJuzCndoGq3BZPkUjnsq7uQmIeMNeMbMk7YD2MfKcgCpZwX5jyXqCA==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@csstools/selector-resolve-nested@3.0.0':
    resolution: {integrity: sha512-ZoK24Yku6VJU1gS79a5PFmC8yn3wIapiKmPgun0hZgEI5AOqgH2kiPRsPz1qkGv4HL+wuDLH83yQyk6inMYrJQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss-selector-parser: ^7.0.0

  '@csstools/selector-specificity@5.0.0':
    resolution: {integrity: sha512-PCqQV3c4CoVm3kdPhyeZ07VmBRdH2EpMFA/pd9OASpOEC3aXNGoqPDAZ80D0cLpMBxnmk0+yNhGsEx31hq7Gtw==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss-selector-parser: ^7.0.0

  '@csstools/utilities@2.0.0':
    resolution: {integrity: sha512-5VdOr0Z71u+Yp3ozOx8T11N703wIFGVRgOWbOZMKgglPJsWA54MRIoMNVMa7shUToIhx5J8vX4sOZgD2XiihiQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  '@discoveryjs/json-ext@0.5.7':
    resolution: {integrity: sha512-dBVuXR082gk3jsFp7Rd/JI4kytwGHecnCoTtXFb7DB6CNHp4rg5k1bhg0nWdLGLnOV71lmDzGQaLMy8iPLY0pw==}
    engines: {node: '>=10.0.0'}

  '@docsearch/css@3.6.0':
    resolution: {integrity: sha512-+sbxb71sWre+PwDK7X2T8+bhS6clcVMLwBPznX45Qu6opJcgRjAp7gYSDzVFp187J+feSj5dNBN1mJoi6ckkUQ==}

  '@docsearch/react@3.6.0':
    resolution: {integrity: sha512-HUFut4ztcVNmqy9gp/wxNbC7pTOHhgVVkHVGCACTuLhUKUhKAF9KYHJtMiLUJxEqiFLQiuri1fWF8zqwM/cu1w==}
    peerDependencies:
      '@types/react': '>= 16.8.0 < 19.0.0'
      react: '>= 16.8.0 < 19.0.0'
      react-dom: '>= 16.8.0 < 19.0.0'
      search-insights: '>= 1 < 3'
    peerDependenciesMeta:
      '@types/react':
        optional: true
      react:
        optional: true
      react-dom:
        optional: true
      search-insights:
        optional: true

  '@docusaurus/babel@3.6.3':
    resolution: {integrity: sha512-7dW9Hat9EHYCVicFXYA4hjxBY38+hPuCURL8oRF9fySRm7vzNWuEOghA1TXcykuXZp0HLG2td4RhDxCvGG7tNw==}
    engines: {node: '>=18.0'}

  '@docusaurus/bundler@3.6.3':
    resolution: {integrity: sha512-47JLuc8D4wA+6VOvmMd5fUC9rFppBQpQOnxDYiVXffm/DeV/wmm3sbpNd5Y+O+G2+nevLTRnvCm/qyancv0Y3A==}
    engines: {node: '>=18.0'}
    peerDependencies:
      '@docusaurus/faster': '*'
    peerDependenciesMeta:
      '@docusaurus/faster':
        optional: true

  '@docusaurus/core@3.6.3':
    resolution: {integrity: sha512-xL7FRY9Jr5DWqB6pEnqgKqcMPJOX5V0pgWXi5lCiih11sUBmcFKM7c3+GyxcVeeWFxyYSDP3grLTWqJoP4P9Vw==}
    engines: {node: '>=18.0'}
    hasBin: true
    peerDependencies:
      '@mdx-js/react': ^3.0.0
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/cssnano-preset@3.6.3':
    resolution: {integrity: sha512-qP7SXrwZ+23GFJdPN4aIHQrZW+oH/7tzwEuc/RNL0+BdZdmIjYQqUxdXsjE4lFxLNZjj0eUrSNYIS6xwfij+5Q==}
    engines: {node: '>=18.0'}

  '@docusaurus/logger@3.6.3':
    resolution: {integrity: sha512-xSubJixcNyMV9wMV4q0s47CBz3Rlc5jbcCCuij8pfQP8qn/DIpt0ks8W6hQWzHAedg/J/EwxxUOUrnEoKzJo8g==}
    engines: {node: '>=18.0'}

  '@docusaurus/mdx-loader@3.6.3':
    resolution: {integrity: sha512-3iJdiDz9540ppBseeI93tWTDtUGVkxzh59nMq4ignylxMuXBLK8dFqVeaEor23v1vx6TrGKZ2FuLaTB+U7C0QQ==}
    engines: {node: '>=18.0'}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/module-type-aliases@3.6.3':
    resolution: {integrity: sha512-MjaXX9PN/k5ugNvfRZdWyKWq4FsrhN4LEXaj0pEmMebJuBNlFeGyKQUa9DRhJHpadNaiMLrbo9m3U7Ig5YlsZg==}
    peerDependencies:
      react: '*'
      react-dom: '*'

  '@docusaurus/plugin-content-blog@3.6.3':
    resolution: {integrity: sha512-k0ogWwwJU3pFRFfvW1kRVHxzf2DutLGaaLjAnHVEU6ju+aRP0Z5ap/13DHyPOfHeE4WKpn/M0TqjdwZAcY3kAw==}
    engines: {node: '>=18.0'}
    peerDependencies:
      '@docusaurus/plugin-content-docs': '*'
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/plugin-content-docs@3.6.3':
    resolution: {integrity: sha512-r2wS8y/fsaDcxkm20W5bbYJFPzdWdEaTWVYjNxlHlcmX086eqQR1Fomlg9BHTJ0dLXPzAlbC8EN4XqMr3QzNCQ==}
    engines: {node: '>=18.0'}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/plugin-content-pages@3.6.3':
    resolution: {integrity: sha512-eHrmTgjgLZsuqfsYr5X2xEwyIcck0wseSofWrjTwT9FLOWp+KDmMAuVK+wRo7sFImWXZk3oV/xX/g9aZrhD7OA==}
    engines: {node: '>=18.0'}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/plugin-debug@3.6.3':
    resolution: {integrity: sha512-zB9GXfIZNPRfzKnNjU6xGVrqn9bPXuGhpjgsuc/YtcTDjnjhasg38NdYd5LEqXex5G/zIorQgWB3n6x/Ut62vQ==}
    engines: {node: '>=18.0'}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/plugin-google-analytics@3.6.3':
    resolution: {integrity: sha512-rCDNy1QW8Dag7nZq67pcum0bpFLrwvxJhYuVprhFh8BMBDxV0bY+bAkGHbSf68P3Bk9C3hNOAXX1srGLIDvcTA==}
    engines: {node: '>=18.0'}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/plugin-google-gtag@3.6.3':
    resolution: {integrity: sha512-+OyDvhM6rqVkQOmLVkQWVJAizEEfkPzVWtIHXlWPOCFGK9X4/AWeBSrU0WG4iMg9Z4zD4YDRrU+lvI4s6DSC+w==}
    engines: {node: '>=18.0'}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/plugin-google-tag-manager@3.6.3':
    resolution: {integrity: sha512-1M6UPB13gWUtN2UHX083/beTn85PlRI9ABItTl/JL1FJ5dJTWWFXXsHf9WW/6hrVwthwTeV/AGbGKvLKV+IlCA==}
    engines: {node: '>=18.0'}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/plugin-sitemap@3.6.3':
    resolution: {integrity: sha512-94qOO4M9Fwv9KfVQJsgbe91k+fPJ4byf1L3Ez8TUa6TAFPo/BrLwQ80zclHkENlL1824TuxkcMKv33u6eydQCg==}
    engines: {node: '>=18.0'}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/preset-classic@3.6.3':
    resolution: {integrity: sha512-VHSYWROT3flvNNI1SrnMOtW1EsjeHNK9dhU6s9eY5hryZe79lUqnZJyze/ymDe2LXAqzyj6y5oYvyBoZZk6ErA==}
    engines: {node: '>=18.0'}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/react-loadable@6.0.0':
    resolution: {integrity: sha512-YMMxTUQV/QFSnbgrP3tjDzLHRg7vsbMn8e9HAa8o/1iXoiomo48b7sk/kkmWEuWNDPJVlKSJRB6Y2fHqdJk+SQ==}
    peerDependencies:
      react: '*'

  '@docusaurus/remark-plugin-npm2yarn@3.6.3':
    resolution: {integrity: sha512-ZF1QM4vULeBi0vqpNI2TLBH9vUB7JkN7aMGPpKy4jM4HvGH3ZM4Rq4xGqpGLL1IsiRtAENyzlTMdcA+q+l4OJg==}
    engines: {node: '>=18.0'}

  '@docusaurus/theme-classic@3.6.3':
    resolution: {integrity: sha512-1RRLK1tSArI2c00qugWYO3jRocjOZwGF1mBzPPylDVRwWCS/rnWWR91ChdbbaxIupRJ+hX8ZBYrwr5bbU0oztQ==}
    engines: {node: '>=18.0'}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/theme-common@3.6.3':
    resolution: {integrity: sha512-b8ZkhczXHDxWWyvz+YJy4t/PlPbEogTTbgnHoflYnH7rmRtyoodTsu8WVM12la5LmlMJBclBXFl29OH8kPE7gg==}
    engines: {node: '>=18.0'}
    peerDependencies:
      '@docusaurus/plugin-content-docs': '*'
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/theme-search-algolia@3.6.3':
    resolution: {integrity: sha512-rt+MGCCpYgPyWCGXtbxlwFbTSobu15jWBTPI2LHsHNa5B0zSmOISX6FWYAPt5X1rNDOqMGM0FATnh7TBHRohVA==}
    engines: {node: '>=18.0'}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/theme-translations@3.6.3':
    resolution: {integrity: sha512-Gb0regclToVlngSIIwUCtBMQBq48qVUaN1XQNKW4XwlsgUyk0vP01LULdqbem7czSwIeBAFXFoORJ0RPX7ht/w==}
    engines: {node: '>=18.0'}

  '@docusaurus/tsconfig@3.6.3':
    resolution: {integrity: sha512-1pT/rTrRpMV15E4tJH95W5PrjboMn5JkKF+Ys8cTjMegetiXjs0gPFOSDA5hdTlberKQLDO50xPjMJHondLuzA==}

  '@docusaurus/types@3.6.3':
    resolution: {integrity: sha512-xD9oTGDrouWzefkhe9ogB2fDV96/82cRpNGx2HIvI5L87JHNhQVIWimQ/3JIiiX/TEd5S9s+VO6FFguwKNRVow==}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  '@docusaurus/utils-common@3.6.3':
    resolution: {integrity: sha512-v4nKDaANLgT3pMBewHYEMAl/ufY0LkXao1QkFWzI5huWFOmNQ2UFzv2BiKeHX5Ownis0/w6cAyoxPhVdDonlSQ==}
    engines: {node: '>=18.0'}

  '@docusaurus/utils-validation@3.6.3':
    resolution: {integrity: sha512-bhEGGiN5BE38h21vjqD70Gxg++j+PfYVddDUE5UFvLDup68QOcpD33CLr+2knPorlxRbEaNfz6HQDUMQ3HuqKw==}
    engines: {node: '>=18.0'}

  '@docusaurus/utils@3.6.3':
    resolution: {integrity: sha512-0R/FR3bKVl4yl8QwbL4TYFfR+OXBRpVUaTJdENapBGR3YMwfM6/JnhGilWQO8AOwPJGtGoDK7ib8+8UF9f3OZQ==}
    engines: {node: '>=18.0'}

  '@hapi/hoek@9.3.0':
    resolution: {integrity: sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ==}

  '@hapi/topo@5.1.0':
    resolution: {integrity: sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==}

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@jest/schemas@29.6.3':
    resolution: {integrity: sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/types@29.6.3':
    resolution: {integrity: sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jridgewell/gen-mapping@0.3.5':
    resolution: {integrity: sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/source-map@0.3.6':
    resolution: {integrity: sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ==}

  '@jridgewell/sourcemap-codec@1.4.15':
    resolution: {integrity: sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@leichtgewicht/ip-codec@2.0.5':
    resolution: {integrity: sha512-Vo+PSpZG2/fmgmiNzYK9qWRh8h/CHrwD0mo1h1DzL4yzHNSfWYujGTYsWGreD000gcgmZ7K4Ys6Tx9TxtsKdDw==}

  '@mdx-js/mdx@3.0.1':
    resolution: {integrity: sha512-eIQ4QTrOWyL3LWEe/bu6Taqzq2HQvHcyTMaOrI95P2/LmJE7AsfPfgJGuFLPVqBUE1BC1rik3VIhU+s9u72arA==}

  '@mdx-js/react@3.1.0':
    resolution: {integrity: sha512-QjHtSaoameoalGnKDT3FoIl4+9RwyTmo9ZJGBdLOks/YOiWHoRDI3PUwEzOE7kEmGcV3AFcp9K6dYu9rEuKLAQ==}
    peerDependencies:
      '@types/react': '>=16'
      react: '>=16'

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@pnpm/config.env-replace@1.1.0':
    resolution: {integrity: sha512-htyl8TWnKL7K/ESFa1oW2UB5lVDxuF5DpM7tBi6Hu2LNL3mWkIzNLG6N4zoCUP1lCKNxWy/3iu8mS8MvToGd6w==}
    engines: {node: '>=12.22.0'}

  '@pnpm/network.ca-file@1.0.2':
    resolution: {integrity: sha512-YcPQ8a0jwYU9bTdJDpXjMi7Brhkr1mXsXrUJvjqM2mQDgkRiz8jFaQGOdaLxgjtUfQgZhKy/O3cG/YwmgKaxLA==}
    engines: {node: '>=12.22.0'}

  '@pnpm/npm-conf@2.2.2':
    resolution: {integrity: sha512-UA91GwWPhFExt3IizW6bOeY/pQ0BkuNwKjk9iQW9KqxluGCrg4VenZ0/L+2Y0+ZOtme72EVvg6v0zo3AMQRCeA==}
    engines: {node: '>=12'}

  '@polka/url@1.0.0-next.25':
    resolution: {integrity: sha512-j7P6Rgr3mmtdkeDGTe0E/aYyWEWVtc5yFXtHCRHs28/jptDEWfaVOc5T7cblqy1XKPPfCxJc/8DwQ5YgLOZOVQ==}

  '@sideway/address@4.1.5':
    resolution: {integrity: sha512-IqO/DUQHUkPeixNQ8n0JA6102hT9CmaljNTPmQ1u8MEhBo/R4Q8eKLN/vGZxuebwOroDB4cbpjheD4+/sKFK4Q==}

  '@sideway/formula@3.0.1':
    resolution: {integrity: sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg==}

  '@sideway/pinpoint@2.0.0':
    resolution: {integrity: sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ==}

  '@sinclair/typebox@0.27.8':
    resolution: {integrity: sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==}

  '@sindresorhus/is@4.6.0':
    resolution: {integrity: sha512-t09vSN3MdfsyCHoFcTRCH/iUtG7OJ0CsjzB8cjAmKc/va/kIgeDI/TxsigdncE/4be734m0cvIYwNaV4i2XqAw==}
    engines: {node: '>=10'}

  '@sindresorhus/is@5.6.0':
    resolution: {integrity: sha512-TV7t8GKYaJWsn00tFDqBw8+Uqmr8A0fRU1tvTQhyZzGv0sJCGRQL3JGMI3ucuKo3XIZdUP+Lx7/gh2t3lewy7g==}
    engines: {node: '>=14.16'}

  '@slorber/remark-comment@1.0.0':
    resolution: {integrity: sha512-RCE24n7jsOj1M0UPvIQCHTe7fI0sFL4S2nwKVWwHyVr/wI/H8GosgsJGyhnsZoGFnD/P2hLf1mSbrrgSLN93NA==}

  '@svgr/babel-plugin-add-jsx-attribute@8.0.0':
    resolution: {integrity: sha512-b9MIk7yhdS1pMCZM8VeNfUlSKVRhsHZNMl5O9SfaX0l0t5wjdgu4IDzGB8bpnGBBOjGST3rRFVsaaEtI4W6f7g==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-remove-jsx-attribute@8.0.0':
    resolution: {integrity: sha512-BcCkm/STipKvbCl6b7QFrMh/vx00vIP63k2eM66MfHJzPr6O2U0jYEViXkHJWqXqQYjdeA9cuCl5KWmlwjDvbA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-remove-jsx-empty-expression@8.0.0':
    resolution: {integrity: sha512-5BcGCBfBxB5+XSDSWnhTThfI9jcO5f0Ai2V24gZpG+wXF14BzwxxdDb4g6trdOux0rhibGs385BeFMSmxtS3uA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-replace-jsx-attribute-value@8.0.0':
    resolution: {integrity: sha512-KVQ+PtIjb1BuYT3ht8M5KbzWBhdAjjUPdlMtpuw/VjT8coTrItWX6Qafl9+ji831JaJcu6PJNKCV0bp01lBNzQ==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-svg-dynamic-title@8.0.0':
    resolution: {integrity: sha512-omNiKqwjNmOQJ2v6ge4SErBbkooV2aAWwaPFs2vUY7p7GhVkzRkJ00kILXQvRhA6miHnNpXv7MRnnSjdRjK8og==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-svg-em-dimensions@8.0.0':
    resolution: {integrity: sha512-mURHYnu6Iw3UBTbhGwE/vsngtCIbHE43xCRK7kCw4t01xyGqb2Pd+WXekRRoFOBIY29ZoOhUCTEweDMdrjfi9g==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-transform-react-native-svg@8.1.0':
    resolution: {integrity: sha512-Tx8T58CHo+7nwJ+EhUwx3LfdNSG9R2OKfaIXXs5soiy5HtgoAEkDay9LIimLOcG8dJQH1wPZp/cnAv6S9CrR1Q==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-plugin-transform-svg-component@8.0.0':
    resolution: {integrity: sha512-DFx8xa3cZXTdb/k3kfPeaixecQLgKh5NVBMwD0AQxOzcZawK4oo1Jh9LbrcACUivsCA7TLG8eeWgrDXjTMhRmw==}
    engines: {node: '>=12'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/babel-preset@8.1.0':
    resolution: {integrity: sha512-7EYDbHE7MxHpv4sxvnVPngw5fuR6pw79SkcrILHJ/iMpuKySNCl5W1qcwPEpU+LgyRXOaAFgH0KhwD18wwg6ug==}
    engines: {node: '>=14'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@svgr/core@8.1.0':
    resolution: {integrity: sha512-8QqtOQT5ACVlmsvKOJNEaWmRPmcojMOzCz4Hs2BGG/toAp/K38LcsMRyLp349glq5AzJbCEeimEoxaX6v/fLrA==}
    engines: {node: '>=14'}

  '@svgr/hast-util-to-babel-ast@8.0.0':
    resolution: {integrity: sha512-EbDKwO9GpfWP4jN9sGdYwPBU0kdomaPIL2Eu4YwmgP+sJeXT+L7bMwJUBnhzfH8Q2qMBqZ4fJwpCyYsAN3mt2Q==}
    engines: {node: '>=14'}

  '@svgr/plugin-jsx@8.1.0':
    resolution: {integrity: sha512-0xiIyBsLlr8quN+WyuxooNW9RJ0Dpr8uOnH/xrCVO8GLUcwHISwj1AG0k+LFzteTkAA0GbX0kj9q6Dk70PTiPA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@svgr/core': '*'

  '@svgr/plugin-svgo@8.1.0':
    resolution: {integrity: sha512-Ywtl837OGO9pTLIN/onoWLmDQ4zFUycI1g76vuKGEz6evR/ZTJlJuz3G/fIkb6OVBJ2g0o6CGJzaEjfmEo3AHA==}
    engines: {node: '>=14'}
    peerDependencies:
      '@svgr/core': '*'

  '@svgr/webpack@8.1.0':
    resolution: {integrity: sha512-LnhVjMWyMQV9ZmeEy26maJk+8HTIbd59cH4F2MJ439k9DqejRisfFNGAPvRYlKETuh9LrImlS8aKsBgKjMA8WA==}
    engines: {node: '>=14'}

  '@szmarczak/http-timer@5.0.1':
    resolution: {integrity: sha512-+PmQX0PiAYPMeVYe237LJAYvOMYW1j2rH5YROyS3b4CTVJum34HfRvKvAzozHAQG0TnHNdUfY9nCeUyRAs//cw==}
    engines: {node: '>=14.16'}

  '@trysound/sax@0.2.0':
    resolution: {integrity: sha512-L7z9BgrNEcYyUYtF+HaEfiS5ebkh9jXqbszz7pC0hRBPaatV0XjSD3+eHrpqFemQfgwiFF0QPIarnIihIDn7OA==}
    engines: {node: '>=10.13.0'}

  '@types/acorn@4.0.6':
    resolution: {integrity: sha512-veQTnWP+1D/xbxVrPC3zHnCZRjSrKfhbMUlEA43iMZLu7EsnTtkJklIuwrCPbOi8YkvDQAiW05VQQFvvz9oieQ==}

  '@types/body-parser@1.19.5':
    resolution: {integrity: sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==}

  '@types/bonjour@3.5.13':
    resolution: {integrity: sha512-z9fJ5Im06zvUL548KvYNecEVlA7cVDkGUi6kZusb04mpyEFKCIZJvloCcmpmLaIahDpOQGHaHmG6imtPMmPXGQ==}

  '@types/connect-history-api-fallback@1.5.4':
    resolution: {integrity: sha512-n6Cr2xS1h4uAulPRdlw6Jl6s1oG8KrVilPN2yUITEs+K48EzMJJ3W1xy8K5eWuFvjp3R74AOIGSmp2UfBJ8HFw==}

  '@types/connect@3.4.38':
    resolution: {integrity: sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==}

  '@types/debug@4.1.12':
    resolution: {integrity: sha512-vIChWdVG3LG1SMxEvI/AK+FWJthlrqlTu7fbrlywTkkaONwk/UAGaULXRlf8vkzFBLVm0zkMdCquhL5aOjhXPQ==}

  '@types/eslint-scope@3.7.7':
    resolution: {integrity: sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==}

  '@types/eslint@8.56.10':
    resolution: {integrity: sha512-Shavhk87gCtY2fhXDctcfS3e6FdxWkCx1iUZ9eEUbh7rTqlZT0/IzOkCOVt0fCjcFuZ9FPYfuezTBImfHCDBGQ==}

  '@types/estree-jsx@1.0.5':
    resolution: {integrity: sha512-52CcUVNFyfb1A2ALocQw/Dd1BQFNmSdkuC3BkZ6iqhdMfQz7JWOFRuJFloOzjk+6WijU56m9oKXFAXc7o3Towg==}

  '@types/estree@1.0.6':
    resolution: {integrity: sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==}

  '@types/express-serve-static-core@4.19.0':
    resolution: {integrity: sha512-bGyep3JqPCRry1wq+O5n7oiBgGWmeIJXPjXXCo8EK0u8duZGSYar7cGqd3ML2JUsLGeB7fmc06KYo9fLGWqPvQ==}

  '@types/express@4.17.21':
    resolution: {integrity: sha512-ejlPM315qwLpaQlQDTjPdsUFSc6ZsP4AN6AlWnogPjQ7CVi7PYF3YVz+CY3jE2pwYf7E/7HlDAN0rV2GxTG0HQ==}

  '@types/gtag.js@0.0.12':
    resolution: {integrity: sha512-YQV9bUsemkzG81Ea295/nF/5GijnD2Af7QhEofh7xu+kvCN6RdodgNwwGWXB5GMI3NoyvQo0odNctoH/qLMIpg==}

  '@types/hast@3.0.4':
    resolution: {integrity: sha512-WPs+bbQw5aCj+x6laNGWLH3wviHtoCv/P3+otBhbOhJgG8qtpdAMlTCxLtsTWA7LH1Oh/bFCHsBn0TPS5m30EQ==}

  '@types/history@4.7.11':
    resolution: {integrity: sha512-qjDJRrmvBMiTx+jyLxvLfJU7UznFuokDv4f3WRuriHKERccVpFU+8XMQUAbDzoiJCsmexxRExQeMwwCdamSKDA==}

  '@types/html-minifier-terser@6.1.0':
    resolution: {integrity: sha512-oh/6byDPnL1zeNXFrDXFLyZjkr1MsBG667IM792caf1L2UPOOMf65NFzjUH/ltyfwjAGfs1rsX1eftK0jC/KIg==}

  '@types/http-cache-semantics@4.0.4':
    resolution: {integrity: sha512-1m0bIFVc7eJWyve9S0RnuRgcQqF/Xd5QsUZAZeQFr1Q3/p9JWoQQEqmVy+DPTNpGXwhgIetAoYF8JSc33q29QA==}

  '@types/http-errors@2.0.4':
    resolution: {integrity: sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==}

  '@types/http-proxy@1.17.14':
    resolution: {integrity: sha512-SSrD0c1OQzlFX7pGu1eXxSEjemej64aaNPRhhVYUGqXh0BtldAAx37MG8btcumvpgKyZp1F5Gn3JkktdxiFv6w==}

  '@types/istanbul-lib-coverage@2.0.6':
    resolution: {integrity: sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==}

  '@types/istanbul-lib-report@3.0.3':
    resolution: {integrity: sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==}

  '@types/istanbul-reports@3.0.4':
    resolution: {integrity: sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==}

  '@types/json-schema@7.0.15':
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}

  '@types/mdast@4.0.3':
    resolution: {integrity: sha512-LsjtqsyF+d2/yFOYaN22dHZI1Cpwkrj+g06G8+qtUKlhovPW89YhqSnfKtMbkgmEtYpH2gydRNULd6y8mciAFg==}

  '@types/mdx@2.0.13':
    resolution: {integrity: sha512-+OWZQfAYyio6YkJb3HLxDrvnx6SWWDbC0zVPfBRzUk0/nqoDyf6dNxQi3eArPe8rJ473nobTMQ/8Zk+LxJ+Yuw==}

  '@types/mime@1.3.5':
    resolution: {integrity: sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==}

  '@types/ms@0.7.34':
    resolution: {integrity: sha512-nG96G3Wp6acyAgJqGasjODb+acrI7KltPiRxzHPXnP3NgI28bpQDRv53olbqGXbfcgF5aiiHmO3xpwEpS5Ld9g==}

  '@types/node-forge@1.3.11':
    resolution: {integrity: sha512-FQx220y22OKNTqaByeBGqHWYz4cl94tpcxeFdvBo3wjG6XPBuZ0BNgNZRV5J5TFmmcsJ4IzsLkmGRiQbnYsBEQ==}

  '@types/node@17.0.45':
    resolution: {integrity: sha512-w+tIMs3rq2afQdsPJlODhoUEKzFP1ayaoyl1CcnwtIlsVe7K7bA1NGm4s3PraqTLlXnbIN84zuBlxBWo1u9BLw==}

  '@types/node@20.14.11':
    resolution: {integrity: sha512-kprQpL8MMeszbz6ojB5/tU8PLN4kesnN8Gjzw349rDlNgsSzg90lAVj3llK99Dh7JON+t9AuscPPFW6mPbTnSA==}

  '@types/parse-json@4.0.2':
    resolution: {integrity: sha512-dISoDXWWQwUquiKsyZ4Ng+HX2KsPL7LyHKHQwgGFEA3IaKac4Obd+h2a/a6waisAoepJlBcx9paWqjA8/HVjCw==}

  '@types/prismjs@1.26.3':
    resolution: {integrity: sha512-A0D0aTXvjlqJ5ZILMz3rNfDBOx9hHxLZYv2by47Sm/pqW35zzjusrZTryatjN/Rf8Us2gZrJD+KeHbUSTux1Cw==}

  '@types/prop-types@15.7.12':
    resolution: {integrity: sha512-5zvhXYtRNRluoE/jAp4GVsSduVUzNWKkOZrCDBWYtE7biZywwdC2AcEzg+cSMLFRfVgeAFqpfNabiPjxFddV1Q==}

  '@types/qs@6.9.15':
    resolution: {integrity: sha512-uXHQKES6DQKKCLh441Xv/dwxOq1TVS3JPUMlEqoEglvlhR6Mxnlew/Xq/LRVHpLyk7iK3zODe1qYHIMltO7XGg==}

  '@types/range-parser@1.2.7':
    resolution: {integrity: sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==}

  '@types/react-router-config@5.0.11':
    resolution: {integrity: sha512-WmSAg7WgqW7m4x8Mt4N6ZyKz0BubSj/2tVUMsAHp+Yd2AMwcSbeFq9WympT19p5heCFmF97R9eD5uUR/t4HEqw==}

  '@types/react-router-dom@5.3.3':
    resolution: {integrity: sha512-kpqnYK4wcdm5UaWI3fLcELopqLrHgLqNsdpHauzlQktfkHL3npOSwtj1Uz9oKBAzs7lFtVkV8j83voAz2D8fhw==}

  '@types/react-router@5.1.20':
    resolution: {integrity: sha512-jGjmu/ZqS7FjSH6owMcD5qpq19+1RS9DeVRqfl1FeBMxTDQAGwlMWOcs52NDoXaNKyG3d1cYQFMs9rCrb88o9Q==}

  '@types/react@18.2.79':
    resolution: {integrity: sha512-RwGAGXPl9kSXwdNTafkOEuFrTBD5SA2B3iEB96xi8+xu5ddUa/cpvyVCSNn+asgLCTHkb5ZxN8gbuibYJi4s1w==}

  '@types/retry@0.12.0':
    resolution: {integrity: sha512-wWKOClTTiizcZhXnPY4wikVAwmdYHp8q6DmC+EJUzAMsycb7HB32Kh9RN4+0gExjmPmZSAQjgURXIGATPegAvA==}

  '@types/sax@1.2.7':
    resolution: {integrity: sha512-rO73L89PJxeYM3s3pPPjiPgVVcymqU490g0YO5n5By0k2Erzj6tay/4lr1CHAAU4JyOWd1rpQ8bCf6cZfHU96A==}

  '@types/send@0.17.4':
    resolution: {integrity: sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==}

  '@types/serve-index@1.9.4':
    resolution: {integrity: sha512-qLpGZ/c2fhSs5gnYsQxtDEq3Oy8SXPClIXkW5ghvAvsNuVSA8k+gCONcUCS/UjLEYvYps+e8uBtfgXgvhwfNug==}

  '@types/serve-static@1.15.7':
    resolution: {integrity: sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==}

  '@types/sockjs@0.3.36':
    resolution: {integrity: sha512-MK9V6NzAS1+Ud7JV9lJLFqW85VbC9dq3LmwZCuBe4wBDgKC0Kj/jd8Xl+nSviU+Qc3+m7umHHyHg//2KSa0a0Q==}

  '@types/unist@2.0.10':
    resolution: {integrity: sha512-IfYcSBWE3hLpBg8+X2SEa8LVkJdJEkT2Ese2aaLs3ptGdVtABxndrMaxuFlQ1qdFf9Q5rDvDpxI3WwgvKFAsQA==}

  '@types/unist@3.0.2':
    resolution: {integrity: sha512-dqId9J8K/vGi5Zr7oo212BGii5m3q5Hxlkwy3WpYuKPklmBEvsbMYYyLxAQpSffdLl/gdW0XUpKWFvYmyoWCoQ==}

  '@types/ws@8.5.10':
    resolution: {integrity: sha512-vmQSUcfalpIq0R9q7uTo2lXs6eGIpt9wtnLdMv9LVpIjCA/+ufZRozlVoVelIYixx1ugCBKDhn89vnsEGOCx9A==}

  '@types/yargs-parser@21.0.3':
    resolution: {integrity: sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==}

  '@types/yargs@17.0.32':
    resolution: {integrity: sha512-xQ67Yc/laOG5uMfX/093MRlGGCIBzZMarVa+gfNKJxWAIgykYpVGkBdbqEzGDDfCrVUj6Hiff4mTZ5BA6TmAog==}

  '@ungap/structured-clone@1.2.0':
    resolution: {integrity: sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ==}

  '@webassemblyjs/ast@1.12.1':
    resolution: {integrity: sha512-EKfMUOPRRUTy5UII4qJDGPpqfwjOmZ5jeGFwid9mnoqIFK+e0vqoi1qH56JpmZSzEL53jKnNzScdmftJyG5xWg==}

  '@webassemblyjs/floating-point-hex-parser@1.11.6':
    resolution: {integrity: sha512-ejAj9hfRJ2XMsNHk/v6Fu2dGS+i4UaXBXGemOfQ/JfQ6mdQg/WXtwleQRLLS4OvfDhv8rYnVwH27YJLMyYsxhw==}

  '@webassemblyjs/helper-api-error@1.11.6':
    resolution: {integrity: sha512-o0YkoP4pVu4rN8aTJgAyj9hC2Sv5UlkzCHhxqWj8butaLvnpdc2jOwh4ewE6CX0txSfLn/UYaV/pheS2Txg//Q==}

  '@webassemblyjs/helper-buffer@1.12.1':
    resolution: {integrity: sha512-nzJwQw99DNDKr9BVCOZcLuJJUlqkJh+kVzVl6Fmq/tI5ZtEyWT1KZMyOXltXLZJmDtvLCDgwsyrkohEtopTXCw==}

  '@webassemblyjs/helper-numbers@1.11.6':
    resolution: {integrity: sha512-vUIhZ8LZoIWHBohiEObxVm6hwP034jwmc9kuq5GdHZH0wiLVLIPcMCdpJzG4C11cHoQ25TFIQj9kaVADVX7N3g==}

  '@webassemblyjs/helper-wasm-bytecode@1.11.6':
    resolution: {integrity: sha512-sFFHKwcmBprO9e7Icf0+gddyWYDViL8bpPjJJl0WHxCdETktXdmtWLGVzoHbqUcY4Be1LkNfwTmXOJUFZYSJdA==}

  '@webassemblyjs/helper-wasm-section@1.12.1':
    resolution: {integrity: sha512-Jif4vfB6FJlUlSbgEMHUyk1j234GTNG9dBJ4XJdOySoj518Xj0oGsNi59cUQF4RRMS9ouBUxDDdyBVfPTypa5g==}

  '@webassemblyjs/ieee754@1.11.6':
    resolution: {integrity: sha512-LM4p2csPNvbij6U1f19v6WR56QZ8JcHg3QIJTlSwzFcmx6WSORicYj6I63f9yU1kEUtrpG+kjkiIAkevHpDXrg==}

  '@webassemblyjs/leb128@1.11.6':
    resolution: {integrity: sha512-m7a0FhE67DQXgouf1tbN5XQcdWoNgaAuoULHIfGFIEVKA6tu/edls6XnIlkmS6FrXAquJRPni3ZZKjw6FSPjPQ==}

  '@webassemblyjs/utf8@1.11.6':
    resolution: {integrity: sha512-vtXf2wTQ3+up9Zsg8sa2yWiQpzSsMyXj0qViVP6xKGCUT8p8YJ6HqI7l5eCnWx1T/FYdsv07HQs2wTFbbof/RA==}

  '@webassemblyjs/wasm-edit@1.12.1':
    resolution: {integrity: sha512-1DuwbVvADvS5mGnXbE+c9NfA8QRcZ6iKquqjjmR10k6o+zzsRVesil54DKexiowcFCPdr/Q0qaMgB01+SQ1u6g==}

  '@webassemblyjs/wasm-gen@1.12.1':
    resolution: {integrity: sha512-TDq4Ojh9fcohAw6OIMXqiIcTq5KUXTGRkVxbSo1hQnSy6lAM5GSdfwWeSxpAo0YzgsgF182E/U0mDNhuA0tW7w==}

  '@webassemblyjs/wasm-opt@1.12.1':
    resolution: {integrity: sha512-Jg99j/2gG2iaz3hijw857AVYekZe2SAskcqlWIZXjji5WStnOpVoat3gQfT/Q5tb2djnCjBtMocY/Su1GfxPBg==}

  '@webassemblyjs/wasm-parser@1.12.1':
    resolution: {integrity: sha512-xikIi7c2FHXysxXe3COrVUPSheuBtpcfhbpFj4gmu7KRLYOzANztwUU0IbsqvMqzuNK2+glRGWCEqZo1WCLyAQ==}

  '@webassemblyjs/wast-printer@1.12.1':
    resolution: {integrity: sha512-+X4WAlOisVWQMikjbcvY2e0rwPsKQ9F688lksZhBcPycBBuii3O7m8FACbDMWDojpAqvjIncrG8J0XHKyQfVeA==}

  '@xtuc/ieee754@1.2.0':
    resolution: {integrity: sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==}

  '@xtuc/long@4.2.2':
    resolution: {integrity: sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==}

  accepts@1.3.8:
    resolution: {integrity: sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==}
    engines: {node: '>= 0.6'}

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn-walk@8.3.2:
    resolution: {integrity: sha512-cjkyv4OtNCIeqhHrfS81QWXoCBPExR/J62oyEqepVw8WaQeSqpW2uhuLPh1m9eWhDuOo/jUXVTlifvesOWp/4A==}
    engines: {node: '>=0.4.0'}

  acorn@8.14.0:
    resolution: {integrity: sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  address@1.2.2:
    resolution: {integrity: sha512-4B/qKCfeE/ODUaAUpSwfzazo5x29WD4r3vXiWsB7I2mSDAihwEqKO+g8GELZUQSSAo5e1XTYh3ZVfLyxBc12nA==}
    engines: {node: '>= 10.0.0'}

  aggregate-error@3.1.0:
    resolution: {integrity: sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA==}
    engines: {node: '>=8'}

  ajv-formats@2.1.1:
    resolution: {integrity: sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==}
    peerDependencies:
      ajv: ^8.0.0
    peerDependenciesMeta:
      ajv:
        optional: true

  ajv-keywords@3.5.2:
    resolution: {integrity: sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==}
    peerDependencies:
      ajv: ^6.9.1

  ajv-keywords@5.1.0:
    resolution: {integrity: sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==}
    peerDependencies:
      ajv: ^8.8.2

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ajv@8.12.0:
    resolution: {integrity: sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==}

  algoliasearch-helper@3.18.0:
    resolution: {integrity: sha512-ZXvA8r6VG46V343jnIE7Tei8Xr0/9N8YhD27joC0BKxeogQyvNu7O37i510wA7FnrDjoa/tFhK90WUaBlkaqnw==}
    peerDependencies:
      algoliasearch: '>= 3.1 < 6'

  algoliasearch@4.23.3:
    resolution: {integrity: sha512-Le/3YgNvjW9zxIQMRhUHuhiUjAlKY/zsdZpfq4dlLqg6mEm0nL6yk+7f2hDOtLpxsgE4jSzDmvHL7nXdBp5feg==}

  ansi-align@3.0.1:
    resolution: {integrity: sha512-IOfwwBF5iczOjp/WeY4YxyjqAFMQoZufdQWDd19SEExbVLNXqvpzSJ/M7Za4/sCPmQ0+GRquoA7bGcINcxew6w==}

  ansi-escapes@4.3.2:
    resolution: {integrity: sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==}
    engines: {node: '>=8'}

  ansi-html-community@0.0.8:
    resolution: {integrity: sha512-1APHAyr3+PCamwNw3bXCPp4HFLONZt/yIH0sZp0/469KWNTEy+qN5jQ3GVX6DMZ1UXAi34yVwtTeaG/HpBuuzw==}
    engines: {'0': node >= 0.8.0}
    hasBin: true

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.0.1:
    resolution: {integrity: sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==}
    engines: {node: '>=12'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  arg@5.0.2:
    resolution: {integrity: sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==}

  argparse@1.0.10:
    resolution: {integrity: sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  array-flatten@1.1.1:
    resolution: {integrity: sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==}

  array-union@2.1.0:
    resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}
    engines: {node: '>=8'}

  astring@1.8.6:
    resolution: {integrity: sha512-ISvCdHdlTDlH5IpxQJIex7BWBywFWgjJSVdwst+/iQCoEYnyOaQ95+X1JGshuBjGp6nxKUy1jMgE3zPqN7fQdg==}
    hasBin: true

  at-least-node@1.0.0:
    resolution: {integrity: sha512-+q/t7Ekv1EDY2l6Gda6LLiX14rU9TV20Wa3ofeQmwPFZbOMo9DXrLbOjFaaclkXKWidIaopwAObQDqwWtGUjqg==}
    engines: {node: '>= 4.0.0'}

  autoprefixer@10.4.20:
    resolution: {integrity: sha512-XY25y5xSv/wEoqzDyXXME4AFfkZI0P23z6Fs3YgymDnKJkCGOnkL0iTxCa85UTqaSgfcqyf3UA6+c7wUvx/16g==}
    engines: {node: ^10 || ^12 || >=14}
    hasBin: true
    peerDependencies:
      postcss: ^8.1.0

  babel-loader@9.2.1:
    resolution: {integrity: sha512-fqe8naHt46e0yIdkjUZYqddSXfej3AHajX+CSO5X7oy0EmPc6o5Xh+RClNoHjnieWz9AW4kZxW9yyFMhVB1QLA==}
    engines: {node: '>= 14.15.0'}
    peerDependencies:
      '@babel/core': ^7.12.0
      webpack: '>=5'

  babel-plugin-dynamic-import-node@2.3.3:
    resolution: {integrity: sha512-jZVI+s9Zg3IqA/kdi0i6UDCybUI3aSBLnglhYbSSjKlV7yF1F/5LWv8MakQmvYpnbJDS6fcBL2KzHSxNCMtWSQ==}

  babel-plugin-polyfill-corejs2@0.4.11:
    resolution: {integrity: sha512-sMEJ27L0gRHShOh5G54uAAPaiCOygY/5ratXuiyb2G46FmlSpc9eFCzYVyDiPxfNbwzA7mYahmjQc5q+CZQ09Q==}
    peerDependencies:
      '@babel/core': ^7.4.0 || ^8.0.0-0 <8.0.0

  babel-plugin-polyfill-corejs3@0.10.6:
    resolution: {integrity: sha512-b37+KR2i/khY5sKmWNVQAnitvquQbNdWy6lJdsr0kmquCKEEUgMKK4SboVM3HtfnZilfjr4MMQ7vY58FVWDtIA==}
    peerDependencies:
      '@babel/core': ^7.4.0 || ^8.0.0-0 <8.0.0

  babel-plugin-polyfill-regenerator@0.6.2:
    resolution: {integrity: sha512-2R25rQZWP63nGwaAswvDazbPXfrM3HwVoBXK6HcqeKrSrL/JqcC/rDcf95l4r7LXLyxDXc8uQDa064GubtCABg==}
    peerDependencies:
      '@babel/core': ^7.4.0 || ^8.0.0-0 <8.0.0

  bail@2.0.2:
    resolution: {integrity: sha512-0xO6mYd7JB2YesxDKplafRpsiOzPt9V02ddPCLbY1xYGPOX24NTyN50qnUxgCPcSoYMhKpAuBTjQoRZCAkUDRw==}

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  batch@0.6.1:
    resolution: {integrity: sha512-x+VAiMRL6UPkx+kudNvxTl6hB2XNNCG2r+7wixVfIYwu/2HKRXimwQyaumLjMveWvT2Hkd/cAJw+QBMfJ/EKVw==}

  big.js@5.2.2:
    resolution: {integrity: sha512-vyL2OymJxmarO8gxMr0mhChsO9QGwhynfuu4+MHTAW6czfq9humCB7rKpUjDd9YUiDPU4mzpyupFSvOClAwbmQ==}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  body-parser@1.20.2:
    resolution: {integrity: sha512-ml9pReCu3M61kGlqoTm2umSXTlRTuGTx0bfYj+uIUKKYycG5NtSbeetV3faSU6R7ajOPw0g/J1PvK4qNy7s5bA==}
    engines: {node: '>= 0.8', npm: 1.2.8000 || >= 1.4.16}

  bonjour-service@1.2.1:
    resolution: {integrity: sha512-oSzCS2zV14bh2kji6vNe7vrpJYCHGvcZnlffFQ1MEoX/WOeQ/teD8SYWKR942OI3INjq8OMNJlbPK5LLLUxFDw==}

  boolbase@1.0.0:
    resolution: {integrity: sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==}

  boxen@6.2.1:
    resolution: {integrity: sha512-H4PEsJXfFI/Pt8sjDWbHlQPx4zL/bvSQjcilJmaulGt5mLDorHOHpmdXAJcBcmru7PhYSp/cDMWRko4ZUMFkSw==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  boxen@7.1.1:
    resolution: {integrity: sha512-2hCgjEmP8YLWQ130n2FerGv7rYpfBmnmp9Uy2Le1vge6X3gZIfSmEzP5QTDElFxcvVcXlEn8Aq6MU/PZygIOog==}
    engines: {node: '>=14.16'}

  brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}

  brace-expansion@2.0.1:
    resolution: {integrity: sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  browserslist@4.23.3:
    resolution: {integrity: sha512-btwCFJVjI4YWDNfau8RhZ+B1Q/VLoUITrm3RlP6y1tYGWIOa+InuYiRGXUBXo8nA1qKmHMyLB/iVQg5TT4eFoA==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  browserslist@4.24.2:
    resolution: {integrity: sha512-ZIc+Q62revdMcqC6aChtW4jz3My3klmCO1fEmINZY/8J3EpBg5/A/D0AKmBveUh6pgoeycoMkVMko84tuYS+Gg==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  buffer-from@1.1.2:
    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}

  bytes@3.0.0:
    resolution: {integrity: sha512-pMhOfFDPiv9t5jjIXkHosWmkSyQbvsgEVNkz0ERHbuLh2T/7j4Mqqpz523Fe8MVY89KC6Sh/QfS2sM+SjgFDcw==}
    engines: {node: '>= 0.8'}

  bytes@3.1.2:
    resolution: {integrity: sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==}
    engines: {node: '>= 0.8'}

  cacheable-lookup@7.0.0:
    resolution: {integrity: sha512-+qJyx4xiKra8mZrcwhjMRMUhD5NR1R8esPkzIYxX96JiecFoxAXFuz/GpR3+ev4PE1WamHip78wV0vcmPQtp8w==}
    engines: {node: '>=14.16'}

  cacheable-request@10.2.14:
    resolution: {integrity: sha512-zkDT5WAF4hSSoUgyfg5tFIxz8XQK+25W/TLVojJTMKBaxevLBBtLxgqguAuVQB8PVW79FVjHcU+GJ9tVbDZ9mQ==}
    engines: {node: '>=14.16'}

  call-bind@1.0.7:
    resolution: {integrity: sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==}
    engines: {node: '>= 0.4'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camel-case@4.1.2:
    resolution: {integrity: sha512-gxGWBrTT1JuMx6R+o5PTXMmUnhnVzLQ9SNutD4YqKtI6ap897t3tKECYla6gCWEkplXnlNybEkZg9GEGxKFCgw==}

  camelcase-css@2.0.1:
    resolution: {integrity: sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==}
    engines: {node: '>= 6'}

  camelcase@6.3.0:
    resolution: {integrity: sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==}
    engines: {node: '>=10'}

  camelcase@7.0.1:
    resolution: {integrity: sha512-xlx1yCK2Oc1APsPXDL2LdlNP6+uu8OCDdhOBSVT279M/S+y75O30C2VuD8T2ogdePBBl7PfPF4504tnLgX3zfw==}
    engines: {node: '>=14.16'}

  caniuse-api@3.0.0:
    resolution: {integrity: sha512-bsTwuIg/BZZK/vreVTYYbSWoe2F+71P7K5QGEX+pT250DZbfU1MQ5prOKpPR+LL6uWKK3KMwMCAS74QB3Um1uw==}

  caniuse-lite@1.0.30001651:
    resolution: {integrity: sha512-9Cf+Xv1jJNe1xPZLGuUXLNkE1BoDkqRqYyFJ9TDYSqhduqA4hu4oR9HluGoWYQC/aj8WHjsGVV+bwkh0+tegRg==}

  caniuse-lite@1.0.30001680:
    resolution: {integrity: sha512-rPQy70G6AGUMnbwS1z6Xg+RkHYPAi18ihs47GH0jcxIG7wArmPgY3XbS2sRdBbxJljp3thdT8BIqv9ccCypiPA==}

  ccount@2.0.1:
    resolution: {integrity: sha512-eyrF0jiFpY+3drT6383f1qhkbGsLSifNAjA61IUjZjmLCWjItY6LB9ft9YhoDgwfmclB2zhu51Lc7+95b8NRAg==}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  chalk@5.3.0:
    resolution: {integrity: sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==}
    engines: {node: ^12.17.0 || ^14.13 || >=16.0.0}

  char-regex@1.0.2:
    resolution: {integrity: sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==}
    engines: {node: '>=10'}

  character-entities-html4@2.1.0:
    resolution: {integrity: sha512-1v7fgQRj6hnSwFpq1Eu0ynr/CDEw0rXo2B61qXrLNdHZmPKgb7fqS1a2JwF0rISo9q77jDI8VMEHoApn8qDoZA==}

  character-entities-legacy@3.0.0:
    resolution: {integrity: sha512-RpPp0asT/6ufRm//AJVwpViZbGM/MkjQFxJccQRHmISF/22NBtsHqAWmL+/pmkPWoIUJdWyeVleTl1wydHATVQ==}

  character-entities@2.0.2:
    resolution: {integrity: sha512-shx7oQ0Awen/BRIdkjkvz54PnEEI/EjwXDSIZp86/KKdbafHh1Df/RYGBhn4hbe2+uKC9FnT5UCEdyPz3ai9hQ==}

  character-reference-invalid@2.0.1:
    resolution: {integrity: sha512-iBZ4F4wRbyORVsu0jPV7gXkOsGYjGHPmAyv+HiHG8gi5PtC9KI2j1+v8/tlibRvjoWX027ypmG/n0HtO5t7unw==}

  cheerio-select@2.1.0:
    resolution: {integrity: sha512-9v9kG0LvzrlcungtnJtpGNxY+fzECQKhK4EGJX2vByejiMX84MFNQw4UxPJl3bFbTMw+Dfs37XaIkCwTZfLh4g==}

  cheerio@1.0.0-rc.12:
    resolution: {integrity: sha512-VqR8m68vM46BNnuZ5NtnGBKIE/DfN0cRIzg9n40EIq9NOv90ayxLBXA8fXC5gquFRGJSTRqBq25Jt2ECLR431Q==}
    engines: {node: '>= 6'}

  chokidar@3.6.0:
    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
    engines: {node: '>= 8.10.0'}

  chrome-trace-event@1.0.3:
    resolution: {integrity: sha512-p3KULyQg4S7NIHixdwbGX+nFHkoBiA4YQmyWtjb8XngSKV124nJmRysgAeujbUVb15vh+RvFUfCPqU7rXk+hZg==}
    engines: {node: '>=6.0'}

  ci-info@3.9.0:
    resolution: {integrity: sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==}
    engines: {node: '>=8'}

  clean-css@5.3.3:
    resolution: {integrity: sha512-D5J+kHaVb/wKSFcyyV75uCn8fiY4sV38XJoe4CUyGQ+mOU/fMVYUdH1hJC+CJQ5uY3EnW27SbJYS4X8BiLrAFg==}
    engines: {node: '>= 10.0'}

  clean-stack@2.2.0:
    resolution: {integrity: sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A==}
    engines: {node: '>=6'}

  cli-boxes@3.0.0:
    resolution: {integrity: sha512-/lzGpEWL/8PfI0BmBOPRwp0c/wFNX1RdUML3jK/RcSBA9T8mZDdQpqYBKtCFTOfQbwPqWEOpjqW+Fnayc0969g==}
    engines: {node: '>=10'}

  cli-table3@0.6.4:
    resolution: {integrity: sha512-Lm3L0p+/npIQWNIiyF/nAn7T5dnOwR3xNTHXYEBFBFVPXzCVNZ5lqEC/1eo/EVfpDsQ1I+TX4ORPQgp+UI0CRw==}
    engines: {node: 10.* || >= 12.*}

  clone-deep@4.0.1:
    resolution: {integrity: sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==}
    engines: {node: '>=6'}

  clsx@2.1.1:
    resolution: {integrity: sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==}
    engines: {node: '>=6'}

  collapse-white-space@2.1.0:
    resolution: {integrity: sha512-loKTxY1zCOuG4j9f6EPnuyyYkf58RnhhWTvRoZEokgB+WbdXehfjFviyOVYkqzEWz1Q5kRiZdBYS5SwxbQYwzw==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  colord@2.9.3:
    resolution: {integrity: sha512-jeC1axXpnb0/2nn/Y1LPuLdgXBLH7aDcHu4KEKfqw3CUhX7ZpfBSlPKyqXE6btIgEzfWtrX3/tyBCaCvXvMkOw==}

  colorette@2.0.20:
    resolution: {integrity: sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==}

  combine-promises@1.2.0:
    resolution: {integrity: sha512-VcQB1ziGD0NXrhKxiwyNbCDmRzs/OShMs2GqW2DlU2A/Sd0nQxE1oWDAE5O0ygSx5mgQOn9eIFh7yKPgFRVkPQ==}
    engines: {node: '>=10'}

  comma-separated-tokens@2.0.3:
    resolution: {integrity: sha512-Fu4hJdvzeylCfQPp9SGWidpzrMs7tTrlu6Vb8XGaRGck8QSNZJJp538Wrb60Lax4fPwR64ViY468OIUTbRlGZg==}

  commander@10.0.1:
    resolution: {integrity: sha512-y4Mg2tXshplEbSGzx7amzPwKKOCGuoSRP/CjEdwwk0FOGlUbq6lKuoyDZTNZkmxHdJtp54hdfY/JUrdL7Xfdug==}
    engines: {node: '>=14'}

  commander@2.20.3:
    resolution: {integrity: sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==}

  commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}

  commander@5.1.0:
    resolution: {integrity: sha512-P0CysNDQ7rtVw4QIQtm+MRxV66vKFSvlsQvGYXZWR3qFU0jlMKHZZZgw8e+8DSah4UDKMqnknRDQz+xuQXQ/Zg==}
    engines: {node: '>= 6'}

  commander@7.2.0:
    resolution: {integrity: sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==}
    engines: {node: '>= 10'}

  commander@8.3.0:
    resolution: {integrity: sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==}
    engines: {node: '>= 12'}

  common-path-prefix@3.0.0:
    resolution: {integrity: sha512-QE33hToZseCH3jS0qN96O/bSh3kaw/h+Tq7ngyY9eWDUnTlTNUyqfqvCXioLe5Na5jFsL78ra/wuBU4iuEgd4w==}

  compressible@2.0.18:
    resolution: {integrity: sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==}
    engines: {node: '>= 0.6'}

  compression@1.7.4:
    resolution: {integrity: sha512-jaSIDzP9pZVS4ZfQ+TzvtiWhdpFhE2RDHz8QJkpX9SIpLq88VueF5jJw6t+6CUQcAoA6t+x89MLrWAqpfDE8iQ==}
    engines: {node: '>= 0.8.0'}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  config-chain@1.1.13:
    resolution: {integrity: sha512-qj+f8APARXHrM0hraqXYb2/bOVSV4PvJQlNZ/DVj0QrmNM2q2euizkeuVckQ57J+W0mRH6Hvi+k50M4Jul2VRQ==}

  configstore@6.0.0:
    resolution: {integrity: sha512-cD31W1v3GqUlQvbBCGcXmd2Nj9SvLDOP1oQ0YFuLETufzSPaKp11rYBsSOm7rCsW3OnIRAFM3OxRhceaXNYHkA==}
    engines: {node: '>=12'}

  connect-history-api-fallback@2.0.0:
    resolution: {integrity: sha512-U73+6lQFmfiNPrYbXqr6kZ1i1wiRqXnp2nhMsINseWXO8lDau0LGEffJ8kQi4EjLZympVgRdvqjAgiZ1tgzDDA==}
    engines: {node: '>=0.8'}

  consola@3.2.3:
    resolution: {integrity: sha512-I5qxpzLv+sJhTVEoLYNcTW+bThDCPsit0vLNKShZx6rLtpilNpmmeTPaeqJb9ZE9dV3DGaeby6Vuhrw38WjeyQ==}
    engines: {node: ^14.18.0 || >=16.10.0}

  content-disposition@0.5.2:
    resolution: {integrity: sha512-kRGRZw3bLlFISDBgwTSA1TMBFN6J6GWDeubmDE3AF+3+yXL8hTWv8r5rkLbqYXY4RjPk/EzHnClI3zQf1cFmHA==}
    engines: {node: '>= 0.6'}

  content-disposition@0.5.4:
    resolution: {integrity: sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==}
    engines: {node: '>= 0.6'}

  content-type@1.0.5:
    resolution: {integrity: sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==}
    engines: {node: '>= 0.6'}

  convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}

  cookie-signature@1.0.6:
    resolution: {integrity: sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==}

  cookie@0.6.0:
    resolution: {integrity: sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==}
    engines: {node: '>= 0.6'}

  copy-text-to-clipboard@3.2.0:
    resolution: {integrity: sha512-RnJFp1XR/LOBDckxTib5Qjr/PMfkatD0MUCQgdpqS8MdKiNUzBjAQBEN6oUy+jW7LI93BBG3DtMB2KOOKpGs2Q==}
    engines: {node: '>=12'}

  copy-webpack-plugin@11.0.0:
    resolution: {integrity: sha512-fX2MWpamkW0hZxMEg0+mYnA40LTosOSa5TqZ9GYIBzyJa9C3QUaMPSE2xAi/buNr8u89SfD9wHSQVBzrRa/SOQ==}
    engines: {node: '>= 14.15.0'}
    peerDependencies:
      webpack: ^5.1.0

  core-js-compat@3.39.0:
    resolution: {integrity: sha512-VgEUx3VwlExr5no0tXlBt+silBvhTryPwCXRI2Id1PN8WTKu7MreethvddqOubrYxkFdv/RnYrqlv1sFNAUelw==}

  core-js-pure@3.37.0:
    resolution: {integrity: sha512-d3BrpyFr5eD4KcbRvQ3FTUx/KWmaDesr7+a3+1+P46IUnNoEt+oiLijPINZMEon7w9oGkIINWxrBAU9DEciwFQ==}

  core-js@3.37.0:
    resolution: {integrity: sha512-fu5vHevQ8ZG4og+LXug8ulUtVxjOcEYvifJr7L5Bfq9GOztVqsKd9/59hUk2ZSbCrS3BqUr3EpaYGIYzq7g3Ug==}

  core-util-is@1.0.3:
    resolution: {integrity: sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==}

  cosmiconfig@6.0.0:
    resolution: {integrity: sha512-xb3ZL6+L8b9JLLCx3ZdoZy4+2ECphCMo2PwqgP1tlfVq6M6YReyzBJtvWWtbDSpNr9hn96pkCiZqUcFEc+54Qg==}
    engines: {node: '>=8'}

  cosmiconfig@8.3.6:
    resolution: {integrity: sha512-kcZ6+W5QzcJ3P1Mt+83OUv/oHFqZHIx8DuxG6eZ5RGMERoLqp4BuGjhHLYGK+Kf5XVkQvqBSmAy/nGWN3qDgEA==}
    engines: {node: '>=14'}
    peerDependencies:
      typescript: '>=4.9.5'
    peerDependenciesMeta:
      typescript:
        optional: true

  cross-spawn@7.0.3:
    resolution: {integrity: sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==}
    engines: {node: '>= 8'}

  crypto-random-string@4.0.0:
    resolution: {integrity: sha512-x8dy3RnvYdlUcPOjkEHqozhiwzKNSq7GcPuXFbnyMOCHxX8V3OgIg/pYuabl2sbUPfIJaeAQB7PMOK8DFIdoRA==}
    engines: {node: '>=12'}

  css-blank-pseudo@7.0.1:
    resolution: {integrity: sha512-jf+twWGDf6LDoXDUode+nc7ZlrqfaNphrBIBrcmeP3D8yw1uPaix1gCC8LUQUGQ6CycuK2opkbFFWFuq/a94ag==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  css-declaration-sorter@7.2.0:
    resolution: {integrity: sha512-h70rUM+3PNFuaBDTLe8wF/cdWu+dOZmb7pJt8Z2sedYbAcQVQV/tEchueg3GWxwqS0cxtbxmaHEdkNACqcvsow==}
    engines: {node: ^14 || ^16 || >=18}
    peerDependencies:
      postcss: ^8.0.9

  css-has-pseudo@7.0.1:
    resolution: {integrity: sha512-EOcoyJt+OsuKfCADgLT7gADZI5jMzIe/AeI6MeAYKiFBDmNmM7kk46DtSfMj5AohUJisqVzopBpnQTlvbyaBWg==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  css-loader@6.11.0:
    resolution: {integrity: sha512-CTJ+AEQJjq5NzLga5pE39qdiSV56F8ywCIsqNIRF0r7BDgWsN25aazToqAFg7ZrtA/U016xudB3ffgweORxX7g==}
    engines: {node: '>= 12.13.0'}
    peerDependencies:
      '@rspack/core': 0.x || 1.x
      webpack: ^5.0.0
    peerDependenciesMeta:
      '@rspack/core':
        optional: true
      webpack:
        optional: true

  css-minimizer-webpack-plugin@5.0.1:
    resolution: {integrity: sha512-3caImjKFQkS+ws1TGcFn0V1HyDJFq1Euy589JlD6/3rV2kj+w7r5G9WDMgSHvpvXHNZ2calVypZWuEDQd9wfLg==}
    engines: {node: '>= 14.15.0'}
    peerDependencies:
      '@parcel/css': '*'
      '@swc/css': '*'
      clean-css: '*'
      csso: '*'
      esbuild: '*'
      lightningcss: '*'
      webpack: ^5.0.0
    peerDependenciesMeta:
      '@parcel/css':
        optional: true
      '@swc/css':
        optional: true
      clean-css:
        optional: true
      csso:
        optional: true
      esbuild:
        optional: true
      lightningcss:
        optional: true

  css-prefers-color-scheme@10.0.0:
    resolution: {integrity: sha512-VCtXZAWivRglTZditUfB4StnsWr6YVZ2PRtuxQLKTNRdtAf8tpzaVPE9zXIF3VaSc7O70iK/j1+NXxyQCqdPjQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  css-select@4.3.0:
    resolution: {integrity: sha512-wPpOYtnsVontu2mODhA19JrqWxNsfdatRKd64kmpRbQgh1KtItko5sTnEpPdpSaJszTOhEMlF/RPz28qj4HqhQ==}

  css-select@5.1.0:
    resolution: {integrity: sha512-nwoRF1rvRRnnCqqY7updORDsuqKzqYJ28+oSMaJMMgOauh3fvwHqMS7EZpIPqK8GL+g9mKxF1vP/ZjSeNjEVHg==}

  css-tree@2.2.1:
    resolution: {integrity: sha512-OA0mILzGc1kCOCSJerOeqDxDQ4HOh+G8NbOJFOTgOCzpw7fCBubk0fEyxp8AgOL/jvLgYA/uV0cMbe43ElF1JA==}
    engines: {node: ^10 || ^12.20.0 || ^14.13.0 || >=15.0.0, npm: '>=7.0.0'}

  css-tree@2.3.1:
    resolution: {integrity: sha512-6Fv1DV/TYw//QF5IzQdqsNDjx/wc8TrMBZsqjL9eW01tWb7R7k/mq+/VXfJCl7SoD5emsJop9cOByJZfs8hYIw==}
    engines: {node: ^10 || ^12.20.0 || ^14.13.0 || >=15.0.0}

  css-what@6.1.0:
    resolution: {integrity: sha512-HTUrgRJ7r4dsZKU6GjmpfRK1O76h97Z8MfS1G0FozR+oF2kG6Vfe8JE6zwrkbxigziPHinCJ+gCPjA9EaBDtRw==}
    engines: {node: '>= 6'}

  cssdb@8.2.1:
    resolution: {integrity: sha512-KwEPys7lNsC8OjASI8RrmwOYYDcm0JOW9zQhcV83ejYcQkirTEyeAGui8aO2F5PiS6SLpxuTzl6qlMElIdsgIg==}

  cssesc@3.0.0:
    resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}
    engines: {node: '>=4'}
    hasBin: true

  cssnano-preset-advanced@6.1.2:
    resolution: {integrity: sha512-Nhao7eD8ph2DoHolEzQs5CfRpiEP0xa1HBdnFZ82kvqdmbwVBUr2r1QuQ4t1pi+D1ZpqpcO4T+wy/7RxzJ/WPQ==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  cssnano-preset-default@6.1.2:
    resolution: {integrity: sha512-1C0C+eNaeN8OcHQa193aRgYexyJtU8XwbdieEjClw+J9d94E41LwT6ivKH0WT+fYwYWB0Zp3I3IZ7tI/BbUbrg==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  cssnano-utils@4.0.2:
    resolution: {integrity: sha512-ZR1jHg+wZ8o4c3zqf1SIUSTIvm/9mU343FMR6Obe/unskbvpGhZOo1J6d/r8D1pzkRQYuwbcH3hToOuoA2G7oQ==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  cssnano@6.1.2:
    resolution: {integrity: sha512-rYk5UeX7VAM/u0lNqewCdasdtPK81CgX8wJFLEIXHbV2oldWRgJAsZrdhRXkV1NJzA2g850KiFm9mMU2HxNxMA==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  csso@5.0.5:
    resolution: {integrity: sha512-0LrrStPOdJj+SPCCrGhzryycLjwcgUSHBtxNA8aIDxf0GLsRh1cKYhB00Gd1lDOS4yGH69+SNn13+TWbVHETFQ==}
    engines: {node: ^10 || ^12.20.0 || ^14.13.0 || >=15.0.0, npm: '>=7.0.0'}

  csstype@3.1.3:
    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}

  debounce@1.2.1:
    resolution: {integrity: sha512-XRRe6Glud4rd/ZGQfiV1ruXSfbvfJedlV9Y6zOlP+2K04vBYiJEte6stfFkCP03aMnY5tsipamumUjL14fofug==}

  debug@2.6.9:
    resolution: {integrity: sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.3.4:
    resolution: {integrity: sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  decode-named-character-reference@1.0.2:
    resolution: {integrity: sha512-O8x12RzrUF8xyVcY0KJowWsmaJxQbmy0/EtnNtHRpsOcT7dFk5W598coHqBVpmWo1oQQfsCqfCmkZN5DJrZVdg==}

  decompress-response@6.0.0:
    resolution: {integrity: sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==}
    engines: {node: '>=10'}

  deep-extend@0.6.0:
    resolution: {integrity: sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==}
    engines: {node: '>=4.0.0'}

  deepmerge@4.3.1:
    resolution: {integrity: sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==}
    engines: {node: '>=0.10.0'}

  default-gateway@6.0.3:
    resolution: {integrity: sha512-fwSOJsbbNzZ/CUFpqFBqYfYNLj1NbMPm8MMCIzHjC83iSJRBEGmDUxU+WP661BaBQImeC2yHwXtz+P/O9o+XEg==}
    engines: {node: '>= 10'}

  defer-to-connect@2.0.1:
    resolution: {integrity: sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==}
    engines: {node: '>=10'}

  define-data-property@1.1.4:
    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
    engines: {node: '>= 0.4'}

  define-lazy-prop@2.0.0:
    resolution: {integrity: sha512-Ds09qNh8yw3khSjiJjiUInaGX9xlqZDY7JVryGxdxV7NPeuqQfplOpQ66yJFZut3jLa5zOwkXw1g9EI2uKh4Og==}
    engines: {node: '>=8'}

  define-properties@1.2.1:
    resolution: {integrity: sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==}
    engines: {node: '>= 0.4'}

  del@6.1.1:
    resolution: {integrity: sha512-ua8BhapfP0JUJKC/zV9yHHDW/rDoDxP4Zhn3AkA6/xT6gY7jYXJiaeyBZznYVujhZZET+UgcbZiQ7sN3WqcImg==}
    engines: {node: '>=10'}

  depd@1.1.2:
    resolution: {integrity: sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==}
    engines: {node: '>= 0.6'}

  depd@2.0.0:
    resolution: {integrity: sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==}
    engines: {node: '>= 0.8'}

  dequal@2.0.3:
    resolution: {integrity: sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==}
    engines: {node: '>=6'}

  destroy@1.2.0:
    resolution: {integrity: sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==}
    engines: {node: '>= 0.8', npm: 1.2.8000 || >= 1.4.16}

  detect-node@2.1.0:
    resolution: {integrity: sha512-T0NIuQpnTvFDATNuHN5roPwSBG83rFsuO+MXXH9/3N1eFbn4wcPjttvjMLEPWJ0RGUYgQE7cGgS3tNxbqCGM7g==}

  detect-port-alt@1.1.6:
    resolution: {integrity: sha512-5tQykt+LqfJFBEYaDITx7S7cR7mJ/zQmLXZ2qt5w04ainYZw6tBf9dBunMjVeVOdYVRUzUOE4HkY5J7+uttb5Q==}
    engines: {node: '>= 4.2.1'}
    hasBin: true

  detect-port@1.5.1:
    resolution: {integrity: sha512-aBzdj76lueB6uUst5iAs7+0H/oOjqI5D16XUWxlWMIMROhcM0rfsNVk93zTngq1dDNpoXRr++Sus7ETAExppAQ==}
    hasBin: true

  devlop@1.1.0:
    resolution: {integrity: sha512-RWmIqhcFf1lRYBvNmr7qTNuyCt/7/ns2jbpp1+PalgE/rDQcBT0fioSMUpJ93irlUhC5hrg4cYqe6U+0ImW0rA==}

  didyoumean@1.2.2:
    resolution: {integrity: sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==}

  dir-glob@3.0.1:
    resolution: {integrity: sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==}
    engines: {node: '>=8'}

  dlv@1.1.3:
    resolution: {integrity: sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==}

  dns-packet@5.6.1:
    resolution: {integrity: sha512-l4gcSouhcgIKRvyy99RNVOgxXiicE+2jZoNmaNmZ6JXiGajBOJAesk1OBlJuM5k2c+eudGdLxDqXuPCKIj6kpw==}
    engines: {node: '>=6'}

  dom-converter@0.2.0:
    resolution: {integrity: sha512-gd3ypIPfOMr9h5jIKq8E3sHOTCjeirnl0WK5ZdS1AW0Odt0b1PaWaHdJ4Qk4klv+YB9aJBS7mESXjFoDQPu6DA==}

  dom-serializer@1.4.1:
    resolution: {integrity: sha512-VHwB3KfrcOOkelEG2ZOfxqLZdfkil8PtJi4P8N2MMXucZq2yLp75ClViUlOVwyoHEDjYU433Aq+5zWP61+RGag==}

  dom-serializer@2.0.0:
    resolution: {integrity: sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==}

  domelementtype@2.3.0:
    resolution: {integrity: sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==}

  domhandler@4.3.1:
    resolution: {integrity: sha512-GrwoxYN+uWlzO8uhUXRl0P+kHE4GtVPfYzVLcUxPL7KNdHKj66vvlhiweIHqYYXWlw+T8iLMp42Lm67ghw4WMQ==}
    engines: {node: '>= 4'}

  domhandler@5.0.3:
    resolution: {integrity: sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==}
    engines: {node: '>= 4'}

  domutils@2.8.0:
    resolution: {integrity: sha512-w96Cjofp72M5IIhpjgobBimYEfoPjx1Vx0BSX9P30WBdZW2WIKU0T1Bd0kz2eNZ9ikjKgHbEyKx8BB6H1L3h3A==}

  domutils@3.1.0:
    resolution: {integrity: sha512-H78uMmQtI2AhgDJjWeQmHwJJ2bLPD3GMmO7Zja/ZZh84wkm+4ut+IUnUdRa8uCGX88DiVx1j6FRe1XfxEgjEZA==}

  dot-case@3.0.4:
    resolution: {integrity: sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==}

  dot-prop@6.0.1:
    resolution: {integrity: sha512-tE7ztYzXHIeyvc7N+hR3oi7FIbf/NIjVP9hmAt3yMXzrQ072/fpjGLx2GxNxGxUl5V73MEqYzioOMoVhGMJ5cA==}
    engines: {node: '>=10'}

  duplexer@0.1.2:
    resolution: {integrity: sha512-jtD6YG370ZCIi/9GTaJKQxWTZD045+4R4hTk/x1UyoqadyJ9x9CgSi1RlVDQF8U2sxLLSnFkCaMihqljHIWgMg==}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  ee-first@1.1.1:
    resolution: {integrity: sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==}

  electron-to-chromium@1.5.6:
    resolution: {integrity: sha512-jwXWsM5RPf6j9dPYzaorcBSUg6AiqocPEyMpkchkvntaH9HGfOOMZwxMJjDY/XEs3T5dM7uyH1VhRMkqUU9qVw==}

  electron-to-chromium@1.5.63:
    resolution: {integrity: sha512-ddeXKuY9BHo/mw145axlyWjlJ1UBt4WK3AlvkT7W2AbqfRQoacVoRUCF6wL3uIx/8wT9oLKXzI+rFqHHscByaA==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  emojilib@2.4.0:
    resolution: {integrity: sha512-5U0rVMU5Y2n2+ykNLQqMoqklN9ICBT/KsvC1Gz6vqHbz2AXXGkG+Pm5rMWk/8Vjrr/mY9985Hi8DYzn1F09Nyw==}

  emojis-list@3.0.0:
    resolution: {integrity: sha512-/kyM18EfinwXZbno9FyUGeFh87KC8HRQBQGildHZbEuRyWFOmv1U10o9BBp8XVZDVNNuQKyIGIu5ZYAAXJ0V2Q==}
    engines: {node: '>= 4'}

  emoticon@4.0.1:
    resolution: {integrity: sha512-dqx7eA9YaqyvYtUhJwT4rC1HIp82j5ybS1/vQ42ur+jBe17dJMwZE4+gvL1XadSFfxaPFFGt3Xsw+Y8akThDlw==}

  encodeurl@1.0.2:
    resolution: {integrity: sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==}
    engines: {node: '>= 0.8'}

  enhanced-resolve@5.17.1:
    resolution: {integrity: sha512-LMHl3dXhTcfv8gM4kEzIUeTQ+7fpdA0l2tUf34BddXPkz2A5xJ5L/Pchd5BL6rdccM9QGvu0sWZzK1Z1t4wwyg==}
    engines: {node: '>=10.13.0'}

  entities@2.2.0:
    resolution: {integrity: sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==}

  entities@4.5.0:
    resolution: {integrity: sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==}
    engines: {node: '>=0.12'}

  error-ex@1.3.2:
    resolution: {integrity: sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==}

  es-define-property@1.0.0:
    resolution: {integrity: sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-module-lexer@1.5.0:
    resolution: {integrity: sha512-pqrTKmwEIgafsYZAGw9kszYzmagcE/n4dbgwGWLEXg7J4QFJVQRBld8j3Q3GNez79jzxZshq0bcT962QHOghjw==}

  escalade@3.1.2:
    resolution: {integrity: sha512-ErCHMCae19vR8vQGe50xIsVomy19rg6gFu3+r3jkEO46suLMWBksvVyoGgQV+jOfl84ZSOSlmv6Gxa89PmTGmA==}
    engines: {node: '>=6'}

  escalade@3.2.0:
    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
    engines: {node: '>=6'}

  escape-goat@4.0.0:
    resolution: {integrity: sha512-2Sd4ShcWxbx6OY1IHyla/CVNwvg7XwZVoXZHcSu9w9SReNP1EzzD5T8NWKIR38fIqEns9kDWKUQTXXAmlDrdPg==}
    engines: {node: '>=12'}

  escape-html@1.0.3:
    resolution: {integrity: sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==}

  escape-string-regexp@1.0.5:
    resolution: {integrity: sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==}
    engines: {node: '>=0.8.0'}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  escape-string-regexp@5.0.0:
    resolution: {integrity: sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==}
    engines: {node: '>=12'}

  eslint-scope@5.1.1:
    resolution: {integrity: sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==}
    engines: {node: '>=8.0.0'}

  esprima@4.0.1:
    resolution: {integrity: sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==}
    engines: {node: '>=4'}
    hasBin: true

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@4.3.0:
    resolution: {integrity: sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  estree-util-attach-comments@3.0.0:
    resolution: {integrity: sha512-cKUwm/HUcTDsYh/9FgnuFqpfquUbwIqwKM26BVCGDPVgvaCl/nDCCjUfiLlx6lsEZ3Z4RFxNbOQ60pkaEwFxGw==}

  estree-util-build-jsx@3.0.1:
    resolution: {integrity: sha512-8U5eiL6BTrPxp/CHbs2yMgP8ftMhR5ww1eIKoWRMlqvltHF8fZn5LRDvTKuxD3DUn+shRbLGqXemcP51oFCsGQ==}

  estree-util-is-identifier-name@3.0.0:
    resolution: {integrity: sha512-hFtqIDZTIUZ9BXLb8y4pYGyk6+wekIivNVTcmvk8NoOh+VeRn5y6cEHzbURrWbfp1fIqdVipilzj+lfaadNZmg==}

  estree-util-to-js@2.0.0:
    resolution: {integrity: sha512-WDF+xj5rRWmD5tj6bIqRi6CkLIXbbNQUcxQHzGysQzvHmdYG2G7p/Tf0J0gpxGgkeMZNTIjT/AoSvC9Xehcgdg==}

  estree-util-value-to-estree@3.1.1:
    resolution: {integrity: sha512-5mvUrF2suuv5f5cGDnDphIy4/gW86z82kl5qG6mM9z04SEQI4FB5Apmaw/TGEf3l55nLtMs5s51dmhUzvAHQCA==}

  estree-util-visit@2.0.0:
    resolution: {integrity: sha512-m5KgiH85xAhhW8Wta0vShLcUvOsh3LLPI2YVwcbio1l7E09NTLL1EyMZFM1OyWowoH0skScNbhOPl4kcBgzTww==}

  estree-walker@3.0.3:
    resolution: {integrity: sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  eta@2.2.0:
    resolution: {integrity: sha512-UVQ72Rqjy/ZKQalzV5dCCJP80GrmPrMxh6NlNf+erV6ObL0ZFkhCstWRawS85z3smdr3d2wXPsZEY7rDPfGd2g==}
    engines: {node: '>=6.0.0'}

  etag@1.8.1:
    resolution: {integrity: sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==}
    engines: {node: '>= 0.6'}

  eval@0.1.8:
    resolution: {integrity: sha512-EzV94NYKoO09GLXGjXj9JIlXijVck4ONSr5wiCWDvhsvj5jxSrzTmRU/9C1DyB6uToszLs8aifA6NQ7lEQdvFw==}
    engines: {node: '>= 0.8'}

  eventemitter3@4.0.7:
    resolution: {integrity: sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==}

  events@3.3.0:
    resolution: {integrity: sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==}
    engines: {node: '>=0.8.x'}

  execa@5.1.1:
    resolution: {integrity: sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==}
    engines: {node: '>=10'}

  express@4.19.2:
    resolution: {integrity: sha512-5T6nhjsT+EOMzuck8JjBHARTHfMht0POzlA60WV2pMD3gyXw2LZnZ+ueGdNxG+0calOJcWKbpFcuzLZ91YWq9Q==}
    engines: {node: '>= 0.10.0'}

  extend-shallow@2.0.1:
    resolution: {integrity: sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==}
    engines: {node: '>=0.10.0'}

  extend@3.0.2:
    resolution: {integrity: sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-glob@3.3.2:
    resolution: {integrity: sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fastq@1.17.1:
    resolution: {integrity: sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==}

  fault@2.0.1:
    resolution: {integrity: sha512-WtySTkS4OKev5JtpHXnib4Gxiurzh5NCGvWrFaZ34m6JehfTUhKZvn9njTfw48t6JumVQOmrKqpmGcdwxnhqBQ==}

  faye-websocket@0.11.4:
    resolution: {integrity: sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==}
    engines: {node: '>=0.8.0'}

  feed@4.2.2:
    resolution: {integrity: sha512-u5/sxGfiMfZNtJ3OvQpXcvotFpYkL0n9u9mM2vkui2nGo8b4wvDkJ8gAkYqbA8QpGyFCv3RK0Z+Iv+9veCS9bQ==}
    engines: {node: '>=0.4.0'}

  figures@3.2.0:
    resolution: {integrity: sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg==}
    engines: {node: '>=8'}

  file-loader@6.2.0:
    resolution: {integrity: sha512-qo3glqyTa61Ytg4u73GultjHGjdRyig3tG6lPtyX/jOEJvHif9uB0/OCI2Kif6ctF3caQTW2G5gym21oAsI4pw==}
    engines: {node: '>= 10.13.0'}
    peerDependencies:
      webpack: ^4.0.0 || ^5.0.0

  filesize@8.0.7:
    resolution: {integrity: sha512-pjmC+bkIF8XI7fWaH8KxHcZL3DPybs1roSKP4rKDvy20tAWwIObE4+JIseG2byfGKhud5ZnM4YSGKBz7Sh0ndQ==}
    engines: {node: '>= 0.4.0'}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  finalhandler@1.2.0:
    resolution: {integrity: sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==}
    engines: {node: '>= 0.8'}

  find-cache-dir@4.0.0:
    resolution: {integrity: sha512-9ZonPT4ZAK4a+1pUPVPZJapbi7O5qbbJPdYw/NOQWZZbVLdDTYM3A4R9z/DpAM08IDaFGsvPgiGZ82WEwUDWjg==}
    engines: {node: '>=14.16'}

  find-up@3.0.0:
    resolution: {integrity: sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==}
    engines: {node: '>=6'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  find-up@6.3.0:
    resolution: {integrity: sha512-v2ZsoEuVHYy8ZIlYqwPe/39Cy+cFDzp4dXPaxNvkEuouymu+2Jbz0PxpKarJHYJTmv2HWT3O382qY8l4jMWthw==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  flat@5.0.2:
    resolution: {integrity: sha512-b6suED+5/3rTpUBdG1gupIl8MPFCAMA0QXwmljLhvCUKcUvdE4gWky9zpuGCcXHOsz4J9wPGNWq6OKpmIzz3hQ==}
    hasBin: true

  follow-redirects@1.15.6:
    resolution: {integrity: sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  foreground-child@3.1.1:
    resolution: {integrity: sha512-TMKDUnIte6bfb5nWv7V/caI169OHgvwjb7V4WkeUvbQQdjr5rWKqHFiKWb/fcOwB+CzBT+qbWjvj+DVwRskpIg==}
    engines: {node: '>=14'}

  fork-ts-checker-webpack-plugin@6.5.3:
    resolution: {integrity: sha512-SbH/l9ikmMWycd5puHJKTkZJKddF4iRLyW3DeZ08HTI7NGyLS38MXd/KGgeWumQO7YNQbW2u/NtPT2YowbPaGQ==}
    engines: {node: '>=10', yarn: '>=1.0.0'}
    peerDependencies:
      eslint: '>= 6'
      typescript: '>= 2.7'
      vue-template-compiler: '*'
      webpack: '>= 4'
    peerDependenciesMeta:
      eslint:
        optional: true
      vue-template-compiler:
        optional: true

  form-data-encoder@2.1.4:
    resolution: {integrity: sha512-yDYSgNMraqvnxiEXO4hi88+YZxaHC6QKzb5N84iRCTDeRO7ZALpir/lVmf/uXUhnwUr2O4HU8s/n6x+yNjQkHw==}
    engines: {node: '>= 14.17'}

  format@0.2.2:
    resolution: {integrity: sha512-wzsgA6WOq+09wrU1tsJ09udeR/YZRaeArL9e1wPbFg3GG2yDnC2ldKpxs4xunpFF9DgqCqOIra3bc1HWrJ37Ww==}
    engines: {node: '>=0.4.x'}

  forwarded@0.2.0:
    resolution: {integrity: sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==}
    engines: {node: '>= 0.6'}

  fraction.js@4.3.7:
    resolution: {integrity: sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==}

  fresh@0.5.2:
    resolution: {integrity: sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==}
    engines: {node: '>= 0.6'}

  fs-extra@11.2.0:
    resolution: {integrity: sha512-PmDi3uwK5nFuXh7XDTlVnS17xJS7vW36is2+w3xcv8SVxiB4NyATf4ctkVY5bkSjX0Y4nbvZCq1/EjtEyr9ktw==}
    engines: {node: '>=14.14'}

  fs-extra@9.1.0:
    resolution: {integrity: sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==}
    engines: {node: '>=10'}

  fs-monkey@1.0.5:
    resolution: {integrity: sha512-8uMbBjrhzW76TYgEV27Y5E//W2f/lTFmx78P2w19FZSxarhI/798APGQyuGCwmkNxgwGRhrLfvWyLBvNtuOmew==}

  fs.realpath@1.0.0:
    resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}

  get-intrinsic@1.2.4:
    resolution: {integrity: sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==}
    engines: {node: '>= 0.4'}

  get-own-enumerable-property-symbols@3.0.2:
    resolution: {integrity: sha512-I0UBV/XOz1XkIJHEUDMZAbzCThU/H8DxmSfmdGcKPnVhu2VfFqr34jr9777IyaTYvxjedWhqVIilEDsCdP5G6g==}

  get-stream@6.0.1:
    resolution: {integrity: sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==}
    engines: {node: '>=10'}

  github-slugger@1.5.0:
    resolution: {integrity: sha512-wIh+gKBI9Nshz2o46B0B3f5k/W+WI9ZAv6y5Dn5WJ5SK1t0TnDimB4WE5rmTD05ZAIn8HALCZVmCsvj0w0v0lw==}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob-to-regexp@0.4.1:
    resolution: {integrity: sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==}

  glob@10.3.12:
    resolution: {integrity: sha512-TCNv8vJ+xz4QiqTpfOJA7HvYv+tNIRHKfUWw/q+v2jdgN4ebz+KY9tGx5J4rHP0o84mNP+ApH66HRX8us3Khqg==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  glob@7.2.3:
    resolution: {integrity: sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==}
    deprecated: Glob versions prior to v9 are no longer supported

  global-dirs@3.0.1:
    resolution: {integrity: sha512-NBcGGFbBA9s1VzD41QXDG+3++t9Mn5t1FpLdhESY6oKY4gYTFpX4wO3sqGUa0Srjtbfj3szX0RnemmrVRUdULA==}
    engines: {node: '>=10'}

  global-modules@2.0.0:
    resolution: {integrity: sha512-NGbfmJBp9x8IxyJSd1P+otYK8vonoJactOogrVfFRIAEY1ukil8RSKDz2Yo7wh1oihl51l/r6W4epkeKJHqL8A==}
    engines: {node: '>=6'}

  global-prefix@3.0.0:
    resolution: {integrity: sha512-awConJSVCHVGND6x3tmMaKcQvwXLhjdkmomy2W+Goaui8YPgYgXJZewhg3fWC+DlfqqQuWg8AwqjGTD2nAPVWg==}
    engines: {node: '>=6'}

  globals@11.12.0:
    resolution: {integrity: sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==}
    engines: {node: '>=4'}

  globby@11.1.0:
    resolution: {integrity: sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==}
    engines: {node: '>=10'}

  globby@13.2.2:
    resolution: {integrity: sha512-Y1zNGV+pzQdh7H39l9zgB4PJqjRNqydvdYCDG4HFXM4XuvSaQQlEc91IU1yALL8gUTDomgBAfz3XJdmUS+oo0w==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  gopd@1.0.1:
    resolution: {integrity: sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==}

  got@12.6.1:
    resolution: {integrity: sha512-mThBblvlAF1d4O5oqyvN+ZxLAYwIJK7bpMxgYqPD9okW0C3qm5FFn7k811QrcuEBwaogR3ngOFoCfs6mRv7teQ==}
    engines: {node: '>=14.16'}

  graceful-fs@4.2.10:
    resolution: {integrity: sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA==}

  graceful-fs@4.2.11:
    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}

  gray-matter@4.0.3:
    resolution: {integrity: sha512-5v6yZd4JK3eMI3FqqCouswVqwugaA9r4dNZB1wwcmrD02QkV5H0y7XBQW8QwQqEaZY1pM9aqORSORhJRdNK44Q==}
    engines: {node: '>=6.0'}

  gzip-size@6.0.0:
    resolution: {integrity: sha512-ax7ZYomf6jqPTQ4+XCpUGyXKHk5WweS+e05MBO4/y3WJ5RkmPXNKvX+bx1behVILVwr6JSQvZAku021CHPXG3Q==}
    engines: {node: '>=10'}

  handle-thing@2.0.1:
    resolution: {integrity: sha512-9Qn4yBxelxoh2Ow62nP+Ka/kMnOXRi8BXnRaUwezLNhqelnN49xKz4F/dPP8OYLxLxq6JDtZb2i9XznUQbNPTg==}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has-property-descriptors@1.0.2:
    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}

  has-proto@1.0.3:
    resolution: {integrity: sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==}
    engines: {node: '>= 0.4'}

  has-symbols@1.0.3:
    resolution: {integrity: sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==}
    engines: {node: '>= 0.4'}

  has-yarn@3.0.0:
    resolution: {integrity: sha512-IrsVwUHhEULx3R8f/aA8AHuEzAorplsab/v8HBzEiIukwq5i/EC+xmOW+HfP1OaDP+2JkgT1yILHN2O3UFIbcA==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  hast-util-from-parse5@8.0.1:
    resolution: {integrity: sha512-Er/Iixbc7IEa7r/XLtuG52zoqn/b3Xng/w6aZQ0xGVxzhw5xUFxcRqdPzP6yFi/4HBYRaifaI5fQ1RH8n0ZeOQ==}

  hast-util-parse-selector@4.0.0:
    resolution: {integrity: sha512-wkQCkSYoOGCRKERFWcxMVMOcYE2K1AaNLU8DXS9arxnLOUEWbOXKXiJUNzEpqZ3JOKpnha3jkFrumEjVliDe7A==}

  hast-util-raw@9.0.2:
    resolution: {integrity: sha512-PldBy71wO9Uq1kyaMch9AHIghtQvIwxBUkv823pKmkTM3oV1JxtsTNYdevMxvUHqcnOAuO65JKU2+0NOxc2ksA==}

  hast-util-to-estree@3.1.0:
    resolution: {integrity: sha512-lfX5g6hqVh9kjS/B9E2gSkvHH4SZNiQFiqWS0x9fENzEl+8W12RqdRxX6d/Cwxi30tPQs3bIO+aolQJNp1bIyw==}

  hast-util-to-jsx-runtime@2.3.0:
    resolution: {integrity: sha512-H/y0+IWPdsLLS738P8tDnrQ8Z+dj12zQQ6WC11TIM21C8WFVoIxcqWXf2H3hiTVZjF1AWqoimGwrTWecWrnmRQ==}

  hast-util-to-parse5@8.0.0:
    resolution: {integrity: sha512-3KKrV5ZVI8if87DVSi1vDeByYrkGzg4mEfeu4alwgmmIeARiBLKCZS2uw5Gb6nU9x9Yufyj3iudm6i7nl52PFw==}

  hast-util-whitespace@3.0.0:
    resolution: {integrity: sha512-88JUN06ipLwsnv+dVn+OIYOvAuvBMy/Qoi6O7mQHxdPXpjy+Cd6xRkWwux7DKO+4sYILtLBRIKgsdpS2gQc7qw==}

  hastscript@8.0.0:
    resolution: {integrity: sha512-dMOtzCEd3ABUeSIISmrETiKuyydk1w0pa+gE/uormcTpSYuaNJPbX1NU3JLyscSLjwAQM8bWMhhIlnCqnRvDTw==}

  he@1.2.0:
    resolution: {integrity: sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==}
    hasBin: true

  history@4.10.1:
    resolution: {integrity: sha512-36nwAD620w12kuzPAsyINPWJqlNbij+hpK1k9XRloDtym8mxzGYl2c17LnV6IAGB2Dmg4tEa7G7DlawS0+qjew==}

  hoist-non-react-statics@3.3.2:
    resolution: {integrity: sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==}

  hpack.js@2.1.6:
    resolution: {integrity: sha512-zJxVehUdMGIKsRaNt7apO2Gqp0BdqW5yaiGHXXmbpvxgBYVZnAql+BJb4RO5ad2MgpbZKn5G6nMnegrH1FcNYQ==}

  html-entities@2.5.2:
    resolution: {integrity: sha512-K//PSRMQk4FZ78Kyau+mZurHn3FH0Vwr+H36eE0rPbeYkRRi9YxceYPhuN60UwWorxyKHhqoAJl2OFKa4BVtaA==}

  html-escaper@2.0.2:
    resolution: {integrity: sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==}

  html-minifier-terser@6.1.0:
    resolution: {integrity: sha512-YXxSlJBZTP7RS3tWnQw74ooKa6L9b9i9QYXY21eUEvhZ3u9XLfv6OnFsQq6RxkhHygsaUMvYsZRV5rU/OVNZxw==}
    engines: {node: '>=12'}
    hasBin: true

  html-minifier-terser@7.2.0:
    resolution: {integrity: sha512-tXgn3QfqPIpGl9o+K5tpcj3/MN4SfLtsx2GWwBC3SSd0tXQGyF3gsSqad8loJgKZGM3ZxbYDd5yhiBIdWpmvLA==}
    engines: {node: ^14.13.1 || >=16.0.0}
    hasBin: true

  html-tags@3.3.1:
    resolution: {integrity: sha512-ztqyC3kLto0e9WbNp0aeP+M3kTt+nbaIveGmUxAtZa+8iFgKLUOD4YKM5j+f3QD89bra7UeumolZHKuOXnTmeQ==}
    engines: {node: '>=8'}

  html-void-elements@3.0.0:
    resolution: {integrity: sha512-bEqo66MRXsUGxWHV5IP0PUiAWwoEjba4VCzg0LjFJBpchPaTfyfCKTG6bc5F8ucKec3q5y6qOdGyYTSBEvhCrg==}

  html-webpack-plugin@5.6.0:
    resolution: {integrity: sha512-iwaY4wzbe48AfKLZ/Cc8k0L+FKG6oSNRaZ8x5A/T/IVDGyXcbHncM9TdDa93wn0FsSm82FhTKW7f3vS61thXAw==}
    engines: {node: '>=10.13.0'}
    peerDependencies:
      '@rspack/core': 0.x || 1.x
      webpack: ^5.20.0
    peerDependenciesMeta:
      '@rspack/core':
        optional: true
      webpack:
        optional: true

  htmlparser2@6.1.0:
    resolution: {integrity: sha512-gyyPk6rgonLFEDGoeRgQNaEUvdJ4ktTmmUh/h2t7s+M8oPpIPxgNACWa+6ESR57kXstwqPiCut0V8NRpcwgU7A==}

  htmlparser2@8.0.2:
    resolution: {integrity: sha512-GYdjWKDkbRLkZ5geuHs5NY1puJ+PXwP7+fHPRz06Eirsb9ugf6d8kkXav6ADhcODhFFPMIXyxkxSuMf3D6NCFA==}

  http-cache-semantics@4.1.1:
    resolution: {integrity: sha512-er295DKPVsV82j5kw1Gjt+ADA/XYHsajl82cGNQG2eyoPkvgUhX+nDIyelzhIWbbsXP39EHcI6l5tYs2FYqYXQ==}

  http-deceiver@1.2.7:
    resolution: {integrity: sha512-LmpOGxTfbpgtGVxJrj5k7asXHCgNZp5nLfp+hWc8QQRqtb7fUy6kRY3BO1h9ddF6yIPYUARgxGOwB42DnxIaNw==}

  http-errors@1.6.3:
    resolution: {integrity: sha512-lks+lVC8dgGyh97jxvxeYTWQFvh4uw4yC12gVl63Cg30sjPX4wuGcdkICVXDAESr6OJGjqGA8Iz5mkeN6zlD7A==}
    engines: {node: '>= 0.6'}

  http-errors@2.0.0:
    resolution: {integrity: sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==}
    engines: {node: '>= 0.8'}

  http-parser-js@0.5.8:
    resolution: {integrity: sha512-SGeBX54F94Wgu5RH3X5jsDtf4eHyRogWX1XGT3b4HuW3tQPM4AaBzoUji/4AAJNXCEOWZ5O0DgZmJw1947gD5Q==}

  http-proxy-middleware@2.0.6:
    resolution: {integrity: sha512-ya/UeJ6HVBYxrgYotAZo1KvPWlgB48kUJLDePFeneHsVujFaW5WNj2NgWCAE//B1Dl02BIfYlpNgBy8Kf8Rjmw==}
    engines: {node: '>=12.0.0'}
    peerDependencies:
      '@types/express': ^4.17.13
    peerDependenciesMeta:
      '@types/express':
        optional: true

  http-proxy@1.18.1:
    resolution: {integrity: sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==}
    engines: {node: '>=8.0.0'}

  http2-wrapper@2.2.1:
    resolution: {integrity: sha512-V5nVw1PAOgfI3Lmeaj2Exmeg7fenjhRUgz1lPSezy1CuhPYbgQtbQj4jZfEAEMlaL+vupsvhjqCyjzob0yxsmQ==}
    engines: {node: '>=10.19.0'}

  human-signals@2.1.0:
    resolution: {integrity: sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==}
    engines: {node: '>=10.17.0'}

  iconv-lite@0.4.24:
    resolution: {integrity: sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==}
    engines: {node: '>=0.10.0'}

  icss-utils@5.1.0:
    resolution: {integrity: sha512-soFhflCVWLfRNOPU3iv5Z9VUdT44xFRbzjLsEzSr5AQmgqPMTHdU3PMT1Cf1ssx8fLNJDA1juftYl+PUcv3MqA==}
    engines: {node: ^10 || ^12 || >= 14}
    peerDependencies:
      postcss: ^8.1.0

  ignore@5.3.1:
    resolution: {integrity: sha512-5Fytz/IraMjqpwfd34ke28PTVMjZjJG2MPn5t7OE4eUCUNf8BAa7b5WUS9/Qvr6mwOQS7Mk6vdsMno5he+T8Xw==}
    engines: {node: '>= 4'}

  image-size@1.1.1:
    resolution: {integrity: sha512-541xKlUw6jr/6gGuk92F+mYM5zaFAc5ahphvkqvNe2bQ6gVBkd6bfrmVJ2t4KDAfikAYZyIqTnktX3i6/aQDrQ==}
    engines: {node: '>=16.x'}
    hasBin: true

  immer@9.0.21:
    resolution: {integrity: sha512-bc4NBHqOqSfRW7POMkHd51LvClaeMXpm8dx0e8oE2GORbq5aRK7Bxl4FyzVLdGtLmvLKL7BTDBG5ACQm4HWjTA==}

  import-fresh@3.3.0:
    resolution: {integrity: sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==}
    engines: {node: '>=6'}

  import-lazy@4.0.0:
    resolution: {integrity: sha512-rKtvo6a868b5Hu3heneU+L4yEQ4jYKLtjpnPeUdK7h0yzXGmyBTypknlkCvHFBqfX9YlorEiMM6Dnq/5atfHkw==}
    engines: {node: '>=8'}

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  indent-string@4.0.0:
    resolution: {integrity: sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==}
    engines: {node: '>=8'}

  infima@0.2.0-alpha.45:
    resolution: {integrity: sha512-uyH0zfr1erU1OohLk0fT4Rrb94AOhguWNOcD9uGrSpRvNB+6gZXUoJX5J0NtvzBO10YZ9PgvA4NFgt+fYg8ojw==}
    engines: {node: '>=12'}

  inflight@1.0.6:
    resolution: {integrity: sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==}
    deprecated: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.

  inherits@2.0.3:
    resolution: {integrity: sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw==}

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  ini@1.3.8:
    resolution: {integrity: sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==}

  ini@2.0.0:
    resolution: {integrity: sha512-7PnF4oN3CvZF23ADhA5wRaYEQpJ8qygSkbtTXWBeXWXmEVRXK+1ITciHWwHhsjv1TmW0MgacIv6hEi5pX5NQdA==}
    engines: {node: '>=10'}

  inline-style-parser@0.1.1:
    resolution: {integrity: sha512-7NXolsK4CAS5+xvdj5OMMbI962hU/wvwoxk+LWR9Ek9bVtyuuYScDN6eS0rUm6TxApFpw7CX1o4uJzcd4AyD3Q==}

  inline-style-parser@0.2.3:
    resolution: {integrity: sha512-qlD8YNDqyTKTyuITrDOffsl6Tdhv+UC4hcdAVuQsK4IMQ99nSgd1MIA/Q+jQYoh9r3hVUXhYh7urSRmXPkW04g==}

  interpret@1.4.0:
    resolution: {integrity: sha512-agE4QfB2Lkp9uICn7BAqoscw4SZP9kTE2hxiFI3jBPmXJfdqiahTbUuKGsMoN2GtqL9AxhYioAcVvgsb1HvRbA==}
    engines: {node: '>= 0.10'}

  invariant@2.2.4:
    resolution: {integrity: sha512-phJfQVBuaJM5raOpJjSfkiD6BpbCE4Ns//LaXl6wGYtUBY83nWS6Rf9tXm2e8VaK60JEjYldbPif/A2B1C2gNA==}

  ipaddr.js@1.9.1:
    resolution: {integrity: sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==}
    engines: {node: '>= 0.10'}

  ipaddr.js@2.2.0:
    resolution: {integrity: sha512-Ag3wB2o37wslZS19hZqorUnrnzSkpOVy+IiiDEiTqNubEYpYuHWIf6K4psgN2ZWKExS4xhVCrRVfb/wfW8fWJA==}
    engines: {node: '>= 10'}

  is-alphabetical@2.0.1:
    resolution: {integrity: sha512-FWyyY60MeTNyeSRpkM2Iry0G9hpr7/9kD40mD/cGQEuilcZYS4okz8SN2Q6rLCJ8gbCt6fN+rC+6tMGS99LaxQ==}

  is-alphanumerical@2.0.1:
    resolution: {integrity: sha512-hmbYhX/9MUMF5uh7tOXyK/n0ZvWpad5caBA17GsC6vyuCqaWliRG5K1qS9inmUhEMaOBIW7/whAnSwveW/LtZw==}

  is-arrayish@0.2.1:
    resolution: {integrity: sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-ci@3.0.1:
    resolution: {integrity: sha512-ZYvCgrefwqoQ6yTyYUbQu64HsITZ3NfKX1lzaEYdkTDcfKzzCI/wthRRYKkdjHKFVgNiXKAKm65Zo1pk2as/QQ==}
    hasBin: true

  is-core-module@2.13.1:
    resolution: {integrity: sha512-hHrIjvZsftOsvKSn2TRYl63zvxsgE0K+0mYMoH6gD4omR5IWB2KynivBQczo3+wF1cCkjzvptnI9Q0sPU66ilw==}

  is-decimal@2.0.1:
    resolution: {integrity: sha512-AAB9hiomQs5DXWcRB1rqsxGUstbRroFOPPVAomNk/3XHR5JyEZChOyTWe2oayKnsSsr/kcGqF+z6yuH6HHpN0A==}

  is-docker@2.2.1:
    resolution: {integrity: sha512-F+i2BKsFrH66iaUFc0woD8sLy8getkwTwtOBjvs56Cx4CgJDeKQeqfz8wAYiSb8JOprWhHH5p77PbmYCvvUuXQ==}
    engines: {node: '>=8'}
    hasBin: true

  is-extendable@0.1.1:
    resolution: {integrity: sha512-5BMULNob1vgFX6EjQw5izWDxrecWK9AM72rugNr0TFldMOi0fj6Jk+zeKIt0xGj4cEfQIJth4w3OKWOJ4f+AFw==}
    engines: {node: '>=0.10.0'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-hexadecimal@2.0.1:
    resolution: {integrity: sha512-DgZQp241c8oO6cA1SbTEWiXeoxV42vlcJxgH+B3hi1AiqqKruZR3ZGF8In3fj4+/y/7rHvlOZLZtgJ/4ttYGZg==}

  is-installed-globally@0.4.0:
    resolution: {integrity: sha512-iwGqO3J21aaSkC7jWnHP/difazwS7SFeIqxv6wEtLU8Y5KlzFTjyqcSIT0d8s4+dDhKytsk9PJZ2BkS5eZwQRQ==}
    engines: {node: '>=10'}

  is-npm@6.0.0:
    resolution: {integrity: sha512-JEjxbSmtPSt1c8XTkVrlujcXdKV1/tvuQ7GwKcAlyiVLeYFQ2VHat8xfrDJsIkhCdF/tZ7CiIR3sy141c6+gPQ==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-obj@1.0.1:
    resolution: {integrity: sha512-l4RyHgRqGN4Y3+9JHVrNqO+tN0rV5My76uW5/nuO4K1b6vw5G8d/cmFjP9tRfEsdhZNt0IFdZuK/c2Vr4Nb+Qg==}
    engines: {node: '>=0.10.0'}

  is-obj@2.0.0:
    resolution: {integrity: sha512-drqDG3cbczxxEJRoOXcOjtdp1J/lyp1mNn0xaznRs8+muBhgQcrnbspox5X5fOw0HnMnbfDzvnEMEtqDEJEo8w==}
    engines: {node: '>=8'}

  is-path-cwd@2.2.0:
    resolution: {integrity: sha512-w942bTcih8fdJPJmQHFzkS76NEP8Kzzvmw92cXsazb8intwLqPibPPdXf4ANdKV3rYMuuQYGIWtvz9JilB3NFQ==}
    engines: {node: '>=6'}

  is-path-inside@3.0.3:
    resolution: {integrity: sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==}
    engines: {node: '>=8'}

  is-plain-obj@3.0.0:
    resolution: {integrity: sha512-gwsOE28k+23GP1B6vFl1oVh/WOzmawBrKwo5Ev6wMKzPkaXaCDIQKzLnvsA42DRlbVTWorkgTKIviAKCWkfUwA==}
    engines: {node: '>=10'}

  is-plain-obj@4.1.0:
    resolution: {integrity: sha512-+Pgi+vMuUNkJyExiMBt5IlFoMyKnr5zhJ4Uspz58WOhBF5QoIZkFyNHIbBAtHwzVAgk5RtndVNsDRN61/mmDqg==}
    engines: {node: '>=12'}

  is-plain-object@2.0.4:
    resolution: {integrity: sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==}
    engines: {node: '>=0.10.0'}

  is-reference@3.0.2:
    resolution: {integrity: sha512-v3rht/LgVcsdZa3O2Nqs+NMowLOxeOm7Ay9+/ARQ2F+qEoANRcqrjAZKGN0v8ymUetZGgkp26LTnGT7H0Qo9Pg==}

  is-regexp@1.0.0:
    resolution: {integrity: sha512-7zjFAPO4/gwyQAAgRRmqeEeyIICSdmCqa3tsVHMdBzaXXRiqopZL4Cyghg/XulGWrtABTpbnYYzzIRffLkP4oA==}
    engines: {node: '>=0.10.0'}

  is-root@2.1.0:
    resolution: {integrity: sha512-AGOriNp96vNBd3HtU+RzFEc75FfR5ymiYv8E553I71SCeXBiMsVDUtdio1OEFvrPyLIQ9tVR5RxXIFe5PUFjMg==}
    engines: {node: '>=6'}

  is-stream@2.0.1:
    resolution: {integrity: sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==}
    engines: {node: '>=8'}

  is-typedarray@1.0.0:
    resolution: {integrity: sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==}

  is-wsl@2.2.0:
    resolution: {integrity: sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==}
    engines: {node: '>=8'}

  is-yarn-global@0.4.1:
    resolution: {integrity: sha512-/kppl+R+LO5VmhYSEWARUFjodS25D68gvj8W7z0I7OWhUla5xWu8KL6CtB2V0R6yqhnRgbcaREMr4EEM6htLPQ==}
    engines: {node: '>=12'}

  isarray@0.0.1:
    resolution: {integrity: sha512-D2S+3GLxWH+uhrNEcoh/fnmYeP8E8/zHl644d/jdA0g2uyXvy3sb0qxotE+ne0LtccHknQzWwZEzhak7oJ0COQ==}

  isarray@1.0.0:
    resolution: {integrity: sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  isobject@3.0.1:
    resolution: {integrity: sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==}
    engines: {node: '>=0.10.0'}

  jackspeak@2.3.6:
    resolution: {integrity: sha512-N3yCS/NegsOBokc8GAdM8UcmfsKiSS8cipheD/nivzr700H+nsMOxJjQnvwOcRYVuFkdH0wGUvW2WbXGmrZGbQ==}
    engines: {node: '>=14'}

  jest-util@29.7.0:
    resolution: {integrity: sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-worker@27.5.1:
    resolution: {integrity: sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==}
    engines: {node: '>= 10.13.0'}

  jest-worker@29.7.0:
    resolution: {integrity: sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jiti@1.21.6:
    resolution: {integrity: sha512-2yTgeWTWzMWkHu6Jp9NKgePDaYHbntiwvYuuJLbbN9vl7DC9DvXKOB2BC3ZZ92D3cvV/aflH0osDfwpHepQ53w==}
    hasBin: true

  joi@17.13.0:
    resolution: {integrity: sha512-9qcrTyoBmFZRNHeVP4edKqIUEgFzq7MHvTNSDuHSqkpOPtiBkgNgcmTSqmiw1kw9tdKaiddvIDv/eCJDxmqWCA==}

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-yaml@3.14.1:
    resolution: {integrity: sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==}
    hasBin: true

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jsesc@3.0.2:
    resolution: {integrity: sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==}
    engines: {node: '>=6'}
    hasBin: true

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-parse-even-better-errors@2.3.1:
    resolution: {integrity: sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-schema-traverse@1.0.0:
    resolution: {integrity: sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==}

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  jsonfile@6.1.0:
    resolution: {integrity: sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==}

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  kind-of@6.0.3:
    resolution: {integrity: sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==}
    engines: {node: '>=0.10.0'}

  kleur@3.0.3:
    resolution: {integrity: sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==}
    engines: {node: '>=6'}

  latest-version@7.0.0:
    resolution: {integrity: sha512-KvNT4XqAMzdcL6ka6Tl3i2lYeFDgXNCuIX+xNx6ZMVR1dFq+idXd9FLKNMOIx0t9mJ9/HudyX4oZWXZQ0UJHeg==}
    engines: {node: '>=14.16'}

  launch-editor@2.6.1:
    resolution: {integrity: sha512-eB/uXmFVpY4zezmGp5XtU21kwo7GBbKB+EQ+UZeWtGb9yAM5xt/Evk+lYH3eRNAtId+ej4u7TYPFZ07w4s7rRw==}

  leven@3.1.0:
    resolution: {integrity: sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==}
    engines: {node: '>=6'}

  lilconfig@3.1.1:
    resolution: {integrity: sha512-O18pf7nyvHTckunPWCV1XUNXU1piu01y2b7ATJ0ppkUkk8ocqVWBrYjJBCwHDjD/ZWcfyrA0P4gKhzWGi5EINQ==}
    engines: {node: '>=14'}

  lilconfig@3.1.3:
    resolution: {integrity: sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==}
    engines: {node: '>=14'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  loader-runner@4.3.0:
    resolution: {integrity: sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==}
    engines: {node: '>=6.11.5'}

  loader-utils@2.0.4:
    resolution: {integrity: sha512-xXqpXoINfFhgua9xiqD8fPFHgkoq1mmmpE92WlDbm9rNRd/EbRb+Gqf908T2DMfuHjjJlksiK2RbHVOdD/MqSw==}
    engines: {node: '>=8.9.0'}

  loader-utils@3.2.1:
    resolution: {integrity: sha512-ZvFw1KWS3GVyYBYb7qkmRM/WwL2TQQBxgCK62rlvm4WpVQ23Nb4tYjApUlfjrEGvOs7KHEsmyUn75OHZrJMWPw==}
    engines: {node: '>= 12.13.0'}

  locate-path@3.0.0:
    resolution: {integrity: sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==}
    engines: {node: '>=6'}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  locate-path@7.2.0:
    resolution: {integrity: sha512-gvVijfZvn7R+2qyPX8mAuKcFGDf6Nc61GdvGafQsHL0sBIxfKzA+usWn4GFC/bk+QdwPUD4kWFJLhElipq+0VA==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  lodash.debounce@4.0.8:
    resolution: {integrity: sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==}

  lodash.memoize@4.1.2:
    resolution: {integrity: sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==}

  lodash.uniq@4.5.0:
    resolution: {integrity: sha512-xfBaXQd9ryd9dlSDvnvI0lvxfLJlYAZzXomUYzLKtUeOQvOP5piqAWuGtrhWeqaXK9hhoM/iyJc5AV+XfsX3HQ==}

  lodash@4.17.21:
    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}

  longest-streak@3.1.0:
    resolution: {integrity: sha512-9Ri+o0JYgehTaVBBDoMqIl8GXtbWg711O3srftcHhZ0dqnETqLaoIK0x17fUw9rFSlK/0NlsKe0Ahhyl5pXE2g==}

  loose-envify@1.4.0:
    resolution: {integrity: sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==}
    hasBin: true

  lower-case@2.0.2:
    resolution: {integrity: sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==}

  lowercase-keys@3.0.0:
    resolution: {integrity: sha512-ozCC6gdQ+glXOQsveKD0YsDy8DSQFjDTz4zyzEHNV5+JP5D62LmfDZ6o1cycFx9ouG940M5dE8C8CTewdj2YWQ==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  lru-cache@10.2.0:
    resolution: {integrity: sha512-2bIM8x+VAf6JT4bKAljS1qUWgMsqZRPGJS6FSahIMPVvctcNhyVp7AJu7quxOW9jwkryBReKZY5tY5JYv2n/7Q==}
    engines: {node: 14 || >=16.14}

  lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}

  lru-cache@6.0.0:
    resolution: {integrity: sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==}
    engines: {node: '>=10'}

  lucide-react@0.468.0:
    resolution: {integrity: sha512-6koYRhnM2N0GGZIdXzSeiNwguv1gt/FAjZOiPl76roBi3xKEXa4WmfpxgQwTTL4KipXjefrnf3oV4IsYhi4JFA==}
    peerDependencies:
      react: ^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0-rc

  markdown-extensions@2.0.0:
    resolution: {integrity: sha512-o5vL7aDWatOTX8LzaS1WMoaoxIiLRQJuIKKe2wAw6IeULDHaqbiqiggmx+pKvZDb1Sj+pE46Sn1T7lCqfFtg1Q==}
    engines: {node: '>=16'}

  markdown-table@2.0.0:
    resolution: {integrity: sha512-Ezda85ToJUBhM6WGaG6veasyym+Tbs3cMAw/ZhOPqXiYsr0jgocBV3j3nx+4lk47plLlIqjwuTm/ywVI+zjJ/A==}

  markdown-table@3.0.3:
    resolution: {integrity: sha512-Z1NL3Tb1M9wH4XESsCDEksWoKTdlUafKc4pt0GRwjUyXaCFZ+dc3g2erqB6zm3szA2IUSi7VnPI+o/9jnxh9hw==}

  mdast-util-directive@3.0.0:
    resolution: {integrity: sha512-JUpYOqKI4mM3sZcNxmF/ox04XYFFkNwr0CFlrQIkCwbvH0xzMCqkMqAde9wRd80VAhaUrwFwKm2nxretdT1h7Q==}

  mdast-util-find-and-replace@3.0.1:
    resolution: {integrity: sha512-SG21kZHGC3XRTSUhtofZkBzZTJNM5ecCi0SK2IMKmSXR8vO3peL+kb1O0z7Zl83jKtutG4k5Wv/W7V3/YHvzPA==}

  mdast-util-from-markdown@2.0.0:
    resolution: {integrity: sha512-n7MTOr/z+8NAX/wmhhDji8O3bRvPTV/U0oTCaZJkjhPSKTPhS3xufVhKGF8s1pJ7Ox4QgoIU7KHseh09S+9rTA==}

  mdast-util-frontmatter@2.0.1:
    resolution: {integrity: sha512-LRqI9+wdgC25P0URIJY9vwocIzCcksduHQ9OF2joxQoyTNVduwLAFUzjoopuRJbJAReaKrNQKAZKL3uCMugWJA==}

  mdast-util-gfm-autolink-literal@2.0.0:
    resolution: {integrity: sha512-FyzMsduZZHSc3i0Px3PQcBT4WJY/X/RCtEJKuybiC6sjPqLv7h1yqAkmILZtuxMSsUyaLUWNp71+vQH2zqp5cg==}

  mdast-util-gfm-footnote@2.0.0:
    resolution: {integrity: sha512-5jOT2boTSVkMnQ7LTrd6n/18kqwjmuYqo7JUPe+tRCY6O7dAuTFMtTPauYYrMPpox9hlN0uOx/FL8XvEfG9/mQ==}

  mdast-util-gfm-strikethrough@2.0.0:
    resolution: {integrity: sha512-mKKb915TF+OC5ptj5bJ7WFRPdYtuHv0yTRxK2tJvi+BDqbkiG7h7u/9SI89nRAYcmap2xHQL9D+QG/6wSrTtXg==}

  mdast-util-gfm-table@2.0.0:
    resolution: {integrity: sha512-78UEvebzz/rJIxLvE7ZtDd/vIQ0RHv+3Mh5DR96p7cS7HsBhYIICDBCu8csTNWNO6tBWfqXPWekRuj2FNOGOZg==}

  mdast-util-gfm-task-list-item@2.0.0:
    resolution: {integrity: sha512-IrtvNvjxC1o06taBAVJznEnkiHxLFTzgonUdy8hzFVeDun0uTjxxrRGVaNFqkU1wJR3RBPEfsxmU6jDWPofrTQ==}

  mdast-util-gfm@3.0.0:
    resolution: {integrity: sha512-dgQEX5Amaq+DuUqf26jJqSK9qgixgd6rYDHAv4aTBuA92cTknZlKpPfa86Z/s8Dj8xsAQpFfBmPUHWJBWqS4Bw==}

  mdast-util-mdx-expression@2.0.0:
    resolution: {integrity: sha512-fGCu8eWdKUKNu5mohVGkhBXCXGnOTLuFqOvGMvdikr+J1w7lDJgxThOKpwRWzzbyXAU2hhSwsmssOY4yTokluw==}

  mdast-util-mdx-jsx@3.1.2:
    resolution: {integrity: sha512-eKMQDeywY2wlHc97k5eD8VC+9ASMjN8ItEZQNGwJ6E0XWKiW/Z0V5/H8pvoXUf+y+Mj0VIgeRRbujBmFn4FTyA==}

  mdast-util-mdx@3.0.0:
    resolution: {integrity: sha512-JfbYLAW7XnYTTbUsmpu0kdBUVe+yKVJZBItEjwyYJiDJuZ9w4eeaqks4HQO+R7objWgS2ymV60GYpI14Ug554w==}

  mdast-util-mdxjs-esm@2.0.1:
    resolution: {integrity: sha512-EcmOpxsZ96CvlP03NghtH1EsLtr0n9Tm4lPUJUBccV9RwUOneqSycg19n5HGzCf+10LozMRSObtVr3ee1WoHtg==}

  mdast-util-phrasing@4.1.0:
    resolution: {integrity: sha512-TqICwyvJJpBwvGAMZjj4J2n0X8QWp21b9l0o7eXyVJ25YNWYbJDVIyD1bZXE6WtV6RmKJVYmQAKWa0zWOABz2w==}

  mdast-util-to-hast@13.1.0:
    resolution: {integrity: sha512-/e2l/6+OdGp/FB+ctrJ9Avz71AN/GRH3oi/3KAx/kMnoUsD6q0woXlDT8lLEeViVKE7oZxE7RXzvO3T8kF2/sA==}

  mdast-util-to-markdown@2.1.0:
    resolution: {integrity: sha512-SR2VnIEdVNCJbP6y7kVTJgPLifdr8WEU440fQec7qHoHOUz/oJ2jmNRqdDQ3rbiStOXb2mCDGTuwsK5OPUgYlQ==}

  mdast-util-to-string@4.0.0:
    resolution: {integrity: sha512-0H44vDimn51F0YwvxSJSm0eCDOJTRlmN0R1yBh4HLj9wiV1Dn0QoXGbvFAWj2hSItVTlCmBF1hqKlIyUBVFLPg==}

  mdn-data@2.0.28:
    resolution: {integrity: sha512-aylIc7Z9y4yzHYAJNuESG3hfhC+0Ibp/MAMiaOZgNv4pmEdFyfZhhhny4MNiAfWdBQ1RQ2mfDWmM1x8SvGyp8g==}

  mdn-data@2.0.30:
    resolution: {integrity: sha512-GaqWWShW4kv/G9IEucWScBx9G1/vsFZZJUO+tD26M8J8z3Kw5RDQjaoZe03YAClgeS/SWPOcb4nkFBTEi5DUEA==}

  media-typer@0.3.0:
    resolution: {integrity: sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==}
    engines: {node: '>= 0.6'}

  memfs@3.5.3:
    resolution: {integrity: sha512-UERzLsxzllchadvbPs5aolHh65ISpKpM+ccLbOJ8/vvpBKmAWf+la7dXFy7Mr0ySHbdHrFv5kGFCUHHe6GFEmw==}
    engines: {node: '>= 4.0.0'}

  merge-descriptors@1.0.1:
    resolution: {integrity: sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w==}

  merge-stream@2.0.0:
    resolution: {integrity: sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  methods@1.1.2:
    resolution: {integrity: sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==}
    engines: {node: '>= 0.6'}

  micromark-core-commonmark@2.0.1:
    resolution: {integrity: sha512-CUQyKr1e///ZODyD1U3xit6zXwy1a8q2a1S1HKtIlmgvurrEpaw/Y9y6KSIbF8P59cn/NjzHyO+Q2fAyYLQrAA==}

  micromark-extension-directive@3.0.0:
    resolution: {integrity: sha512-61OI07qpQrERc+0wEysLHMvoiO3s2R56x5u7glHq2Yqq6EHbH4dW25G9GfDdGCDYqA21KE6DWgNSzxSwHc2hSg==}

  micromark-extension-frontmatter@2.0.0:
    resolution: {integrity: sha512-C4AkuM3dA58cgZha7zVnuVxBhDsbttIMiytjgsM2XbHAB2faRVaHRle40558FBN+DJcrLNCoqG5mlrpdU4cRtg==}

  micromark-extension-gfm-autolink-literal@2.0.0:
    resolution: {integrity: sha512-rTHfnpt/Q7dEAK1Y5ii0W8bhfJlVJFnJMHIPisfPK3gpVNuOP0VnRl96+YJ3RYWV/P4gFeQoGKNlT3RhuvpqAg==}

  micromark-extension-gfm-footnote@2.0.0:
    resolution: {integrity: sha512-6Rzu0CYRKDv3BfLAUnZsSlzx3ak6HAoI85KTiijuKIz5UxZxbUI+pD6oHgw+6UtQuiRwnGRhzMmPRv4smcz0fg==}

  micromark-extension-gfm-strikethrough@2.0.0:
    resolution: {integrity: sha512-c3BR1ClMp5fxxmwP6AoOY2fXO9U8uFMKs4ADD66ahLTNcwzSCyRVU4k7LPV5Nxo/VJiR4TdzxRQY2v3qIUceCw==}

  micromark-extension-gfm-table@2.0.0:
    resolution: {integrity: sha512-PoHlhypg1ItIucOaHmKE8fbin3vTLpDOUg8KAr8gRCF1MOZI9Nquq2i/44wFvviM4WuxJzc3demT8Y3dkfvYrw==}

  micromark-extension-gfm-tagfilter@2.0.0:
    resolution: {integrity: sha512-xHlTOmuCSotIA8TW1mDIM6X2O1SiX5P9IuDtqGonFhEK0qgRI4yeC6vMxEV2dgyr2TiD+2PQ10o+cOhdVAcwfg==}

  micromark-extension-gfm-task-list-item@2.0.1:
    resolution: {integrity: sha512-cY5PzGcnULaN5O7T+cOzfMoHjBW7j+T9D2sucA5d/KbsBTPcYdebm9zUd9zzdgJGCwahV+/W78Z3nbulBYVbTw==}

  micromark-extension-gfm@3.0.0:
    resolution: {integrity: sha512-vsKArQsicm7t0z2GugkCKtZehqUm31oeGBV/KVSorWSy8ZlNAv7ytjFhvaryUiCUJYqs+NoE6AFhpQvBTM6Q4w==}

  micromark-extension-mdx-expression@3.0.0:
    resolution: {integrity: sha512-sI0nwhUDz97xyzqJAbHQhp5TfaxEvZZZ2JDqUo+7NvyIYG6BZ5CPPqj2ogUoPJlmXHBnyZUzISg9+oUmU6tUjQ==}

  micromark-extension-mdx-jsx@3.0.0:
    resolution: {integrity: sha512-uvhhss8OGuzR4/N17L1JwvmJIpPhAd8oByMawEKx6NVdBCbesjH4t+vjEp3ZXft9DwvlKSD07fCeI44/N0Vf2w==}

  micromark-extension-mdx-md@2.0.0:
    resolution: {integrity: sha512-EpAiszsB3blw4Rpba7xTOUptcFeBFi+6PY8VnJ2hhimH+vCQDirWgsMpz7w1XcZE7LVrSAUGb9VJpG9ghlYvYQ==}

  micromark-extension-mdxjs-esm@3.0.0:
    resolution: {integrity: sha512-DJFl4ZqkErRpq/dAPyeWp15tGrcrrJho1hKK5uBS70BCtfrIFg81sqcTVu3Ta+KD1Tk5vAtBNElWxtAa+m8K9A==}

  micromark-extension-mdxjs@3.0.0:
    resolution: {integrity: sha512-A873fJfhnJ2siZyUrJ31l34Uqwy4xIFmvPY1oj+Ean5PHcPBYzEsvqvWGaWcfEIr11O5Dlw3p2y0tZWpKHDejQ==}

  micromark-factory-destination@2.0.0:
    resolution: {integrity: sha512-j9DGrQLm/Uhl2tCzcbLhy5kXsgkHUrjJHg4fFAeoMRwJmJerT9aw4FEhIbZStWN8A3qMwOp1uzHr4UL8AInxtA==}

  micromark-factory-label@2.0.0:
    resolution: {integrity: sha512-RR3i96ohZGde//4WSe/dJsxOX6vxIg9TimLAS3i4EhBAFx8Sm5SmqVfR8E87DPSR31nEAjZfbt91OMZWcNgdZw==}

  micromark-factory-mdx-expression@2.0.1:
    resolution: {integrity: sha512-F0ccWIUHRLRrYp5TC9ZYXmZo+p2AM13ggbsW4T0b5CRKP8KHVRB8t4pwtBgTxtjRmwrK0Irwm7vs2JOZabHZfg==}

  micromark-factory-space@1.1.0:
    resolution: {integrity: sha512-cRzEj7c0OL4Mw2v6nwzttyOZe8XY/Z8G0rzmWQZTBi/jjwyw/U4uqKtUORXQrR5bAZZnbTI/feRV/R7hc4jQYQ==}

  micromark-factory-space@2.0.0:
    resolution: {integrity: sha512-TKr+LIDX2pkBJXFLzpyPyljzYK3MtmllMUMODTQJIUfDGncESaqB90db9IAUcz4AZAJFdd8U9zOp9ty1458rxg==}

  micromark-factory-title@2.0.0:
    resolution: {integrity: sha512-jY8CSxmpWLOxS+t8W+FG3Xigc0RDQA9bKMY/EwILvsesiRniiVMejYTE4wumNc2f4UbAa4WsHqe3J1QS1sli+A==}

  micromark-factory-whitespace@2.0.0:
    resolution: {integrity: sha512-28kbwaBjc5yAI1XadbdPYHX/eDnqaUFVikLwrO7FDnKG7lpgxnvk/XGRhX/PN0mOZ+dBSZ+LgunHS+6tYQAzhA==}

  micromark-util-character@1.2.0:
    resolution: {integrity: sha512-lXraTwcX3yH/vMDaFWCQJP1uIszLVebzUa3ZHdrgxr7KEU/9mL4mVgCpGbyhvNLNlauROiNUq7WN5u7ndbY6xg==}

  micromark-util-character@2.1.0:
    resolution: {integrity: sha512-KvOVV+X1yLBfs9dCBSopq/+G1PcgT3lAK07mC4BzXi5E7ahzMAF8oIupDDJ6mievI6F+lAATkbQQlQixJfT3aQ==}

  micromark-util-chunked@2.0.0:
    resolution: {integrity: sha512-anK8SWmNphkXdaKgz5hJvGa7l00qmcaUQoMYsBwDlSKFKjc6gjGXPDw3FNL3Nbwq5L8gE+RCbGqTw49FK5Qyvg==}

  micromark-util-classify-character@2.0.0:
    resolution: {integrity: sha512-S0ze2R9GH+fu41FA7pbSqNWObo/kzwf8rN/+IGlW/4tC6oACOs8B++bh+i9bVyNnwCcuksbFwsBme5OCKXCwIw==}

  micromark-util-combine-extensions@2.0.0:
    resolution: {integrity: sha512-vZZio48k7ON0fVS3CUgFatWHoKbbLTK/rT7pzpJ4Bjp5JjkZeasRfrS9wsBdDJK2cJLHMckXZdzPSSr1B8a4oQ==}

  micromark-util-decode-numeric-character-reference@2.0.1:
    resolution: {integrity: sha512-bmkNc7z8Wn6kgjZmVHOX3SowGmVdhYS7yBpMnuMnPzDq/6xwVA604DuOXMZTO1lvq01g+Adfa0pE2UKGlxL1XQ==}

  micromark-util-decode-string@2.0.0:
    resolution: {integrity: sha512-r4Sc6leeUTn3P6gk20aFMj2ntPwn6qpDZqWvYmAG6NgvFTIlj4WtrAudLi65qYoaGdXYViXYw2pkmn7QnIFasA==}

  micromark-util-encode@2.0.0:
    resolution: {integrity: sha512-pS+ROfCXAGLWCOc8egcBvT0kf27GoWMqtdarNfDcjb6YLuV5cM3ioG45Ys2qOVqeqSbjaKg72vU+Wby3eddPsA==}

  micromark-util-events-to-acorn@2.0.2:
    resolution: {integrity: sha512-Fk+xmBrOv9QZnEDguL9OI9/NQQp6Hz4FuQ4YmCb/5V7+9eAh1s6AYSvL20kHkD67YIg7EpE54TiSlcsf3vyZgA==}

  micromark-util-html-tag-name@2.0.0:
    resolution: {integrity: sha512-xNn4Pqkj2puRhKdKTm8t1YHC/BAjx6CEwRFXntTaRf/x16aqka6ouVoutm+QdkISTlT7e2zU7U4ZdlDLJd2Mcw==}

  micromark-util-normalize-identifier@2.0.0:
    resolution: {integrity: sha512-2xhYT0sfo85FMrUPtHcPo2rrp1lwbDEEzpx7jiH2xXJLqBuy4H0GgXk5ToU8IEwoROtXuL8ND0ttVa4rNqYK3w==}

  micromark-util-resolve-all@2.0.0:
    resolution: {integrity: sha512-6KU6qO7DZ7GJkaCgwBNtplXCvGkJToU86ybBAUdavvgsCiG8lSSvYxr9MhwmQ+udpzywHsl4RpGJsYWG1pDOcA==}

  micromark-util-sanitize-uri@2.0.0:
    resolution: {integrity: sha512-WhYv5UEcZrbAtlsnPuChHUAsu/iBPOVaEVsntLBIdpibO0ddy8OzavZz3iL2xVvBZOpolujSliP65Kq0/7KIYw==}

  micromark-util-subtokenize@2.0.1:
    resolution: {integrity: sha512-jZNtiFl/1aY73yS3UGQkutD0UbhTt68qnRpw2Pifmz5wV9h8gOVsN70v+Lq/f1rKaU/W8pxRe8y8Q9FX1AOe1Q==}

  micromark-util-symbol@1.1.0:
    resolution: {integrity: sha512-uEjpEYY6KMs1g7QfJ2eX1SQEV+ZT4rUD3UcF6l57acZvLNK7PBZL+ty82Z1qhK1/yXIY4bdx04FKMgR0g4IAag==}

  micromark-util-symbol@2.0.0:
    resolution: {integrity: sha512-8JZt9ElZ5kyTnO94muPxIGS8oyElRJaiJO8EzV6ZSyGQ1Is8xwl4Q45qU5UOg+bGH4AikWziz0iN4sFLWs8PGw==}

  micromark-util-types@1.1.0:
    resolution: {integrity: sha512-ukRBgie8TIAcacscVHSiddHjO4k/q3pnedmzMQ4iwDcK0FtFCohKOlFbaOL/mPgfnPsL3C1ZyxJa4sbWrBl3jg==}

  micromark-util-types@2.0.0:
    resolution: {integrity: sha512-oNh6S2WMHWRZrmutsRmDDfkzKtxF+bc2VxLC9dvtrDIRFln627VsFP6fLMgTryGDljgLPjkrzQSDcPrjPyDJ5w==}

  micromark@4.0.0:
    resolution: {integrity: sha512-o/sd0nMof8kYff+TqcDx3VSrgBTcZpSvYcAHIfHhv5VAuNmisCxjhx6YmxS8PFEpb9z5WKWKPdzf0jM23ro3RQ==}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mime-db@1.33.0:
    resolution: {integrity: sha512-BHJ/EKruNIqJf/QahvxwQZXKygOQ256myeN/Ew+THcAa5q+PjyTTMMeNQC4DZw5AwfvelsUrA6B67NKMqXDbzQ==}
    engines: {node: '>= 0.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.18:
    resolution: {integrity: sha512-lc/aahn+t4/SWV/qcmumYjymLsWfN3ELhpmVuUFjgsORruuZPVSwAQryq+HHGvO/SI2KVX26bx+En+zhM8g8hQ==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  mime@1.6.0:
    resolution: {integrity: sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==}
    engines: {node: '>=4'}
    hasBin: true

  mimic-fn@2.1.0:
    resolution: {integrity: sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==}
    engines: {node: '>=6'}

  mimic-response@3.1.0:
    resolution: {integrity: sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==}
    engines: {node: '>=10'}

  mimic-response@4.0.0:
    resolution: {integrity: sha512-e5ISH9xMYU0DzrT+jl8q2ze9D6eWBto+I8CNpe+VI+K2J/F/k3PdkdTdz4wvGVH4NTpo+NRYTVIuMQEMMcsLqg==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  mini-css-extract-plugin@2.9.2:
    resolution: {integrity: sha512-GJuACcS//jtq4kCtd5ii/M0SZf7OZRH+BxdqXZHaJfb8TJiVl+NgQRPwiYt2EuqeSkNydn/7vP+bcE27C5mb9w==}
    engines: {node: '>= 12.13.0'}
    peerDependencies:
      webpack: ^5.0.0

  minimalistic-assert@1.0.1:
    resolution: {integrity: sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@9.0.4:
    resolution: {integrity: sha512-KqWh+VchfxcMNRAJjj2tnsSJdNbHsVgnkBhTNrW7AjVo6OvLtxw8zfT9oLw1JSohlFzJ8jCoTgaoXvJ+kHt6fw==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass@7.0.4:
    resolution: {integrity: sha512-jYofLM5Dam9279rdkWzqHozUo4ybjdZmCsDHePy5V/PbBcVMiSZR97gmAy45aqi8CK1lG2ECd356FU86avfwUQ==}
    engines: {node: '>=16 || 14 >=14.17'}

  mrmime@2.0.0:
    resolution: {integrity: sha512-eu38+hdgojoyq63s+yTpN4XMBdt5l8HhMhc4VKLO9KM5caLIBvUm4thi7fFaxyTmCKeNnXZ5pAlBwCUnhA09uw==}
    engines: {node: '>=10'}

  ms@2.0.0:
    resolution: {integrity: sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==}

  ms@2.1.2:
    resolution: {integrity: sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  multicast-dns@7.2.5:
    resolution: {integrity: sha512-2eznPJP8z2BFLX50tf0LuODrpINqP1RVIm/CObbTcBRITQgmC/TjcREF1NeTBzIcR5XO/ukWo+YHOjBbFwIupg==}
    hasBin: true

  mz@2.7.0:
    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}

  nanoid@3.3.7:
    resolution: {integrity: sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  negotiator@0.6.3:
    resolution: {integrity: sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==}
    engines: {node: '>= 0.6'}

  neo-async@2.6.2:
    resolution: {integrity: sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==}

  no-case@3.0.4:
    resolution: {integrity: sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==}

  node-emoji@2.1.3:
    resolution: {integrity: sha512-E2WEOVsgs7O16zsURJ/eH8BqhF029wGpEOnv7Urwdo2wmQanOACwJQh0devF9D9RhoZru0+9JXIS0dBXIAz+lA==}
    engines: {node: '>=18'}

  node-forge@1.3.1:
    resolution: {integrity: sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==}
    engines: {node: '>= 6.13.0'}

  node-releases@2.0.18:
    resolution: {integrity: sha512-d9VeXT4SJ7ZeOqGX6R5EM022wpL+eWPooLI+5UpWn2jCT1aosUQEhQP214x33Wkwx3JQMvIm+tIoVOdodFS40g==}

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  normalize-range@0.1.2:
    resolution: {integrity: sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==}
    engines: {node: '>=0.10.0'}

  normalize-url@8.0.1:
    resolution: {integrity: sha512-IO9QvjUMWxPQQhs60oOu10CRkWCiZzSUkzbXGGV9pviYl1fXYcvkzQ5jV9z8Y6un8ARoVRl4EtC6v6jNqbaJ/w==}
    engines: {node: '>=14.16'}

  npm-run-path@4.0.1:
    resolution: {integrity: sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==}
    engines: {node: '>=8'}

  npm-to-yarn@3.0.0:
    resolution: {integrity: sha512-76YnmsbfrYp0tMsWxM0RNX0Vs+x8JxpJGu6B/jDn4lW8+laiTcKmKi9MeMh4UikO4RkJ1oqURoDy9bXJmMXS6A==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  nprogress@0.2.0:
    resolution: {integrity: sha512-I19aIingLgR1fmhftnbWWO3dXc0hSxqHQHQb3H8m+K3TnEn/iSeTZZOyvKXWqQESMwuUVnatlCnZdLBZZt2VSA==}

  nth-check@2.1.1:
    resolution: {integrity: sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==}

  null-loader@4.0.1:
    resolution: {integrity: sha512-pxqVbi4U6N26lq+LmgIbB5XATP0VdZKOG25DhHi8btMmJJefGArFyDg1yc4U3hWCJbMqSrw0qyrz1UQX+qYXqg==}
    engines: {node: '>= 10.13.0'}
    peerDependencies:
      webpack: ^4.0.0 || ^5.0.0

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-hash@3.0.0:
    resolution: {integrity: sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==}
    engines: {node: '>= 6'}

  object-inspect@1.13.1:
    resolution: {integrity: sha512-5qoj1RUiKOMsCCNLV1CBiPYE10sziTsnmNxkAI/rZhiD63CF7IqdFGC/XzjWjpSgLf0LxXX3bDFIh0E18f6UhQ==}

  object-keys@1.1.1:
    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}
    engines: {node: '>= 0.4'}

  object.assign@4.1.5:
    resolution: {integrity: sha512-byy+U7gp+FVwmyzKPYhW2h5l3crpmGsxl7X2s8y43IgxvG4g3QZ6CffDtsNQy1WsmZpQbO+ybo0AlW7TY6DcBQ==}
    engines: {node: '>= 0.4'}

  obuf@1.1.2:
    resolution: {integrity: sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg==}

  on-finished@2.4.1:
    resolution: {integrity: sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==}
    engines: {node: '>= 0.8'}

  on-headers@1.0.2:
    resolution: {integrity: sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==}
    engines: {node: '>= 0.8'}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  onetime@5.1.2:
    resolution: {integrity: sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==}
    engines: {node: '>=6'}

  open@8.4.2:
    resolution: {integrity: sha512-7x81NCL719oNbsq/3mh+hVrAWmFuEYUqrq/Iw3kUzH8ReypT9QQ0BLoJS7/G9k6N81XjW4qHWtjWwe/9eLy1EQ==}
    engines: {node: '>=12'}

  opener@1.5.2:
    resolution: {integrity: sha512-ur5UIdyw5Y7yEj9wLzhqXiy6GZ3Mwx0yGI+5sMn2r0N0v3cKJvUmFH5yPP+WXh9e0xfyzyJX95D8l088DNFj7A==}
    hasBin: true

  p-cancelable@3.0.0:
    resolution: {integrity: sha512-mlVgR3PGuzlo0MmTdk4cXqXWlwQDLnONTAg6sm62XkMJEiRxN3GL3SffkYvqwonbkJBcrI7Uvv5Zh9yjvn2iUw==}
    engines: {node: '>=12.20'}

  p-limit@2.3.0:
    resolution: {integrity: sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==}
    engines: {node: '>=6'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-limit@4.0.0:
    resolution: {integrity: sha512-5b0R4txpzjPWVw/cXXUResoD4hb6U/x9BH08L7nw+GN1sezDzPdxeRvpc9c433fZhBan/wusjbCsqwqm4EIBIQ==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  p-locate@3.0.0:
    resolution: {integrity: sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==}
    engines: {node: '>=6'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  p-locate@6.0.0:
    resolution: {integrity: sha512-wPrq66Llhl7/4AGC6I+cqxT07LhXvWL08LNXz1fENOw0Ap4sRZZ/gZpTTJ5jpurzzzfS2W/Ge9BY3LgLjCShcw==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  p-map@4.0.0:
    resolution: {integrity: sha512-/bjOqmgETBYB5BoEeGVea8dmvHb2m9GLy1E9W43yeyfP6QQCZGFNa+XRceJEuDB6zqr+gKpIAmlLebMpykw/MQ==}
    engines: {node: '>=10'}

  p-retry@4.6.2:
    resolution: {integrity: sha512-312Id396EbJdvRONlngUx0NydfrIQ5lsYu0znKVUzVvArzEIt08V1qhtyESbGVd1FGX7UKtiFp5uwKZdM8wIuQ==}
    engines: {node: '>=8'}

  p-try@2.2.0:
    resolution: {integrity: sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==}
    engines: {node: '>=6'}

  package-json@8.1.1:
    resolution: {integrity: sha512-cbH9IAIJHNj9uXi196JVsRlt7cHKak6u/e6AkL/bkRelZ7rlL3X1YKxsZwa36xipOEKAsdtmaG6aAJoM1fx2zA==}
    engines: {node: '>=14.16'}

  param-case@3.0.4:
    resolution: {integrity: sha512-RXlj7zCYokReqWpOPH9oYivUzLYZ5vAPIfEmCTNViosC78F8F0H9y7T7gG2M39ymgutxF5gcFEsyZQSph9Bp3A==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parse-entities@4.0.1:
    resolution: {integrity: sha512-SWzvYcSJh4d/SGLIOQfZ/CoNv6BTlI6YEQ7Nj82oDVnRpwe/Z/F1EMx42x3JAOwGBlCjeCH0BRJQbQ/opHL17w==}

  parse-json@5.2.0:
    resolution: {integrity: sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==}
    engines: {node: '>=8'}

  parse-numeric-range@1.3.0:
    resolution: {integrity: sha512-twN+njEipszzlMJd4ONUYgSfZPDxgHhT9Ahed5uTigpQn90FggW4SA/AIPq/6a149fTbE9qBEcSwE3FAEp6wQQ==}

  parse5-htmlparser2-tree-adapter@7.0.0:
    resolution: {integrity: sha512-B77tOZrqqfUfnVcOrUvfdLbz4pu4RopLD/4vmu3HUPswwTA8OH0EMW9BlWR2B0RCoiZRAHEUu7IxeP1Pd1UU+g==}

  parse5@7.1.2:
    resolution: {integrity: sha512-Czj1WaSVpaoj0wbhMzLmWD69anp2WH7FXMB9n1Sy8/ZFF9jolSQVMu1Ij5WIyGmcBmhk7EOndpO4mIpihVqAXw==}

  parseurl@1.3.3:
    resolution: {integrity: sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==}
    engines: {node: '>= 0.8'}

  pascal-case@3.1.2:
    resolution: {integrity: sha512-uWlGT3YSnK9x3BQJaOdcZwrnV6hPpd8jFH1/ucpiLRPh/2zCVJKS19E4GvYHvaCcACn3foXZ0cLB9Wrx1KGe5g==}

  path-exists@3.0.0:
    resolution: {integrity: sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==}
    engines: {node: '>=4'}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-exists@5.0.0:
    resolution: {integrity: sha512-RjhtfwJOxzcFmNOi6ltcbcu4Iu+FL3zEj83dk4kAS+fVpTxXLO1b38RvJgT/0QwvV/L3aY9TAnyv0EOqW4GoMQ==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  path-is-absolute@1.0.1:
    resolution: {integrity: sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==}
    engines: {node: '>=0.10.0'}

  path-is-inside@1.0.2:
    resolution: {integrity: sha512-DUWJr3+ULp4zXmol/SZkFf3JGsS9/SIv+Y3Rt93/UjPpDpklB5f1er4O3POIbUuUJ3FXgqte2Q7SrU6zAqwk8w==}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.10.2:
    resolution: {integrity: sha512-7xTavNy5RQXnsjANvVvMkEjvloOinkAjv/Z6Ildz9v2RinZ4SBKTWFOVRbaF8p0vpHnyjV/UwNDdKuUv6M5qcA==}
    engines: {node: '>=16 || 14 >=14.17'}

  path-to-regexp@0.1.7:
    resolution: {integrity: sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ==}

  path-to-regexp@1.8.0:
    resolution: {integrity: sha512-n43JRhlUKUAlibEJhPeir1ncUID16QnEjNpwzNdO3Lm4ywrBpBZ5oLD0I6br9evr1Y9JTqwRtAh7JLoOzAQdVA==}

  path-to-regexp@3.3.0:
    resolution: {integrity: sha512-qyCH421YQPS2WFDxDjftfc1ZR5WKQzVzqsp4n9M2kQhVOo/ByahFoUNJfl58kOcEGfQ//7weFTDhm+ss8Ecxgw==}

  path-type@4.0.0:
    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
    engines: {node: '>=8'}

  periscopic@3.1.0:
    resolution: {integrity: sha512-vKiQ8RRtkl9P+r/+oefh25C3fhybptkHKCZSPlcXiJux2tJF55GnEj3BVn4A5gKfq9NWWXXrxkHBwVPUfH0opw==}

  picocolors@1.0.1:
    resolution: {integrity: sha512-anP1Z8qwhkbmu7MFP5iTt+wQKXgwzf7zTyGlcdzabySa9vd0Xt392U0rVmz9poOaBj0uHJKyyo9/upk0HrEQew==}

  picocolors@1.1.1:
    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  pify@2.3.0:
    resolution: {integrity: sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==}
    engines: {node: '>=0.10.0'}

  pirates@4.0.6:
    resolution: {integrity: sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==}
    engines: {node: '>= 6'}

  pkg-dir@7.0.0:
    resolution: {integrity: sha512-Ie9z/WINcxxLp27BKOCHGde4ITq9UklYKDzVo1nhk5sqGEXU3FpkwP5GM2voTGJkGd9B3Otl+Q4uwSOeSUtOBA==}
    engines: {node: '>=14.16'}

  pkg-up@3.1.0:
    resolution: {integrity: sha512-nDywThFk1i4BQK4twPQ6TA4RT8bDY96yeuCVBWL3ePARCiEKDRSrNGbFIgUJpLp+XeIR65v8ra7WuJOFUBtkMA==}
    engines: {node: '>=8'}

  postcss-attribute-case-insensitive@7.0.1:
    resolution: {integrity: sha512-Uai+SupNSqzlschRyNx3kbCTWgY/2hcwtHEI/ej2LJWc9JJ77qKgGptd8DHwY1mXtZ7Aoh4z4yxfwMBue9eNgw==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-calc@9.0.1:
    resolution: {integrity: sha512-TipgjGyzP5QzEhsOZUaIkeO5mKeMFpebWzRogWG/ysonUlnHcq5aJe0jOjpfzUU8PeSaBQnrE8ehR0QA5vs8PQ==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.2.2

  postcss-clamp@4.1.0:
    resolution: {integrity: sha512-ry4b1Llo/9zz+PKC+030KUnPITTJAHeOwjfAyyB60eT0AorGLdzp52s31OsPRHRf8NchkgFoG2y6fCfn1IV1Ow==}
    engines: {node: '>=7.6.0'}
    peerDependencies:
      postcss: ^8.4.6

  postcss-color-functional-notation@7.0.6:
    resolution: {integrity: sha512-wLXvm8RmLs14Z2nVpB4CWlnvaWPRcOZFltJSlcbYwSJ1EDZKsKDhPKIMecCnuU054KSmlmubkqczmm6qBPCBhA==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-color-hex-alpha@10.0.0:
    resolution: {integrity: sha512-1kervM2cnlgPs2a8Vt/Qbe5cQ++N7rkYo/2rz2BkqJZIHQwaVuJgQH38REHrAi4uM0b1fqxMkWYmese94iMp3w==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-color-rebeccapurple@10.0.0:
    resolution: {integrity: sha512-JFta737jSP+hdAIEhk1Vs0q0YF5P8fFcj+09pweS8ktuGuZ8pPlykHsk6mPxZ8awDl4TrcxUqJo9l1IhVr/OjQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-colormin@6.1.0:
    resolution: {integrity: sha512-x9yX7DOxeMAR+BgGVnNSAxmAj98NX/YxEMNFP+SDCEeNLb2r3i6Hh1ksMsnW8Ub5SLCpbescQqn9YEbE9554Sw==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-convert-values@6.1.0:
    resolution: {integrity: sha512-zx8IwP/ts9WvUM6NkVSkiU902QZL1bwPhaVaLynPtCsOTqp+ZKbNi+s6XJg3rfqpKGA/oc7Oxk5t8pOQJcwl/w==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-custom-media@11.0.5:
    resolution: {integrity: sha512-SQHhayVNgDvSAdX9NQ/ygcDQGEY+aSF4b/96z7QUX6mqL5yl/JgG/DywcF6fW9XbnCRE+aVYk+9/nqGuzOPWeQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-custom-properties@14.0.4:
    resolution: {integrity: sha512-QnW8FCCK6q+4ierwjnmXF9Y9KF8q0JkbgVfvQEMa93x1GT8FvOiUevWCN2YLaOWyByeDX8S6VFbZEeWoAoXs2A==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-custom-selectors@8.0.4:
    resolution: {integrity: sha512-ASOXqNvDCE0dAJ/5qixxPeL1aOVGHGW2JwSy7HyjWNbnWTQCl+fDc968HY1jCmZI0+BaYT5CxsOiUhavpG/7eg==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-dir-pseudo-class@9.0.1:
    resolution: {integrity: sha512-tRBEK0MHYvcMUrAuYMEOa0zg9APqirBcgzi6P21OhxtJyJADo/SWBwY1CAwEohQ/6HDaa9jCjLRG7K3PVQYHEA==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-discard-comments@6.0.2:
    resolution: {integrity: sha512-65w/uIqhSBBfQmYnG92FO1mWZjJ4GL5b8atm5Yw2UgrwD7HiNiSSNwJor1eCFGzUgYnN/iIknhNRVqjrrpuglw==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-discard-duplicates@6.0.3:
    resolution: {integrity: sha512-+JA0DCvc5XvFAxwx6f/e68gQu/7Z9ud584VLmcgto28eB8FqSFZwtrLwB5Kcp70eIoWP/HXqz4wpo8rD8gpsTw==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-discard-empty@6.0.3:
    resolution: {integrity: sha512-znyno9cHKQsK6PtxL5D19Fj9uwSzC2mB74cpT66fhgOadEUPyXFkbgwm5tvc3bt3NAy8ltE5MrghxovZRVnOjQ==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-discard-overridden@6.0.2:
    resolution: {integrity: sha512-j87xzI4LUggC5zND7KdjsI25APtyMuynXZSujByMaav2roV6OZX+8AaCUcZSWqckZpjAjRyFDdpqybgjFO0HJQ==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-discard-unused@6.0.5:
    resolution: {integrity: sha512-wHalBlRHkaNnNwfC8z+ppX57VhvS+HWgjW508esjdaEYr3Mx7Gnn2xA4R/CKf5+Z9S5qsqC+Uzh4ueENWwCVUA==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-double-position-gradients@6.0.0:
    resolution: {integrity: sha512-JkIGah3RVbdSEIrcobqj4Gzq0h53GG4uqDPsho88SgY84WnpkTpI0k50MFK/sX7XqVisZ6OqUfFnoUO6m1WWdg==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-focus-visible@10.0.1:
    resolution: {integrity: sha512-U58wyjS/I1GZgjRok33aE8juW9qQgQUNwTSdxQGuShHzwuYdcklnvK/+qOWX1Q9kr7ysbraQ6ht6r+udansalA==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-focus-within@9.0.1:
    resolution: {integrity: sha512-fzNUyS1yOYa7mOjpci/bR+u+ESvdar6hk8XNK/TRR0fiGTp2QT5N+ducP0n3rfH/m9I7H/EQU6lsa2BrgxkEjw==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-font-variant@5.0.0:
    resolution: {integrity: sha512-1fmkBaCALD72CK2a9i468mA/+tr9/1cBxRRMXOUaZqO43oWPR5imcyPjXwuv7PXbCid4ndlP5zWhidQVVa3hmA==}
    peerDependencies:
      postcss: ^8.1.0

  postcss-gap-properties@6.0.0:
    resolution: {integrity: sha512-Om0WPjEwiM9Ru+VhfEDPZJAKWUd0mV1HmNXqp2C29z80aQ2uP9UVhLc7e3aYMIor/S5cVhoPgYQ7RtfeZpYTRw==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-image-set-function@7.0.0:
    resolution: {integrity: sha512-QL7W7QNlZuzOwBTeXEmbVckNt1FSmhQtbMRvGGqqU4Nf4xk6KUEQhAoWuMzwbSv5jxiRiSZ5Tv7eiDB9U87znA==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-import@15.1.0:
    resolution: {integrity: sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      postcss: ^8.0.0

  postcss-js@4.0.1:
    resolution: {integrity: sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==}
    engines: {node: ^12 || ^14 || >= 16}
    peerDependencies:
      postcss: ^8.4.21

  postcss-lab-function@7.0.6:
    resolution: {integrity: sha512-HPwvsoK7C949vBZ+eMyvH2cQeMr3UREoHvbtra76/UhDuiViZH6pir+z71UaJQohd7VDSVUdR6TkWYKExEc9aQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-load-config@4.0.2:
    resolution: {integrity: sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==}
    engines: {node: '>= 14'}
    peerDependencies:
      postcss: '>=8.0.9'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      postcss:
        optional: true
      ts-node:
        optional: true

  postcss-loader@7.3.4:
    resolution: {integrity: sha512-iW5WTTBSC5BfsBJ9daFMPVrLT36MrNiC6fqOZTTaHjBNX6Pfd5p+hSBqe/fEeNd7pc13QiAyGt7VdGMw4eRC4A==}
    engines: {node: '>= 14.15.0'}
    peerDependencies:
      postcss: ^7.0.0 || ^8.0.1
      webpack: ^5.0.0

  postcss-logical@8.0.0:
    resolution: {integrity: sha512-HpIdsdieClTjXLOyYdUPAX/XQASNIwdKt5hoZW08ZOAiI+tbV0ta1oclkpVkW5ANU+xJvk3KkA0FejkjGLXUkg==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-merge-idents@6.0.3:
    resolution: {integrity: sha512-1oIoAsODUs6IHQZkLQGO15uGEbK3EAl5wi9SS8hs45VgsxQfMnxvt+L+zIr7ifZFIH14cfAeVe2uCTa+SPRa3g==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-merge-longhand@6.0.5:
    resolution: {integrity: sha512-5LOiordeTfi64QhICp07nzzuTDjNSO8g5Ksdibt44d+uvIIAE1oZdRn8y/W5ZtYgRH/lnLDlvi9F8btZcVzu3w==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-merge-rules@6.1.1:
    resolution: {integrity: sha512-KOdWF0gju31AQPZiD+2Ar9Qjowz1LTChSjFFbS+e2sFgc4uHOp3ZvVX4sNeTlk0w2O31ecFGgrFzhO0RSWbWwQ==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-minify-font-values@6.1.0:
    resolution: {integrity: sha512-gklfI/n+9rTh8nYaSJXlCo3nOKqMNkxuGpTn/Qm0gstL3ywTr9/WRKznE+oy6fvfolH6dF+QM4nCo8yPLdvGJg==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-minify-gradients@6.0.3:
    resolution: {integrity: sha512-4KXAHrYlzF0Rr7uc4VrfwDJ2ajrtNEpNEuLxFgwkhFZ56/7gaE4Nr49nLsQDZyUe+ds+kEhf+YAUolJiYXF8+Q==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-minify-params@6.1.0:
    resolution: {integrity: sha512-bmSKnDtyyE8ujHQK0RQJDIKhQ20Jq1LYiez54WiaOoBtcSuflfK3Nm596LvbtlFcpipMjgClQGyGr7GAs+H1uA==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-minify-selectors@6.0.4:
    resolution: {integrity: sha512-L8dZSwNLgK7pjTto9PzWRoMbnLq5vsZSTu8+j1P/2GB8qdtGQfn+K1uSvFgYvgh83cbyxT5m43ZZhUMTJDSClQ==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-modules-extract-imports@3.1.0:
    resolution: {integrity: sha512-k3kNe0aNFQDAZGbin48pL2VNidTF0w4/eASDsxlyspobzU3wZQLOGj7L9gfRe0Jo9/4uud09DsjFNH7winGv8Q==}
    engines: {node: ^10 || ^12 || >= 14}
    peerDependencies:
      postcss: ^8.1.0

  postcss-modules-local-by-default@4.0.5:
    resolution: {integrity: sha512-6MieY7sIfTK0hYfafw1OMEG+2bg8Q1ocHCpoWLqOKj3JXlKu4G7btkmM/B7lFubYkYWmRSPLZi5chid63ZaZYw==}
    engines: {node: ^10 || ^12 || >= 14}
    peerDependencies:
      postcss: ^8.1.0

  postcss-modules-scope@3.2.0:
    resolution: {integrity: sha512-oq+g1ssrsZOsx9M96c5w8laRmvEu9C3adDSjI8oTcbfkrTE8hx/zfyobUoWIxaKPO8bt6S62kxpw5GqypEw1QQ==}
    engines: {node: ^10 || ^12 || >= 14}
    peerDependencies:
      postcss: ^8.1.0

  postcss-modules-values@4.0.0:
    resolution: {integrity: sha512-RDxHkAiEGI78gS2ofyvCsu7iycRv7oqw5xMWn9iMoR0N/7mf9D50ecQqUo5BZ9Zh2vH4bCUR/ktCqbB9m8vJjQ==}
    engines: {node: ^10 || ^12 || >= 14}
    peerDependencies:
      postcss: ^8.1.0

  postcss-nested@6.2.0:
    resolution: {integrity: sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==}
    engines: {node: '>=12.0'}
    peerDependencies:
      postcss: ^8.2.14

  postcss-nested@7.0.2:
    resolution: {integrity: sha512-5osppouFc0VR9/VYzYxO03VaDa3e8F23Kfd6/9qcZTUI8P58GIYlArOET2Wq0ywSl2o2PjELhYOFI4W7l5QHKw==}
    engines: {node: '>=18.0'}
    peerDependencies:
      postcss: ^8.2.14

  postcss-nesting@13.0.1:
    resolution: {integrity: sha512-VbqqHkOBOt4Uu3G8Dm8n6lU5+9cJFxiuty9+4rcoyRPO9zZS1JIs6td49VIoix3qYqELHlJIn46Oih9SAKo+yQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-normalize-charset@6.0.2:
    resolution: {integrity: sha512-a8N9czmdnrjPHa3DeFlwqst5eaL5W8jYu3EBbTTkI5FHkfMhFZh1EGbku6jhHhIzTA6tquI2P42NtZ59M/H/kQ==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-normalize-display-values@6.0.2:
    resolution: {integrity: sha512-8H04Mxsb82ON/aAkPeq8kcBbAtI5Q2a64X/mnRRfPXBq7XeogoQvReqxEfc0B4WPq1KimjezNC8flUtC3Qz6jg==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-normalize-positions@6.0.2:
    resolution: {integrity: sha512-/JFzI441OAB9O7VnLA+RtSNZvQ0NCFZDOtp6QPFo1iIyawyXg0YI3CYM9HBy1WvwCRHnPep/BvI1+dGPKoXx/Q==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-normalize-repeat-style@6.0.2:
    resolution: {integrity: sha512-YdCgsfHkJ2jEXwR4RR3Tm/iOxSfdRt7jplS6XRh9Js9PyCR/aka/FCb6TuHT2U8gQubbm/mPmF6L7FY9d79VwQ==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-normalize-string@6.0.2:
    resolution: {integrity: sha512-vQZIivlxlfqqMp4L9PZsFE4YUkWniziKjQWUtsxUiVsSSPelQydwS8Wwcuw0+83ZjPWNTl02oxlIvXsmmG+CiQ==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-normalize-timing-functions@6.0.2:
    resolution: {integrity: sha512-a+YrtMox4TBtId/AEwbA03VcJgtyW4dGBizPl7e88cTFULYsprgHWTbfyjSLyHeBcK/Q9JhXkt2ZXiwaVHoMzA==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-normalize-unicode@6.1.0:
    resolution: {integrity: sha512-QVC5TQHsVj33otj8/JD869Ndr5Xcc/+fwRh4HAsFsAeygQQXm+0PySrKbr/8tkDKzW+EVT3QkqZMfFrGiossDg==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-normalize-url@6.0.2:
    resolution: {integrity: sha512-kVNcWhCeKAzZ8B4pv/DnrU1wNh458zBNp8dh4y5hhxih5RZQ12QWMuQrDgPRw3LRl8mN9vOVfHl7uhvHYMoXsQ==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-normalize-whitespace@6.0.2:
    resolution: {integrity: sha512-sXZ2Nj1icbJOKmdjXVT9pnyHQKiSAyuNQHSgRCUgThn2388Y9cGVDR+E9J9iAYbSbLHI+UUwLVl1Wzco/zgv0Q==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-opacity-percentage@3.0.0:
    resolution: {integrity: sha512-K6HGVzyxUxd/VgZdX04DCtdwWJ4NGLG212US4/LA1TLAbHgmAsTWVR86o+gGIbFtnTkfOpb9sCRBx8K7HO66qQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-ordered-values@6.0.2:
    resolution: {integrity: sha512-VRZSOB+JU32RsEAQrO94QPkClGPKJEL/Z9PCBImXMhIeK5KAYo6slP/hBYlLgrCjFxyqvn5VC81tycFEDBLG1Q==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-overflow-shorthand@6.0.0:
    resolution: {integrity: sha512-BdDl/AbVkDjoTofzDQnwDdm/Ym6oS9KgmO7Gr+LHYjNWJ6ExORe4+3pcLQsLA9gIROMkiGVjjwZNoL/mpXHd5Q==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-page-break@3.0.4:
    resolution: {integrity: sha512-1JGu8oCjVXLa9q9rFTo4MbeeA5FMe00/9C7lN4va606Rdb+HkxXtXsmEDrIraQ11fGz/WvKWa8gMuCKkrXpTsQ==}
    peerDependencies:
      postcss: ^8

  postcss-place@10.0.0:
    resolution: {integrity: sha512-5EBrMzat2pPAxQNWYavwAfoKfYcTADJ8AXGVPcUZ2UkNloUTWzJQExgrzrDkh3EKzmAx1evfTAzF9I8NGcc+qw==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-preset-env@10.1.1:
    resolution: {integrity: sha512-wqqsnBFD6VIwcHHRbhjTOcOi4qRVlB26RwSr0ordPj7OubRRxdWebv/aLjKLRR8zkZrbxZyuus03nOIgC5elMQ==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-pseudo-class-any-link@10.0.1:
    resolution: {integrity: sha512-3el9rXlBOqTFaMFkWDOkHUTQekFIYnaQY55Rsp8As8QQkpiSgIYEcF/6Ond93oHiDsGb4kad8zjt+NPlOC1H0Q==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-reduce-idents@6.0.3:
    resolution: {integrity: sha512-G3yCqZDpsNPoQgbDUy3T0E6hqOQ5xigUtBQyrmq3tn2GxlyiL0yyl7H+T8ulQR6kOcHJ9t7/9H4/R2tv8tJbMA==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-reduce-initial@6.1.0:
    resolution: {integrity: sha512-RarLgBK/CrL1qZags04oKbVbrrVK2wcxhvta3GCxrZO4zveibqbRPmm2VI8sSgCXwoUHEliRSbOfpR0b/VIoiw==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-reduce-transforms@6.0.2:
    resolution: {integrity: sha512-sB+Ya++3Xj1WaT9+5LOOdirAxP7dJZms3GRcYheSPi1PiTMigsxHAdkrbItHxwYHr4kt1zL7mmcHstgMYT+aiA==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-replace-overflow-wrap@4.0.0:
    resolution: {integrity: sha512-KmF7SBPphT4gPPcKZc7aDkweHiKEEO8cla/GjcBK+ckKxiZslIu3C4GCRW3DNfL0o7yW7kMQu9xlZ1kXRXLXtw==}
    peerDependencies:
      postcss: ^8.0.3

  postcss-selector-not@8.0.1:
    resolution: {integrity: sha512-kmVy/5PYVb2UOhy0+LqUYAhKj7DUGDpSWa5LZqlkWJaaAV+dxxsOG3+St0yNLu6vsKD7Dmqx+nWQt0iil89+WA==}
    engines: {node: '>=18'}
    peerDependencies:
      postcss: ^8.4

  postcss-selector-parser@6.1.2:
    resolution: {integrity: sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==}
    engines: {node: '>=4'}

  postcss-selector-parser@7.0.0:
    resolution: {integrity: sha512-9RbEr1Y7FFfptd/1eEdntyjMwLeghW1bHX9GWjXo19vx4ytPQhANltvVxDggzJl7mnWM+dX28kb6cyS/4iQjlQ==}
    engines: {node: '>=4'}

  postcss-sort-media-queries@5.2.0:
    resolution: {integrity: sha512-AZ5fDMLD8SldlAYlvi8NIqo0+Z8xnXU2ia0jxmuhxAU+Lqt9K+AlmLNJ/zWEnE9x+Zx3qL3+1K20ATgNOr3fAA==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      postcss: ^8.4.23

  postcss-svgo@6.0.3:
    resolution: {integrity: sha512-dlrahRmxP22bX6iKEjOM+c8/1p+81asjKT+V5lrgOH944ryx/OHpclnIbGsKVd3uWOXFLYJwCVf0eEkJGvO96g==}
    engines: {node: ^14 || ^16 || >= 18}
    peerDependencies:
      postcss: ^8.4.31

  postcss-unique-selectors@6.0.4:
    resolution: {integrity: sha512-K38OCaIrO8+PzpArzkLKB42dSARtC2tmG6PvD4b1o1Q2E9Os8jzfWFfSy/rixsHwohtsDdFtAWGjFVFUdwYaMg==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss-value-parser@4.2.0:
    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}

  postcss-zindex@6.0.2:
    resolution: {integrity: sha512-5BxW9l1evPB/4ZIc+2GobEBoKC+h8gPGCMi+jxsYvd2x0mjq7wazk6DrP71pStqxE9Foxh5TVnonbWpFZzXaYg==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  postcss@8.4.49:
    resolution: {integrity: sha512-OCVPnIObs4N29kxTjzLfUryOkvZEq+pf8jTF0lg8E7uETuWHA+v7j3c/xJmiqpX450191LlmZfUKkXxkTry7nA==}
    engines: {node: ^10 || ^12 || >=14}

  pretty-error@4.0.0:
    resolution: {integrity: sha512-AoJ5YMAcXKYxKhuJGdcvse+Voc6v1RgnsR3nWcYU7q4t6z0Q6T86sv5Zq8VIRbOWWFpvdGE83LtdSMNd+6Y0xw==}

  pretty-time@1.1.0:
    resolution: {integrity: sha512-28iF6xPQrP8Oa6uxE6a1biz+lWeTOAPKggvjB8HAs6nVMKZwf5bG++632Dx614hIWgUPkgivRfG+a8uAXGTIbA==}
    engines: {node: '>=4'}

  prism-react-renderer@2.4.0:
    resolution: {integrity: sha512-327BsVCD/unU4CNLZTWVHyUHKnsqcvj2qbPlQ8MiBE2eq2rgctjigPA1Gp9HLF83kZ20zNN6jgizHJeEsyFYOw==}
    peerDependencies:
      react: '>=16.0.0'

  prismjs@1.29.0:
    resolution: {integrity: sha512-Kx/1w86q/epKcmte75LNrEoT+lX8pBpavuAbvJWRXar7Hz8jrtF+e3vY751p0R8H9HdArwaCTNDDzHg/ScJK1Q==}
    engines: {node: '>=6'}

  process-nextick-args@2.0.1:
    resolution: {integrity: sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==}

  prompts@2.4.2:
    resolution: {integrity: sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==}
    engines: {node: '>= 6'}

  prop-types@15.8.1:
    resolution: {integrity: sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==}

  property-information@6.5.0:
    resolution: {integrity: sha512-PgTgs/BlvHxOu8QuEN7wi5A0OmXaBcHpmCSTehcs6Uuu9IkDIEo13Hy7n898RHfrQ49vKCoGeWZSaAK01nwVig==}

  proto-list@1.2.4:
    resolution: {integrity: sha512-vtK/94akxsTMhe0/cbfpR+syPuszcuwhqVjJq26CuNDgFGj682oRBXOP5MJpv2r7JtE8MsiepGIqvvOTBwn2vA==}

  proxy-addr@2.0.7:
    resolution: {integrity: sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==}
    engines: {node: '>= 0.10'}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  pupa@3.1.0:
    resolution: {integrity: sha512-FLpr4flz5xZTSJxSeaheeMKN/EDzMdK7b8PTOC6a5PYFKTucWbdqjgqaEyH0shFiSJrVB1+Qqi4Tk19ccU6Aug==}
    engines: {node: '>=12.20'}

  qs@6.11.0:
    resolution: {integrity: sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==}
    engines: {node: '>=0.6'}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  queue@6.0.2:
    resolution: {integrity: sha512-iHZWu+q3IdFZFX36ro/lKBkSvfkztY5Y7HMiPlOUjhupPcG2JMfst2KKEpu5XndviX/3UhFbRngUPNKtgvtZiA==}

  quick-lru@5.1.1:
    resolution: {integrity: sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==}
    engines: {node: '>=10'}

  randombytes@2.1.0:
    resolution: {integrity: sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==}

  range-parser@1.2.0:
    resolution: {integrity: sha512-kA5WQoNVo4t9lNx2kQNFCxKeBl5IbbSNBl1M/tLkw9WCn+hxNBAW5Qh8gdhs63CJnhjJ2zQWFoqPJP2sK1AV5A==}
    engines: {node: '>= 0.6'}

  range-parser@1.2.1:
    resolution: {integrity: sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==}
    engines: {node: '>= 0.6'}

  raw-body@2.5.2:
    resolution: {integrity: sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==}
    engines: {node: '>= 0.8'}

  rc@1.2.8:
    resolution: {integrity: sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==}
    hasBin: true

  react-dev-utils@12.0.1:
    resolution: {integrity: sha512-84Ivxmr17KjUupyqzFode6xKhjwuEJDROWKJy/BthkL7Wn6NJ8h4WE6k/exAv6ImS+0oZLRRW5j/aINMHyeGeQ==}
    engines: {node: '>=14'}
    peerDependencies:
      typescript: '>=2.7'
      webpack: '>=4'
    peerDependenciesMeta:
      typescript:
        optional: true

  react-dom@18.3.1:
    resolution: {integrity: sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==}
    peerDependencies:
      react: ^18.3.1

  react-error-overlay@6.0.11:
    resolution: {integrity: sha512-/6UZ2qgEyH2aqzYZgQPxEnz33NJ2gNsnHA2o5+o4wW9bLM/JYQitNP9xPhsXwC08hMMovfGe/8retsdDsczPRg==}

  react-fast-compare@3.2.2:
    resolution: {integrity: sha512-nsO+KSNgo1SbJqJEYRE9ERzo7YtYbou/OqjSQKxV7jcKox7+usiUVZOAC+XnDOABXggQTno0Y1CpVnuWEc1boQ==}

  react-helmet-async@1.3.0:
    resolution: {integrity: sha512-9jZ57/dAn9t3q6hneQS0wukqC2ENOBgMNVEhb/ZG9ZSxUetzVIw4iAmEU38IaVg3QGYauQPhSeUTuIUtFglWpg==}
    peerDependencies:
      react: ^16.6.0 || ^17.0.0 || ^18.0.0
      react-dom: ^16.6.0 || ^17.0.0 || ^18.0.0

  react-helmet-async@2.0.4:
    resolution: {integrity: sha512-yxjQMWposw+akRfvpl5+8xejl4JtUlHnEBcji6u8/e6oc7ozT+P9PNTWMhCbz2y9tc5zPegw2BvKjQA+NwdEjQ==}
    peerDependencies:
      react: ^16.6.0 || ^17.0.0 || ^18.0.0
      react-dom: ^16.6.0 || ^17.0.0 || ^18.0.0

  react-is@16.13.1:
    resolution: {integrity: sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==}

  react-json-view-lite@1.3.0:
    resolution: {integrity: sha512-aN1biKC5v4DQkmQBlZjuMFR09MKZGMPtIg+cut8zEeg2HXd6gl2gRy0n4HMacHf0dznQgo0SVXN7eT8zV3hEuQ==}
    engines: {node: '>=14'}
    peerDependencies:
      react: ^16.13.1 || ^17.0.0 || ^18.0.0

  react-loadable-ssr-addon-v5-slorber@1.0.1:
    resolution: {integrity: sha512-lq3Lyw1lGku8zUEJPDxsNm1AfYHBrO9Y1+olAYwpUJ2IGFBskM0DMKok97A6LWUpHm+o7IvQBOWu9MLenp9Z+A==}
    engines: {node: '>=10.13.0'}
    peerDependencies:
      react-loadable: '*'
      webpack: '>=4.41.1 || 5.x'

  react-router-config@5.1.1:
    resolution: {integrity: sha512-DuanZjaD8mQp1ppHjgnnUnyOlqYXZVjnov/JzFhjLEwd3Z4dYjMSnqrEzzGThH47vpCOqPPwJM2FtthLeJ8Pbg==}
    peerDependencies:
      react: '>=15'
      react-router: '>=5'

  react-router-dom@5.3.4:
    resolution: {integrity: sha512-m4EqFMHv/Ih4kpcBCONHbkT68KoAeHN4p3lAGoNryfHi0dMy0kCzEZakiKRsvg5wHZ/JLrLW8o8KomWiz/qbYQ==}
    peerDependencies:
      react: '>=15'

  react-router@5.3.4:
    resolution: {integrity: sha512-Ys9K+ppnJah3QuaRiLxk+jDWOR1MekYQrlytiXxC1RyfbdsZkS5pvKAzCCr031xHixZwpnsYNT5xysdFHQaYsA==}
    peerDependencies:
      react: '>=15'

  react@18.3.1:
    resolution: {integrity: sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==}
    engines: {node: '>=0.10.0'}

  read-cache@1.0.0:
    resolution: {integrity: sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==}

  readable-stream@2.3.8:
    resolution: {integrity: sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==}

  readable-stream@3.6.2:
    resolution: {integrity: sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==}
    engines: {node: '>= 6'}

  readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}

  reading-time@1.5.0:
    resolution: {integrity: sha512-onYyVhBNr4CmAxFsKS7bz+uTLRakypIe4R+5A824vBSkQy/hB3fZepoVEf8OVAxzLvK+H/jm9TzpI3ETSm64Kg==}

  rechoir@0.6.2:
    resolution: {integrity: sha512-HFM8rkZ+i3zrV+4LQjwQ0W+ez98pApMGM3HUrN04j3CqzPOzl9nmP15Y8YXNm8QHGv/eacOVEjqhmWpkRV0NAw==}
    engines: {node: '>= 0.10'}

  recursive-readdir@2.2.3:
    resolution: {integrity: sha512-8HrF5ZsXk5FAH9dgsx3BlUer73nIhuj+9OrQwEbLTPOBzGkL1lsFCR01am+v+0m2Cmbs1nP12hLDl5FA7EszKA==}
    engines: {node: '>=6.0.0'}

  regenerate-unicode-properties@10.2.0:
    resolution: {integrity: sha512-DqHn3DwbmmPVzeKj9woBadqmXxLvQoQIwu7nopMc72ztvxVmVk2SBhSnx67zuye5TP+lJsb/TBQsjLKhnDf3MA==}
    engines: {node: '>=4'}

  regenerate@1.4.2:
    resolution: {integrity: sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==}

  regenerator-runtime@0.14.1:
    resolution: {integrity: sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==}

  regenerator-transform@0.15.2:
    resolution: {integrity: sha512-hfMp2BoF0qOk3uc5V20ALGDS2ddjQaLrdl7xrGXvAIow7qeWRM2VA2HuCHkUKk9slq3VwEwLNK3DFBqDfPGYtg==}

  regexpu-core@6.1.1:
    resolution: {integrity: sha512-k67Nb9jvwJcJmVpw0jPttR1/zVfnKf8Km0IPatrU/zJ5XeG3+Slx0xLXs9HByJSzXzrlz5EDvN6yLNMDc2qdnw==}
    engines: {node: '>=4'}

  registry-auth-token@5.0.2:
    resolution: {integrity: sha512-o/3ikDxtXaA59BmZuZrJZDJv8NMDGSj+6j6XaeBmHw8eY1i1qd9+6H+LjVvQXx3HN6aRCGa1cUdJ9RaJZUugnQ==}
    engines: {node: '>=14'}

  registry-url@6.0.1:
    resolution: {integrity: sha512-+crtS5QjFRqFCoQmvGduwYWEBng99ZvmFvF+cUJkGYF1L1BfU8C6Zp9T7f5vPAwyLkUExpvK+ANVZmGU49qi4Q==}
    engines: {node: '>=12'}

  regjsgen@0.8.0:
    resolution: {integrity: sha512-RvwtGe3d7LvWiDQXeQw8p5asZUmfU1G/l6WbUXeHta7Y2PEIvBTwH6E2EfmYUK8pxcxEdEmaomqyp0vZZ7C+3Q==}

  regjsparser@0.11.2:
    resolution: {integrity: sha512-3OGZZ4HoLJkkAZx/48mTXJNlmqTGOzc0o9OWQPuWpkOlXXPbyN6OafCcoXUnBqE2D3f/T5L+pWc1kdEmnfnRsA==}
    hasBin: true

  rehype-raw@7.0.0:
    resolution: {integrity: sha512-/aE8hCfKlQeA8LmyeyQvQF3eBiLRGNlfBJEvWH7ivp9sBqs7TNqBL5X3v157rM4IFETqDnIOO+z5M/biZbo9Ww==}

  relateurl@0.2.7:
    resolution: {integrity: sha512-G08Dxvm4iDN3MLM0EsP62EDV9IuhXPR6blNz6Utcp7zyV3tr4HVNINt6MpaRWbxoOHT3Q7YN2P+jaHX8vUbgog==}
    engines: {node: '>= 0.10'}

  remark-directive@3.0.0:
    resolution: {integrity: sha512-l1UyWJ6Eg1VPU7Hm/9tt0zKtReJQNOA4+iDMAxTyZNWnJnFlbS/7zhiel/rogTLQ2vMYwDzSJa4BiVNqGlqIMA==}

  remark-emoji@4.0.1:
    resolution: {integrity: sha512-fHdvsTR1dHkWKev9eNyhTo4EFwbUvJ8ka9SgeWkMPYFX4WoI7ViVBms3PjlQYgw5TLvNQso3GUB/b/8t3yo+dg==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  remark-frontmatter@5.0.0:
    resolution: {integrity: sha512-XTFYvNASMe5iPN0719nPrdItC9aU0ssC4v14mH1BCi1u0n1gAocqcujWUrByftZTbLhRtiKRyjYTSIOcr69UVQ==}

  remark-gfm@4.0.0:
    resolution: {integrity: sha512-U92vJgBPkbw4Zfu/IiW2oTZLSL3Zpv+uI7My2eq8JxKgqraFdU8YUGicEJCEgSbeaG+QDFqIcwwfMTOEelPxuA==}

  remark-mdx@3.0.1:
    resolution: {integrity: sha512-3Pz3yPQ5Rht2pM5R+0J2MrGoBSrzf+tJG94N+t/ilfdh8YLyyKYtidAYwTveB20BoHAcwIopOUqhcmh2F7hGYA==}

  remark-parse@11.0.0:
    resolution: {integrity: sha512-FCxlKLNGknS5ba/1lmpYijMUzX2esxW5xQqjWxw2eHFfS2MSdaHVINFmhjo+qN1WhZhNimq0dZATN9pH0IDrpA==}

  remark-rehype@11.1.0:
    resolution: {integrity: sha512-z3tJrAs2kIs1AqIIy6pzHmAHlF1hWQ+OdY4/hv+Wxe35EhyLKcajL33iUEn3ScxtFox9nUvRufR/Zre8Q08H/g==}

  remark-stringify@11.0.0:
    resolution: {integrity: sha512-1OSmLd3awB/t8qdoEOMazZkNsfVTeY4fTsgzcQFdXNq8ToTN4ZGwrMnlda4K6smTFKD+GRV6O48i6Z4iKgPPpw==}

  renderkid@3.0.0:
    resolution: {integrity: sha512-q/7VIQA8lmM1hF+jn+sFSPWGlMkSAeNYcPLmDQx2zzuiDfaLrOmumR8iaUKlenFgh0XRPIUeSPlH3A+AW3Z5pg==}

  repeat-string@1.6.1:
    resolution: {integrity: sha512-PV0dzCYDNfRi1jCDbJzpW7jNNDRuCOG/jI5ctQcGKt/clZD+YcPS3yIlWuTJMmESC8aevCFmWJy5wjAFgNqN6w==}
    engines: {node: '>=0.10'}

  require-from-string@2.0.2:
    resolution: {integrity: sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==}
    engines: {node: '>=0.10.0'}

  require-like@0.1.2:
    resolution: {integrity: sha512-oyrU88skkMtDdauHDuKVrgR+zuItqr6/c//FXzvmxRGMexSDc6hNvJInGW3LL46n+8b50RykrvwSUIIQH2LQ5A==}

  requires-port@1.0.0:
    resolution: {integrity: sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==}

  resolve-alpn@1.2.1:
    resolution: {integrity: sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g==}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-pathname@3.0.0:
    resolution: {integrity: sha512-C7rARubxI8bXFNB/hqcp/4iUeIXJhJZvFPFPiSPRnhU5UPxzMFIl+2E6yY6c4k9giDJAhtV+enfA+G89N6Csng==}

  resolve@1.22.8:
    resolution: {integrity: sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==}
    hasBin: true

  responselike@3.0.0:
    resolution: {integrity: sha512-40yHxbNcl2+rzXvZuVkrYohathsSJlMTXKryG5y8uciHv1+xDLHQpgjG64JUO9nrEq2jGLH6IZ8BcZyw3wrweg==}
    engines: {node: '>=14.16'}

  retry@0.13.1:
    resolution: {integrity: sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==}
    engines: {node: '>= 4'}

  reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rimraf@3.0.2:
    resolution: {integrity: sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==}
    deprecated: Rimraf versions prior to v4 are no longer supported
    hasBin: true

  rtl-detect@1.1.2:
    resolution: {integrity: sha512-PGMBq03+TTG/p/cRB7HCLKJ1MgDIi07+QU1faSjiYRfmY5UsAttV9Hs08jDAHVwcOwmVLcSJkpwyfXszVjWfIQ==}

  rtlcss@4.1.1:
    resolution: {integrity: sha512-/oVHgBtnPNcggP2aVXQjSy6N1mMAfHg4GSag0QtZBlD5bdDgAHwr4pydqJGd+SUCu9260+Pjqbjwtvu7EMH1KQ==}
    engines: {node: '>=12.0.0'}
    hasBin: true

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  safe-buffer@5.1.2:
    resolution: {integrity: sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  safer-buffer@2.1.2:
    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}

  sax@1.3.0:
    resolution: {integrity: sha512-0s+oAmw9zLl1V1cS9BtZN7JAd0cW5e0QH4W3LWEK6a4LaLEA2OTpGYWDY+6XasBLtz6wkm3u1xRw95mRuJ59WA==}

  scheduler@0.23.2:
    resolution: {integrity: sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==}

  schema-utils@2.7.0:
    resolution: {integrity: sha512-0ilKFI6QQF5nxDZLFn2dMjvc4hjg/Wkg7rHd3jK6/A4a1Hl9VFdQWvgB1UMGoU94pad1P/8N7fMcEnLnSiju8A==}
    engines: {node: '>= 8.9.0'}

  schema-utils@3.3.0:
    resolution: {integrity: sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==}
    engines: {node: '>= 10.13.0'}

  schema-utils@4.2.0:
    resolution: {integrity: sha512-L0jRsrPpjdckP3oPug3/VxNKt2trR8TcabrM6FOAAlvC/9Phcmm+cuAgTlxBqdBR1WJx7Naj9WHw+aOmheSVbw==}
    engines: {node: '>= 12.13.0'}

  search-insights@2.13.0:
    resolution: {integrity: sha512-Orrsjf9trHHxFRuo9/rzm0KIWmgzE8RMlZMzuhZOJ01Rnz3D0YBAe+V6473t6/H6c7irs6Lt48brULAiRWb3Vw==}

  section-matter@1.0.0:
    resolution: {integrity: sha512-vfD3pmTzGpufjScBh50YHKzEu2lxBWhVEHsNGoEXmCmn2hKGfeNLYMzCJpe8cD7gqX7TJluOVpBkAequ6dgMmA==}
    engines: {node: '>=4'}

  select-hose@2.0.0:
    resolution: {integrity: sha512-mEugaLK+YfkijB4fx0e6kImuJdCIt2LxCRcbEYPqRGCs4F2ogyfZU5IAZRdjCP8JPq2AtdNoC/Dux63d9Kiryg==}

  selfsigned@2.4.1:
    resolution: {integrity: sha512-th5B4L2U+eGLq1TVh7zNRGBapioSORUeymIydxgFpwww9d2qyKvtuPU2jJuHvYAwwqi2Y596QBL3eEqcPEYL8Q==}
    engines: {node: '>=10'}

  semver-diff@4.0.0:
    resolution: {integrity: sha512-0Ju4+6A8iOnpL/Thra7dZsSlOHYAHIeMxfhWQRI1/VLcT3WDBZKKtQt/QkBOsiIN9ZpuvHE6cGZ0x4glCMmfiA==}
    engines: {node: '>=12'}

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  semver@7.6.0:
    resolution: {integrity: sha512-EnwXhrlwXMk9gKu5/flx5sv/an57AkRplG3hTK68W7FRDN+k+OWBj65M7719OkA82XLBxrcX0KSHj+X5COhOVg==}
    engines: {node: '>=10'}
    hasBin: true

  send@0.18.0:
    resolution: {integrity: sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==}
    engines: {node: '>= 0.8.0'}

  serialize-javascript@6.0.2:
    resolution: {integrity: sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==}

  serve-handler@6.1.6:
    resolution: {integrity: sha512-x5RL9Y2p5+Sh3D38Fh9i/iQ5ZK+e4xuXRd/pGbM4D13tgo/MGwbttUk8emytcr1YYzBYs+apnUngBDFYfpjPuQ==}

  serve-index@1.9.1:
    resolution: {integrity: sha512-pXHfKNP4qujrtteMrSBb0rc8HJ9Ms/GrXwcUtUtD5s4ewDJI8bT3Cz2zTVRMKtri49pLx2e0Ya8ziP5Ya2pZZw==}
    engines: {node: '>= 0.8.0'}

  serve-static@1.15.0:
    resolution: {integrity: sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==}
    engines: {node: '>= 0.8.0'}

  set-function-length@1.2.2:
    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
    engines: {node: '>= 0.4'}

  setprototypeof@1.1.0:
    resolution: {integrity: sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==}

  setprototypeof@1.2.0:
    resolution: {integrity: sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==}

  shallow-clone@3.0.1:
    resolution: {integrity: sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==}
    engines: {node: '>=8'}

  shallowequal@1.1.0:
    resolution: {integrity: sha512-y0m1JoUZSlPAjXVtPPW70aZWfIL/dSP7AFkRnniLCrK/8MDKog3TySTBmckD+RObVxH0v4Tox67+F14PdED2oQ==}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  shell-quote@1.8.1:
    resolution: {integrity: sha512-6j1W9l1iAs/4xYBI1SYOVZyFcCis9b4KCLQ8fgAGG07QvzaRLVVRQvAy85yNmmZSjYjg4MWh4gNvlPujU/5LpA==}

  shelljs@0.8.5:
    resolution: {integrity: sha512-TiwcRcrkhHvbrZbnRcFYMLl30Dfov3HKqzp5tO5b4pt6G/SezKcYhmDg15zXVBswHmctSAQKznqNW2LO5tTDow==}
    engines: {node: '>=4'}
    hasBin: true

  side-channel@1.0.6:
    resolution: {integrity: sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==}
    engines: {node: '>= 0.4'}

  signal-exit@3.0.7:
    resolution: {integrity: sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  sirv@2.0.4:
    resolution: {integrity: sha512-94Bdh3cC2PKrbgSOUqTiGPWVZeSiXfKOVZNJniWoqrWrRkB1CJzBU3NEbiTsPcYy1lDsANA/THzS+9WBiy5nfQ==}
    engines: {node: '>= 10'}

  sisteransi@1.0.5:
    resolution: {integrity: sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==}

  sitemap@7.1.1:
    resolution: {integrity: sha512-mK3aFtjz4VdJN0igpIJrinf3EO8U8mxOPsTBzSsy06UtjZQJ3YY3o3Xa7zSc5nMqcMrRwlChHZ18Kxg0caiPBg==}
    engines: {node: '>=12.0.0', npm: '>=5.6.0'}
    hasBin: true

  skin-tone@2.0.0:
    resolution: {integrity: sha512-kUMbT1oBJCpgrnKoSr0o6wPtvRWT9W9UKvGLwfJYO2WuahZRHOpEyL1ckyMGgMWh0UdpmaoFqKKD29WTomNEGA==}
    engines: {node: '>=8'}

  slash@3.0.0:
    resolution: {integrity: sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==}
    engines: {node: '>=8'}

  slash@4.0.0:
    resolution: {integrity: sha512-3dOsAHXXUkQTpOYcoAxLIorMTp4gIQr5IW3iVb7A7lFIp0VHhnynm9izx6TssdrIcVIESAlVjtnO2K8bg+Coew==}
    engines: {node: '>=12'}

  snake-case@3.0.4:
    resolution: {integrity: sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==}

  sockjs@0.3.24:
    resolution: {integrity: sha512-GJgLTZ7vYb/JtPSSZ10hsOYIvEYsjbNU+zPdIHcUaWVNUEPivzxku31865sSSud0Da0W4lEeOPlmw93zLQchuQ==}

  sort-css-media-queries@2.2.0:
    resolution: {integrity: sha512-0xtkGhWCC9MGt/EzgnvbbbKhqWjl1+/rncmhTh5qCpbYguXh6S/qwePfv/JQ8jePXXmqingylxoC49pCkSPIbA==}
    engines: {node: '>= 6.3.0'}

  source-map-js@1.2.1:
    resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}
    engines: {node: '>=0.10.0'}

  source-map-support@0.5.21:
    resolution: {integrity: sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==}

  source-map@0.6.1:
    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}
    engines: {node: '>=0.10.0'}

  source-map@0.7.4:
    resolution: {integrity: sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==}
    engines: {node: '>= 8'}

  space-separated-tokens@2.0.2:
    resolution: {integrity: sha512-PEGlAwrG8yXGXRjW32fGbg66JAlOAwbObuqVoJpv/mRgoWDQfgH1wDPvtzWyUSNAXBGSk8h755YDbbcEy3SH2Q==}

  spdy-transport@3.0.0:
    resolution: {integrity: sha512-hsLVFE5SjA6TCisWeJXFKniGGOpBgMLmerfO2aCyCU5s7nJ/rpAepqmFifv/GCbSbueEeAJJnmSQ2rKC/g8Fcw==}

  spdy@4.0.2:
    resolution: {integrity: sha512-r46gZQZQV+Kl9oItvl1JZZqJKGr+oEkB08A6BzkiR7593/7IbtuncXHd2YoYeTsG4157ZssMu9KYvUHLcjcDoA==}
    engines: {node: '>=6.0.0'}

  sprintf-js@1.0.3:
    resolution: {integrity: sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==}

  srcset@4.0.0:
    resolution: {integrity: sha512-wvLeHgcVHKO8Sc/H/5lkGreJQVeYMm9rlmt8PuR1xE31rIuXhuzznUUqAt8MqLhB3MqJdFzlNAfpcWnxiFUcPw==}
    engines: {node: '>=12'}

  statuses@1.5.0:
    resolution: {integrity: sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==}
    engines: {node: '>= 0.6'}

  statuses@2.0.1:
    resolution: {integrity: sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==}
    engines: {node: '>= 0.8'}

  std-env@3.7.0:
    resolution: {integrity: sha512-JPbdCEQLj1w5GilpiHAx3qJvFndqybBysA3qUOnznweH4QbNYUsW/ea8QzSrnh0vNsezMMw5bcVool8lM0gwzg==}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string_decoder@1.1.1:
    resolution: {integrity: sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==}

  string_decoder@1.3.0:
    resolution: {integrity: sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==}

  stringify-entities@4.0.4:
    resolution: {integrity: sha512-IwfBptatlO+QCJUo19AqvrPNqlVMpW9YEL2LIVY+Rpv2qsjCGxaDLNRgeGsQWJhfItebuJhsGSLjaBbNSQ+ieg==}

  stringify-object@3.3.0:
    resolution: {integrity: sha512-rHqiFh1elqCQ9WPLIC8I0Q/g/wj5J1eMkyoiD6eoQApWHP0FtlK7rqnhmabL5VUY9JQCcqwwvlOaSuutekgyrw==}
    engines: {node: '>=4'}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-bom-string@1.0.0:
    resolution: {integrity: sha512-uCC2VHvQRYu+lMh4My/sFNmF2klFymLX1wHJeXnbEJERpV/ZsVuonzerjfrGpIGF7LBVa1O7i9kjiWvJiFck8g==}
    engines: {node: '>=0.10.0'}

  strip-final-newline@2.0.0:
    resolution: {integrity: sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==}
    engines: {node: '>=6'}

  strip-json-comments@2.0.1:
    resolution: {integrity: sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==}
    engines: {node: '>=0.10.0'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  style-to-object@0.4.4:
    resolution: {integrity: sha512-HYNoHZa2GorYNyqiCaBgsxvcJIn7OHq6inEga+E6Ke3m5JkoqpQbnFssk4jwe+K7AhGa2fcha4wSOf1Kn01dMg==}

  style-to-object@1.0.6:
    resolution: {integrity: sha512-khxq+Qm3xEyZfKd/y9L3oIWQimxuc4STrQKtQn8aSDRHb8mFgpukgX1hdzfrMEW6JCjyJ8p89x+IUMVnCBI1PA==}

  stylehacks@6.1.1:
    resolution: {integrity: sha512-gSTTEQ670cJNoaeIp9KX6lZmm8LJ3jPB5yJmX8Zq/wQxOsAFXV3qjWzHas3YYk1qesuVIyYWWUpZ0vSE/dTSGg==}
    engines: {node: ^14 || ^16 || >=18.0}
    peerDependencies:
      postcss: ^8.4.31

  sucrase@3.35.0:
    resolution: {integrity: sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-color@8.1.1:
    resolution: {integrity: sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==}
    engines: {node: '>=10'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  svg-parser@2.0.4:
    resolution: {integrity: sha512-e4hG1hRwoOdRb37cIMSgzNsxyzKfayW6VOflrwvR+/bzrkyxY/31WkbgnQpgtrNp1SdpJvpUAGTa/ZoiPNDuRQ==}

  svgo@3.2.0:
    resolution: {integrity: sha512-4PP6CMW/V7l/GmKRKzsLR8xxjdHTV4IMvhTnpuHwwBazSIlw5W/5SmPjN8Dwyt7lKbSJrRDgp4t9ph0HgChFBQ==}
    engines: {node: '>=14.0.0'}
    hasBin: true

  tailwindcss-bg-patterns@0.3.0:
    resolution: {integrity: sha512-3pXCiu9MPBvfBAEYgrxpNZLZoDlVHdkofpuQ9uhVQ2RT+80BTTweL9s0uIvakfH2LRl4GCG+nncyCB+1aN1gpA==}
    peerDependencies:
      tailwindcss: '>2'

  tailwindcss@3.4.16:
    resolution: {integrity: sha512-TI4Cyx7gDiZ6r44ewaJmt0o6BrMCT5aK5e0rmJ/G9Xq3w7CX/5VXl/zIPEJZFUK5VEqwByyhqNPycPlvcK4ZNw==}
    engines: {node: '>=14.0.0'}
    hasBin: true

  tapable@1.1.3:
    resolution: {integrity: sha512-4WK/bYZmj8xLr+HUCODHGF1ZFzsYffasLUgEiMBY4fgtltdO6B4WJtlSbPaDTLpYTcGVwM2qLnFTICEcNxs3kA==}
    engines: {node: '>=6'}

  tapable@2.2.1:
    resolution: {integrity: sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==}
    engines: {node: '>=6'}

  terser-webpack-plugin@5.3.10:
    resolution: {integrity: sha512-BKFPWlPDndPs+NGGCr1U59t0XScL5317Y0UReNrHaw9/FwhPENlq6bfgs+4yPfyP51vqC1bQ4rp1EfXW5ZSH9w==}
    engines: {node: '>= 10.13.0'}
    peerDependencies:
      '@swc/core': '*'
      esbuild: '*'
      uglify-js: '*'
      webpack: ^5.1.0
    peerDependenciesMeta:
      '@swc/core':
        optional: true
      esbuild:
        optional: true
      uglify-js:
        optional: true

  terser@5.30.4:
    resolution: {integrity: sha512-xRdd0v64a8mFK9bnsKVdoNP9GQIKUAaJPTaqEQDL4w/J8WaW4sWXXoMZ+6SimPkfT5bElreXf8m9HnmPc3E1BQ==}
    engines: {node: '>=10'}
    hasBin: true

  text-table@0.2.0:
    resolution: {integrity: sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==}

  thenify-all@1.6.0:
    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
    engines: {node: '>=0.8'}

  thenify@3.3.1:
    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}

  thunky@1.1.0:
    resolution: {integrity: sha512-eHY7nBftgThBqOyHGVN+l8gF0BucP09fMo0oO/Lb0w1OF80dJv+lDVpXG60WMQvkcxAkNybKsrEIE3ZtKGmPrA==}

  tiny-invariant@1.3.3:
    resolution: {integrity: sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==}

  tiny-warning@1.0.3:
    resolution: {integrity: sha512-lBN9zLN/oAf68o3zNXYrdCt1kP8WsiGW8Oo2ka41b2IM5JL/S1CTyX1rW0mb/zSuJun0ZUrDxx4sqvYS2FWzPA==}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  toidentifier@1.0.1:
    resolution: {integrity: sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==}
    engines: {node: '>=0.6'}

  totalist@3.0.1:
    resolution: {integrity: sha512-sf4i37nQ2LBx4m3wB74y+ubopq6W/dIzXg0FDGjsYnZHVa1Da8FH853wlL2gtUhg+xJXjfk3kUZS3BRoQeoQBQ==}
    engines: {node: '>=6'}

  trim-lines@3.0.1:
    resolution: {integrity: sha512-kRj8B+YHZCc9kQYdWfJB2/oUl9rA99qbowYYBtr4ui4mZyAQ2JpvVBd/6U2YloATfqBhBTSMhTpgBHtU0Mf3Rg==}

  trough@2.2.0:
    resolution: {integrity: sha512-tmMpK00BjZiUyVyvrBK7knerNgmgvcV/KLVyuma/SC+TQN167GrMRciANTz09+k3zW8L8t60jWO1GpfkZdjTaw==}

  ts-interface-checker@0.1.13:
    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}

  tslib@2.6.2:
    resolution: {integrity: sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==}

  type-fest@0.21.3:
    resolution: {integrity: sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==}
    engines: {node: '>=10'}

  type-fest@1.4.0:
    resolution: {integrity: sha512-yGSza74xk0UG8k+pLh5oeoYirvIiWo5t0/o3zHHAO2tRDiZcxWP7fywNlXhqb6/r6sWvwi+RsyQMWhVLe4BVuA==}
    engines: {node: '>=10'}

  type-fest@2.19.0:
    resolution: {integrity: sha512-RAH822pAdBgcNMAfWnCBU3CFZcfZ/i1eZjwFU/dsLKumyuuP3niueg2UAukXYF0E2AAoc82ZSSf9J0WQBinzHA==}
    engines: {node: '>=12.20'}

  type-is@1.6.18:
    resolution: {integrity: sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==}
    engines: {node: '>= 0.6'}

  typedarray-to-buffer@3.1.5:
    resolution: {integrity: sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==}

  typescript@5.7.2:
    resolution: {integrity: sha512-i5t66RHxDvVN40HfDd1PsEThGNnlMCMT3jMUuoh9/0TaqWevNontacunWyN02LA9/fIbEWlcHZcgTKb9QoaLfg==}
    engines: {node: '>=14.17'}
    hasBin: true

  undici-types@5.26.5:
    resolution: {integrity: sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==}

  unicode-canonical-property-names-ecmascript@2.0.0:
    resolution: {integrity: sha512-yY5PpDlfVIU5+y/BSCxAJRBIS1Zc2dDG3Ujq+sR0U+JjUevW2JhocOF+soROYDSaAezOzOKuyyixhD6mBknSmQ==}
    engines: {node: '>=4'}

  unicode-emoji-modifier-base@1.0.0:
    resolution: {integrity: sha512-yLSH4py7oFH3oG/9K+XWrz1pSi3dfUrWEnInbxMfArOfc1+33BlGPQtLsOYwvdMy11AwUBetYuaRxSPqgkq+8g==}
    engines: {node: '>=4'}

  unicode-match-property-ecmascript@2.0.0:
    resolution: {integrity: sha512-5kaZCrbp5mmbz5ulBkDkbY0SsPOjKqVS35VpL9ulMPfSl0J0Xsm+9Evphv9CoIZFwre7aJoa94AY6seMKGVN5Q==}
    engines: {node: '>=4'}

  unicode-match-property-value-ecmascript@2.1.0:
    resolution: {integrity: sha512-qxkjQt6qjg/mYscYMC0XKRn3Rh0wFPlfxB0xkt9CfyTvpX1Ra0+rAmdX2QyAobptSEvuy4RtpPRui6XkV+8wjA==}
    engines: {node: '>=4'}

  unicode-property-aliases-ecmascript@2.1.0:
    resolution: {integrity: sha512-6t3foTQI9qne+OZoVQB/8x8rk2k1eVy1gRXhV3oFQ5T6R1dqQ1xtin3XqSlx3+ATBkliTaR/hHyJBm+LVPNM8w==}
    engines: {node: '>=4'}

  unified@11.0.4:
    resolution: {integrity: sha512-apMPnyLjAX+ty4OrNap7yumyVAMlKx5IWU2wlzzUdYJO9A8f1p9m/gywF/GM2ZDFcjQPrx59Mc90KwmxsoklxQ==}

  unique-string@3.0.0:
    resolution: {integrity: sha512-VGXBUVwxKMBUznyffQweQABPRRW1vHZAbadFZud4pLFAqRGvv/96vafgjWFqzourzr8YonlQiPgH0YCJfawoGQ==}
    engines: {node: '>=12'}

  unist-util-is@6.0.0:
    resolution: {integrity: sha512-2qCTHimwdxLfz+YzdGfkqNlH0tLi9xjTnHddPmJwtIG9MGsdbutfTc4P+haPD7l7Cjxf/WZj+we5qfVPvvxfYw==}

  unist-util-position-from-estree@2.0.0:
    resolution: {integrity: sha512-KaFVRjoqLyF6YXCbVLNad/eS4+OfPQQn2yOd7zF/h5T/CSL2v8NpN6a5TPvtbXthAGw5nG+PuTtq+DdIZr+cRQ==}

  unist-util-position@5.0.0:
    resolution: {integrity: sha512-fucsC7HjXvkB5R3kTCO7kUjRdrS0BJt3M/FPxmHMBOm8JQi2BsHAHFsy27E0EolP8rp0NzXsJ+jNPyDWvOJZPA==}

  unist-util-remove-position@5.0.0:
    resolution: {integrity: sha512-Hp5Kh3wLxv0PHj9m2yZhhLt58KzPtEYKQQ4yxfYFEO7EvHwzyDYnduhHnY1mDxoqr7VUwVuHXk9RXKIiYS1N8Q==}

  unist-util-stringify-position@4.0.0:
    resolution: {integrity: sha512-0ASV06AAoKCDkS2+xw5RXJywruurpbC4JZSm7nr7MOt1ojAzvyyaO+UxZf18j8FCF6kmzCZKcAgN/yu2gm2XgQ==}

  unist-util-visit-parents@6.0.1:
    resolution: {integrity: sha512-L/PqWzfTP9lzzEa6CKs0k2nARxTdZduw3zyh8d2NVBnsyvHjSX4TWse388YrrQKbvI8w20fGjGlhgT96WwKykw==}

  unist-util-visit@5.0.0:
    resolution: {integrity: sha512-MR04uvD+07cwl/yhVuVWAtw+3GOR/knlL55Nd/wAdblk27GCVt3lqpTivy/tkJcZoNPzTwS1Y+KMojlLDhoTzg==}

  universalify@2.0.1:
    resolution: {integrity: sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==}
    engines: {node: '>= 10.0.0'}

  unpipe@1.0.0:
    resolution: {integrity: sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==}
    engines: {node: '>= 0.8'}

  update-browserslist-db@1.1.0:
    resolution: {integrity: sha512-EdRAaAyk2cUE1wOf2DkEhzxqOQvFOoRJFNS6NeyJ01Gp2beMRpBAINjM2iDXE3KCuKhwnvHIQCJm6ThL2Z+HzQ==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  update-browserslist-db@1.1.1:
    resolution: {integrity: sha512-R8UzCaa9Az+38REPiJ1tXlImTJXlVfgHZsglwBD/k6nj76ctsH1E3q4doGrukiLQd3sGQYu56r5+lo5r94l29A==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  update-notifier@6.0.2:
    resolution: {integrity: sha512-EDxhTEVPZZRLWYcJ4ZXjGFN0oP7qYvbXWzEgRm/Yql4dHX5wDbvh89YHP6PK1lzZJYrMtXUuZZz8XGK+U6U1og==}
    engines: {node: '>=14.16'}

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  url-loader@4.1.1:
    resolution: {integrity: sha512-3BTV812+AVHHOJQO8O5MkWgZ5aosP7GnROJwvzLS9hWDj00lZ6Z0wNak423Lp9PBZN05N+Jk/N5Si8jRAlGyWA==}
    engines: {node: '>= 10.13.0'}
    peerDependencies:
      file-loader: '*'
      webpack: ^4.0.0 || ^5.0.0
    peerDependenciesMeta:
      file-loader:
        optional: true

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  utila@0.4.0:
    resolution: {integrity: sha512-Z0DbgELS9/L/75wZbro8xAnT50pBVFQZ+hUEueGDU5FN51YSCYM+jdxsfCiHjwNP/4LCDD0i/graKpeBnOXKRA==}

  utility-types@3.11.0:
    resolution: {integrity: sha512-6Z7Ma2aVEWisaL6TvBCy7P8rm2LQoPv6dJ7ecIaIixHcwfbJ0x7mWdbcwlIM5IGQxPZSFYeqRCqlOOeKoJYMkw==}
    engines: {node: '>= 4'}

  utils-merge@1.0.1:
    resolution: {integrity: sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==}
    engines: {node: '>= 0.4.0'}

  uuid@8.3.2:
    resolution: {integrity: sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==}
    hasBin: true

  value-equal@1.0.1:
    resolution: {integrity: sha512-NOJ6JZCAWr0zlxZt+xqCHNTEKOsrks2HQd4MqhP1qy4z1SkbEP467eNx6TgDKXMvUOb+OENfJCZwM+16n7fRfw==}

  vary@1.1.2:
    resolution: {integrity: sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==}
    engines: {node: '>= 0.8'}

  vfile-location@5.0.2:
    resolution: {integrity: sha512-NXPYyxyBSH7zB5U6+3uDdd6Nybz6o6/od9rk8bp9H8GR3L+cm/fC0uUTbqBmUTnMCUDslAGBOIKNfvvb+gGlDg==}

  vfile-message@4.0.2:
    resolution: {integrity: sha512-jRDZ1IMLttGj41KcZvlrYAaI3CfqpLpfpf+Mfig13viT6NKvRzWZ+lXz0Y5D60w6uJIBAOGq9mSHf0gktF0duw==}

  vfile@6.0.1:
    resolution: {integrity: sha512-1bYqc7pt6NIADBJ98UiG0Bn/CHIVOoZ/IyEkqIruLg0mE1BKzkOXY2D6CSqQIcKqgadppE5lrxgWXJmXd7zZJw==}

  watchpack@2.4.1:
    resolution: {integrity: sha512-8wrBCMtVhqcXP2Sup1ctSkga6uc2Bx0IIvKyT7yTFier5AXHooSI+QyQQAtTb7+E0IUCCKyTFmXqdqgum2XWGg==}
    engines: {node: '>=10.13.0'}

  wbuf@1.7.3:
    resolution: {integrity: sha512-O84QOnr0icsbFGLS0O3bI5FswxzRr8/gHwWkDlQFskhSPryQXvrTMxjxGP4+iWYoauLoBvfDpkrOauZ+0iZpDA==}

  web-namespaces@2.0.1:
    resolution: {integrity: sha512-bKr1DkiNa2krS7qxNtdrtHAmzuYGFQLiQ13TsorsdT6ULTkPLKuu5+GsFpDlg6JFjUTwX2DyhMPG2be8uPrqsQ==}

  webpack-bundle-analyzer@4.10.2:
    resolution: {integrity: sha512-vJptkMm9pk5si4Bv922ZbKLV8UTT4zib4FPgXMhgzUny0bfDDkLXAVQs3ly3fS4/TN9ROFtb0NFrm04UXFE/Vw==}
    engines: {node: '>= 10.13.0'}
    hasBin: true

  webpack-dev-middleware@5.3.4:
    resolution: {integrity: sha512-BVdTqhhs+0IfoeAf7EoH5WE+exCmqGerHfDM0IL096Px60Tq2Mn9MAbnaGUe6HiMa41KMCYF19gyzZmBcq/o4Q==}
    engines: {node: '>= 12.13.0'}
    peerDependencies:
      webpack: ^4.0.0 || ^5.0.0

  webpack-dev-server@4.15.2:
    resolution: {integrity: sha512-0XavAZbNJ5sDrCbkpWL8mia0o5WPOd2YGtxrEiZkBK9FjLppIUK2TgxK6qGD2P3hUXTJNNPVibrerKcx5WkR1g==}
    engines: {node: '>= 12.13.0'}
    hasBin: true
    peerDependencies:
      webpack: ^4.37.0 || ^5.0.0
      webpack-cli: '*'
    peerDependenciesMeta:
      webpack:
        optional: true
      webpack-cli:
        optional: true

  webpack-merge@5.10.0:
    resolution: {integrity: sha512-+4zXKdx7UnO+1jaN4l2lHVD+mFvnlZQP/6ljaJVb4SZiwIKeUnrT5l0gkT8z+n4hKpC+jpOv6O9R+gLtag7pSA==}
    engines: {node: '>=10.0.0'}

  webpack-merge@6.0.1:
    resolution: {integrity: sha512-hXXvrjtx2PLYx4qruKl+kyRSLc52V+cCvMxRjmKwoA+CBbbF5GfIBtR6kCvl0fYGqTUPKB+1ktVmTHqMOzgCBg==}
    engines: {node: '>=18.0.0'}

  webpack-sources@3.2.3:
    resolution: {integrity: sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==}
    engines: {node: '>=10.13.0'}

  webpack@5.96.1:
    resolution: {integrity: sha512-l2LlBSvVZGhL4ZrPwyr8+37AunkcYj5qh8o6u2/2rzoPc8gxFJkLj1WxNgooi9pnoc06jh0BjuXnamM4qlujZA==}
    engines: {node: '>=10.13.0'}
    hasBin: true
    peerDependencies:
      webpack-cli: '*'
    peerDependenciesMeta:
      webpack-cli:
        optional: true

  webpackbar@6.0.1:
    resolution: {integrity: sha512-TnErZpmuKdwWBdMoexjio3KKX6ZtoKHRVvLIU0A47R0VVBDtx3ZyOJDktgYixhoJokZTYTt1Z37OkO9pnGJa9Q==}
    engines: {node: '>=14.21.3'}
    peerDependencies:
      webpack: 3 || 4 || 5

  websocket-driver@0.7.4:
    resolution: {integrity: sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==}
    engines: {node: '>=0.8.0'}

  websocket-extensions@0.1.4:
    resolution: {integrity: sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==}
    engines: {node: '>=0.8.0'}

  which@1.3.1:
    resolution: {integrity: sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==}
    hasBin: true

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  widest-line@4.0.1:
    resolution: {integrity: sha512-o0cyEG0e8GPzT4iGHphIOh0cJOV8fivsXxddQasHPHfoZf1ZexrfeA21w2NaEN1RHE+fXlfISmOE8R9N3u3Qig==}
    engines: {node: '>=12'}

  wildcard@2.0.1:
    resolution: {integrity: sha512-CC1bOL87PIWSBhDcTrdeLo6eGT7mCFtrg0uIJtqJUFyK+eJnzl8A1niH56uu7KMa5XFrtiV+AQuHO3n7DsHnLQ==}

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  write-file-atomic@3.0.3:
    resolution: {integrity: sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==}

  ws@7.5.9:
    resolution: {integrity: sha512-F+P9Jil7UiSKSkppIiD94dN07AwvFixvLIj1Og1Rl9GGMuNipJnV9JzjD6XuqmAeiswGvUmNLjr5cFuXwNS77Q==}
    engines: {node: '>=8.3.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: ^5.0.2
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  ws@8.16.0:
    resolution: {integrity: sha512-HS0c//TP7Ina87TfiPUz1rQzMhHrl/SG2guqRcTOIUYD2q8uhUdNHZYJUaQ8aTGPzCh+c6oawMKW35nFl1dxyQ==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: '>=5.0.2'
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  xdg-basedir@5.1.0:
    resolution: {integrity: sha512-GCPAHLvrIH13+c0SuacwvRYj2SxJXQ4kaVTT5xgL3kPrz56XxkF21IGhjSE1+W0aw7gpBWRGXLCPnPby6lSpmQ==}
    engines: {node: '>=12'}

  xml-js@1.6.11:
    resolution: {integrity: sha512-7rVi2KMfwfWFl+GpPg6m80IVMWXLRjO+PxTq7V2CDhoGak0wzYzFgUY2m4XJ47OGdXd8eLE8EmwfAmdjw7lC1g==}
    hasBin: true

  yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}

  yallist@4.0.0:
    resolution: {integrity: sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==}

  yaml@1.10.2:
    resolution: {integrity: sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==}
    engines: {node: '>= 6'}

  yaml@2.4.1:
    resolution: {integrity: sha512-pIXzoImaqmfOrL7teGUBt/T7ZDnyeGBWyXQBvOVhLkWLN37GXv8NMLK406UY6dS51JfcQHsmcW5cJ441bHg6Lg==}
    engines: {node: '>= 14'}
    hasBin: true

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

  yocto-queue@1.0.0:
    resolution: {integrity: sha512-9bnSc/HEW2uRy67wc+T8UwauLuPJVn28jb+GtJY16iiKWyvmYJRXVT4UamsAEGQfPohgr2q4Tq0sQbQlxTfi1g==}
    engines: {node: '>=12.20'}

  zwitch@2.0.4:
    resolution: {integrity: sha512-bXE4cR/kVZhKZX/RjPEflHaKVhUVl85noU3v6b8apfQEc1x4A+zBxjZ4lN8LqGd6WZ3dl98pY4o717VFmoPp+A==}

snapshots:

  '@algolia/autocomplete-core@1.9.3(@algolia/client-search@4.23.3)(algoliasearch@4.23.3)(search-insights@2.13.0)':
    dependencies:
      '@algolia/autocomplete-plugin-algolia-insights': 1.9.3(@algolia/client-search@4.23.3)(algoliasearch@4.23.3)(search-insights@2.13.0)
      '@algolia/autocomplete-shared': 1.9.3(@algolia/client-search@4.23.3)(algoliasearch@4.23.3)
    transitivePeerDependencies:
      - '@algolia/client-search'
      - algoliasearch
      - search-insights

  '@algolia/autocomplete-plugin-algolia-insights@1.9.3(@algolia/client-search@4.23.3)(algoliasearch@4.23.3)(search-insights@2.13.0)':
    dependencies:
      '@algolia/autocomplete-shared': 1.9.3(@algolia/client-search@4.23.3)(algoliasearch@4.23.3)
      search-insights: 2.13.0
    transitivePeerDependencies:
      - '@algolia/client-search'
      - algoliasearch

  '@algolia/autocomplete-preset-algolia@1.9.3(@algolia/client-search@4.23.3)(algoliasearch@4.23.3)':
    dependencies:
      '@algolia/autocomplete-shared': 1.9.3(@algolia/client-search@4.23.3)(algoliasearch@4.23.3)
      '@algolia/client-search': 4.23.3
      algoliasearch: 4.23.3

  '@algolia/autocomplete-shared@1.9.3(@algolia/client-search@4.23.3)(algoliasearch@4.23.3)':
    dependencies:
      '@algolia/client-search': 4.23.3
      algoliasearch: 4.23.3

  '@algolia/cache-browser-local-storage@4.23.3':
    dependencies:
      '@algolia/cache-common': 4.23.3

  '@algolia/cache-common@4.23.3': {}

  '@algolia/cache-in-memory@4.23.3':
    dependencies:
      '@algolia/cache-common': 4.23.3

  '@algolia/client-account@4.23.3':
    dependencies:
      '@algolia/client-common': 4.23.3
      '@algolia/client-search': 4.23.3
      '@algolia/transporter': 4.23.3

  '@algolia/client-analytics@4.23.3':
    dependencies:
      '@algolia/client-common': 4.23.3
      '@algolia/client-search': 4.23.3
      '@algolia/requester-common': 4.23.3
      '@algolia/transporter': 4.23.3

  '@algolia/client-common@4.23.3':
    dependencies:
      '@algolia/requester-common': 4.23.3
      '@algolia/transporter': 4.23.3

  '@algolia/client-personalization@4.23.3':
    dependencies:
      '@algolia/client-common': 4.23.3
      '@algolia/requester-common': 4.23.3
      '@algolia/transporter': 4.23.3

  '@algolia/client-search@4.23.3':
    dependencies:
      '@algolia/client-common': 4.23.3
      '@algolia/requester-common': 4.23.3
      '@algolia/transporter': 4.23.3

  '@algolia/events@4.0.1': {}

  '@algolia/logger-common@4.23.3': {}

  '@algolia/logger-console@4.23.3':
    dependencies:
      '@algolia/logger-common': 4.23.3

  '@algolia/recommend@4.23.3':
    dependencies:
      '@algolia/cache-browser-local-storage': 4.23.3
      '@algolia/cache-common': 4.23.3
      '@algolia/cache-in-memory': 4.23.3
      '@algolia/client-common': 4.23.3
      '@algolia/client-search': 4.23.3
      '@algolia/logger-common': 4.23.3
      '@algolia/logger-console': 4.23.3
      '@algolia/requester-browser-xhr': 4.23.3
      '@algolia/requester-common': 4.23.3
      '@algolia/requester-node-http': 4.23.3
      '@algolia/transporter': 4.23.3

  '@algolia/requester-browser-xhr@4.23.3':
    dependencies:
      '@algolia/requester-common': 4.23.3

  '@algolia/requester-common@4.23.3': {}

  '@algolia/requester-node-http@4.23.3':
    dependencies:
      '@algolia/requester-common': 4.23.3

  '@algolia/transporter@4.23.3':
    dependencies:
      '@algolia/cache-common': 4.23.3
      '@algolia/logger-common': 4.23.3
      '@algolia/requester-common': 4.23.3

  '@alloc/quick-lru@5.2.0': {}

  '@ampproject/remapping@2.3.0':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25

  '@babel/code-frame@7.26.2':
    dependencies:
      '@babel/helper-validator-identifier': 7.25.9
      js-tokens: 4.0.0
      picocolors: 1.1.1

  '@babel/compat-data@7.26.2': {}

  '@babel/core@7.26.0':
    dependencies:
      '@ampproject/remapping': 2.3.0
      '@babel/code-frame': 7.26.2
      '@babel/generator': 7.26.2
      '@babel/helper-compilation-targets': 7.25.9
      '@babel/helper-module-transforms': 7.26.0(@babel/core@7.26.0)
      '@babel/helpers': 7.26.0
      '@babel/parser': 7.26.2
      '@babel/template': 7.25.9
      '@babel/traverse': 7.25.9
      '@babel/types': 7.26.0
      convert-source-map: 2.0.0
      debug: 4.3.4
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/generator@7.26.2':
    dependencies:
      '@babel/parser': 7.26.2
      '@babel/types': 7.26.0
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25
      jsesc: 3.0.2

  '@babel/helper-annotate-as-pure@7.25.9':
    dependencies:
      '@babel/types': 7.26.0

  '@babel/helper-builder-binary-assignment-operator-visitor@7.25.9':
    dependencies:
      '@babel/traverse': 7.25.9
      '@babel/types': 7.26.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-compilation-targets@7.25.9':
    dependencies:
      '@babel/compat-data': 7.26.2
      '@babel/helper-validator-option': 7.25.9
      browserslist: 4.24.2
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-create-class-features-plugin@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-annotate-as-pure': 7.25.9
      '@babel/helper-member-expression-to-functions': 7.25.9
      '@babel/helper-optimise-call-expression': 7.25.9
      '@babel/helper-replace-supers': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-skip-transparent-expression-wrappers': 7.25.9
      '@babel/traverse': 7.25.9
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-create-regexp-features-plugin@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-annotate-as-pure': 7.25.9
      regexpu-core: 6.1.1
      semver: 6.3.1

  '@babel/helper-define-polyfill-provider@0.6.2(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-compilation-targets': 7.25.9
      '@babel/helper-plugin-utils': 7.25.9
      debug: 4.3.4
      lodash.debounce: 4.0.8
      resolve: 1.22.8
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-member-expression-to-functions@7.25.9':
    dependencies:
      '@babel/traverse': 7.25.9
      '@babel/types': 7.26.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-imports@7.25.9':
    dependencies:
      '@babel/traverse': 7.25.9
      '@babel/types': 7.26.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-transforms@7.26.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-module-imports': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9
      '@babel/traverse': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-optimise-call-expression@7.25.9':
    dependencies:
      '@babel/types': 7.26.0

  '@babel/helper-plugin-utils@7.25.9': {}

  '@babel/helper-remap-async-to-generator@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-annotate-as-pure': 7.25.9
      '@babel/helper-wrap-function': 7.25.9
      '@babel/traverse': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-replace-supers@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-member-expression-to-functions': 7.25.9
      '@babel/helper-optimise-call-expression': 7.25.9
      '@babel/traverse': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-simple-access@7.25.9':
    dependencies:
      '@babel/traverse': 7.25.9
      '@babel/types': 7.26.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-skip-transparent-expression-wrappers@7.25.9':
    dependencies:
      '@babel/traverse': 7.25.9
      '@babel/types': 7.26.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-string-parser@7.25.9': {}

  '@babel/helper-validator-identifier@7.25.9': {}

  '@babel/helper-validator-option@7.25.9': {}

  '@babel/helper-wrap-function@7.25.9':
    dependencies:
      '@babel/template': 7.25.9
      '@babel/traverse': 7.25.9
      '@babel/types': 7.26.0
    transitivePeerDependencies:
      - supports-color

  '@babel/helpers@7.26.0':
    dependencies:
      '@babel/template': 7.25.9
      '@babel/types': 7.26.0

  '@babel/parser@7.26.2':
    dependencies:
      '@babel/types': 7.26.0

  '@babel/plugin-bugfix-firefox-class-in-computed-class-key@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/traverse': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-bugfix-safari-class-field-initializer-scope@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-skip-transparent-expression-wrappers': 7.25.9
      '@babel/plugin-transform-optional-chaining': 7.25.9(@babel/core@7.26.0)
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/traverse': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-proposal-private-property-in-object@7.21.0-placeholder-for-preset-env.2(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0

  '@babel/plugin-syntax-dynamic-import@7.8.3(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-import-assertions@7.26.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-import-attributes@7.26.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-jsx@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-typescript@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-syntax-unicode-sets-regex@7.18.6(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-create-regexp-features-plugin': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-arrow-functions@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-async-generator-functions@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-remap-async-to-generator': 7.25.9(@babel/core@7.26.0)
      '@babel/traverse': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-async-to-generator@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-module-imports': 7.25.9
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-remap-async-to-generator': 7.25.9(@babel/core@7.26.0)
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-block-scoped-functions@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-block-scoping@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-class-properties@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-create-class-features-plugin': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-class-static-block@7.26.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-create-class-features-plugin': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-classes@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-annotate-as-pure': 7.25.9
      '@babel/helper-compilation-targets': 7.25.9
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-replace-supers': 7.25.9(@babel/core@7.26.0)
      '@babel/traverse': 7.25.9
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-computed-properties@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/template': 7.25.9

  '@babel/plugin-transform-destructuring@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-dotall-regex@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-create-regexp-features-plugin': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-duplicate-keys@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-duplicate-named-capturing-groups-regex@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-create-regexp-features-plugin': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-dynamic-import@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-exponentiation-operator@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-builder-binary-assignment-operator-visitor': 7.25.9
      '@babel/helper-plugin-utils': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-export-namespace-from@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-for-of@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-skip-transparent-expression-wrappers': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-function-name@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-compilation-targets': 7.25.9
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/traverse': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-json-strings@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-literals@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-logical-assignment-operators@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-member-expression-literals@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-modules-amd@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-module-transforms': 7.26.0(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-modules-commonjs@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-module-transforms': 7.26.0(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-simple-access': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-modules-systemjs@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-module-transforms': 7.26.0(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9
      '@babel/traverse': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-modules-umd@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-module-transforms': 7.26.0(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-named-capturing-groups-regex@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-create-regexp-features-plugin': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-new-target@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-nullish-coalescing-operator@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-numeric-separator@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-object-rest-spread@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-compilation-targets': 7.25.9
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/plugin-transform-parameters': 7.25.9(@babel/core@7.26.0)

  '@babel/plugin-transform-object-super@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-replace-supers': 7.25.9(@babel/core@7.26.0)
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-optional-catch-binding@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-optional-chaining@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-skip-transparent-expression-wrappers': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-parameters@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-private-methods@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-create-class-features-plugin': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-private-property-in-object@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-annotate-as-pure': 7.25.9
      '@babel/helper-create-class-features-plugin': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-property-literals@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-react-constant-elements@7.24.1(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-react-display-name@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-react-jsx-development@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/plugin-transform-react-jsx': 7.25.9(@babel/core@7.26.0)
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-react-jsx@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-annotate-as-pure': 7.25.9
      '@babel/helper-module-imports': 7.25.9
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/plugin-syntax-jsx': 7.25.9(@babel/core@7.26.0)
      '@babel/types': 7.26.0
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-react-pure-annotations@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-annotate-as-pure': 7.25.9
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-regenerator@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
      regenerator-transform: 0.15.2

  '@babel/plugin-transform-regexp-modifiers@7.26.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-create-regexp-features-plugin': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-reserved-words@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-runtime@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-module-imports': 7.25.9
      '@babel/helper-plugin-utils': 7.25.9
      babel-plugin-polyfill-corejs2: 0.4.11(@babel/core@7.26.0)
      babel-plugin-polyfill-corejs3: 0.10.6(@babel/core@7.26.0)
      babel-plugin-polyfill-regenerator: 0.6.2(@babel/core@7.26.0)
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-shorthand-properties@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-spread@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-skip-transparent-expression-wrappers': 7.25.9
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-sticky-regex@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-template-literals@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-typeof-symbol@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-typescript@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-annotate-as-pure': 7.25.9
      '@babel/helper-create-class-features-plugin': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-skip-transparent-expression-wrappers': 7.25.9
      '@babel/plugin-syntax-typescript': 7.25.9(@babel/core@7.26.0)
    transitivePeerDependencies:
      - supports-color

  '@babel/plugin-transform-unicode-escapes@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-unicode-property-regex@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-create-regexp-features-plugin': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-unicode-regex@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-create-regexp-features-plugin': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/plugin-transform-unicode-sets-regex@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-create-regexp-features-plugin': 7.25.9(@babel/core@7.26.0)
      '@babel/helper-plugin-utils': 7.25.9

  '@babel/preset-env@7.26.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/compat-data': 7.26.2
      '@babel/core': 7.26.0
      '@babel/helper-compilation-targets': 7.25.9
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-validator-option': 7.25.9
      '@babel/plugin-bugfix-firefox-class-in-computed-class-key': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-bugfix-safari-class-field-initializer-scope': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-proposal-private-property-in-object': 7.21.0-placeholder-for-preset-env.2(@babel/core@7.26.0)
      '@babel/plugin-syntax-import-assertions': 7.26.0(@babel/core@7.26.0)
      '@babel/plugin-syntax-import-attributes': 7.26.0(@babel/core@7.26.0)
      '@babel/plugin-syntax-unicode-sets-regex': 7.18.6(@babel/core@7.26.0)
      '@babel/plugin-transform-arrow-functions': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-async-generator-functions': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-async-to-generator': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-block-scoped-functions': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-block-scoping': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-class-properties': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-class-static-block': 7.26.0(@babel/core@7.26.0)
      '@babel/plugin-transform-classes': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-computed-properties': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-destructuring': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-dotall-regex': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-duplicate-keys': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-duplicate-named-capturing-groups-regex': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-dynamic-import': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-exponentiation-operator': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-export-namespace-from': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-for-of': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-function-name': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-json-strings': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-literals': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-logical-assignment-operators': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-member-expression-literals': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-modules-amd': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-modules-commonjs': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-modules-systemjs': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-modules-umd': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-named-capturing-groups-regex': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-new-target': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-nullish-coalescing-operator': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-numeric-separator': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-object-rest-spread': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-object-super': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-optional-catch-binding': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-optional-chaining': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-parameters': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-private-methods': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-private-property-in-object': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-property-literals': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-regenerator': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-regexp-modifiers': 7.26.0(@babel/core@7.26.0)
      '@babel/plugin-transform-reserved-words': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-shorthand-properties': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-spread': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-sticky-regex': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-template-literals': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-typeof-symbol': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-unicode-escapes': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-unicode-property-regex': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-unicode-regex': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-unicode-sets-regex': 7.25.9(@babel/core@7.26.0)
      '@babel/preset-modules': 0.1.6-no-external-plugins(@babel/core@7.26.0)
      babel-plugin-polyfill-corejs2: 0.4.11(@babel/core@7.26.0)
      babel-plugin-polyfill-corejs3: 0.10.6(@babel/core@7.26.0)
      babel-plugin-polyfill-regenerator: 0.6.2(@babel/core@7.26.0)
      core-js-compat: 3.39.0
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/preset-modules@0.1.6-no-external-plugins(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/types': 7.26.0
      esutils: 2.0.3

  '@babel/preset-react@7.25.9(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-validator-option': 7.25.9
      '@babel/plugin-transform-react-display-name': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-react-jsx': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-react-jsx-development': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-react-pure-annotations': 7.25.9(@babel/core@7.26.0)
    transitivePeerDependencies:
      - supports-color

  '@babel/preset-typescript@7.26.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
      '@babel/helper-validator-option': 7.25.9
      '@babel/plugin-syntax-jsx': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-modules-commonjs': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-typescript': 7.25.9(@babel/core@7.26.0)
    transitivePeerDependencies:
      - supports-color

  '@babel/runtime-corejs3@7.26.0':
    dependencies:
      core-js-pure: 3.37.0
      regenerator-runtime: 0.14.1

  '@babel/runtime@7.26.0':
    dependencies:
      regenerator-runtime: 0.14.1

  '@babel/template@7.25.9':
    dependencies:
      '@babel/code-frame': 7.26.2
      '@babel/parser': 7.26.2
      '@babel/types': 7.26.0

  '@babel/traverse@7.25.9':
    dependencies:
      '@babel/code-frame': 7.26.2
      '@babel/generator': 7.26.2
      '@babel/parser': 7.26.2
      '@babel/template': 7.25.9
      '@babel/types': 7.26.0
      debug: 4.3.4
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.26.0':
    dependencies:
      '@babel/helper-string-parser': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9

  '@colors/colors@1.5.0':
    optional: true

  '@csstools/cascade-layer-name-parser@2.0.4(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)':
    dependencies:
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3

  '@csstools/color-helpers@5.0.1': {}

  '@csstools/css-calc@2.1.0(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)':
    dependencies:
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3

  '@csstools/css-color-parser@3.0.6(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)':
    dependencies:
      '@csstools/color-helpers': 5.0.1
      '@csstools/css-calc': 2.1.0(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3

  '@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3)':
    dependencies:
      '@csstools/css-tokenizer': 3.0.3

  '@csstools/css-tokenizer@3.0.3': {}

  '@csstools/media-query-list-parser@4.0.2(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)':
    dependencies:
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3

  '@csstools/postcss-cascade-layers@5.0.1(postcss@8.4.49)':
    dependencies:
      '@csstools/selector-specificity': 5.0.0(postcss-selector-parser@7.0.0)
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0

  '@csstools/postcss-color-function@4.0.6(postcss@8.4.49)':
    dependencies:
      '@csstools/css-color-parser': 3.0.6(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/postcss-progressive-custom-properties': 4.0.0(postcss@8.4.49)
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49

  '@csstools/postcss-color-mix-function@3.0.6(postcss@8.4.49)':
    dependencies:
      '@csstools/css-color-parser': 3.0.6(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/postcss-progressive-custom-properties': 4.0.0(postcss@8.4.49)
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49

  '@csstools/postcss-content-alt-text@2.0.4(postcss@8.4.49)':
    dependencies:
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/postcss-progressive-custom-properties': 4.0.0(postcss@8.4.49)
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49

  '@csstools/postcss-exponential-functions@2.0.5(postcss@8.4.49)':
    dependencies:
      '@csstools/css-calc': 2.1.0(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      postcss: 8.4.49

  '@csstools/postcss-font-format-keywords@4.0.0(postcss@8.4.49)':
    dependencies:
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  '@csstools/postcss-gamut-mapping@2.0.6(postcss@8.4.49)':
    dependencies:
      '@csstools/css-color-parser': 3.0.6(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      postcss: 8.4.49

  '@csstools/postcss-gradients-interpolation-method@5.0.6(postcss@8.4.49)':
    dependencies:
      '@csstools/css-color-parser': 3.0.6(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/postcss-progressive-custom-properties': 4.0.0(postcss@8.4.49)
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49

  '@csstools/postcss-hwb-function@4.0.6(postcss@8.4.49)':
    dependencies:
      '@csstools/css-color-parser': 3.0.6(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/postcss-progressive-custom-properties': 4.0.0(postcss@8.4.49)
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49

  '@csstools/postcss-ic-unit@4.0.0(postcss@8.4.49)':
    dependencies:
      '@csstools/postcss-progressive-custom-properties': 4.0.0(postcss@8.4.49)
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  '@csstools/postcss-initial@2.0.0(postcss@8.4.49)':
    dependencies:
      postcss: 8.4.49

  '@csstools/postcss-is-pseudo-class@5.0.1(postcss@8.4.49)':
    dependencies:
      '@csstools/selector-specificity': 5.0.0(postcss-selector-parser@7.0.0)
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0

  '@csstools/postcss-light-dark-function@2.0.7(postcss@8.4.49)':
    dependencies:
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/postcss-progressive-custom-properties': 4.0.0(postcss@8.4.49)
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49

  '@csstools/postcss-logical-float-and-clear@3.0.0(postcss@8.4.49)':
    dependencies:
      postcss: 8.4.49

  '@csstools/postcss-logical-overflow@2.0.0(postcss@8.4.49)':
    dependencies:
      postcss: 8.4.49

  '@csstools/postcss-logical-overscroll-behavior@2.0.0(postcss@8.4.49)':
    dependencies:
      postcss: 8.4.49

  '@csstools/postcss-logical-resize@3.0.0(postcss@8.4.49)':
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  '@csstools/postcss-logical-viewport-units@3.0.3(postcss@8.4.49)':
    dependencies:
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49

  '@csstools/postcss-media-minmax@2.0.5(postcss@8.4.49)':
    dependencies:
      '@csstools/css-calc': 2.1.0(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/media-query-list-parser': 4.0.2(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      postcss: 8.4.49

  '@csstools/postcss-media-queries-aspect-ratio-number-values@3.0.4(postcss@8.4.49)':
    dependencies:
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/media-query-list-parser': 4.0.2(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      postcss: 8.4.49

  '@csstools/postcss-nested-calc@4.0.0(postcss@8.4.49)':
    dependencies:
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  '@csstools/postcss-normalize-display-values@4.0.0(postcss@8.4.49)':
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  '@csstools/postcss-oklab-function@4.0.6(postcss@8.4.49)':
    dependencies:
      '@csstools/css-color-parser': 3.0.6(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/postcss-progressive-custom-properties': 4.0.0(postcss@8.4.49)
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49

  '@csstools/postcss-progressive-custom-properties@4.0.0(postcss@8.4.49)':
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  '@csstools/postcss-random-function@1.0.1(postcss@8.4.49)':
    dependencies:
      '@csstools/css-calc': 2.1.0(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      postcss: 8.4.49

  '@csstools/postcss-relative-color-syntax@3.0.6(postcss@8.4.49)':
    dependencies:
      '@csstools/css-color-parser': 3.0.6(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/postcss-progressive-custom-properties': 4.0.0(postcss@8.4.49)
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49

  '@csstools/postcss-scope-pseudo-class@4.0.1(postcss@8.4.49)':
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0

  '@csstools/postcss-sign-functions@1.1.0(postcss@8.4.49)':
    dependencies:
      '@csstools/css-calc': 2.1.0(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      postcss: 8.4.49

  '@csstools/postcss-stepped-value-functions@4.0.5(postcss@8.4.49)':
    dependencies:
      '@csstools/css-calc': 2.1.0(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      postcss: 8.4.49

  '@csstools/postcss-text-decoration-shorthand@4.0.1(postcss@8.4.49)':
    dependencies:
      '@csstools/color-helpers': 5.0.1
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  '@csstools/postcss-trigonometric-functions@4.0.5(postcss@8.4.49)':
    dependencies:
      '@csstools/css-calc': 2.1.0(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      postcss: 8.4.49

  '@csstools/postcss-unset-value@4.0.0(postcss@8.4.49)':
    dependencies:
      postcss: 8.4.49

  '@csstools/selector-resolve-nested@3.0.0(postcss-selector-parser@7.0.0)':
    dependencies:
      postcss-selector-parser: 7.0.0

  '@csstools/selector-specificity@5.0.0(postcss-selector-parser@7.0.0)':
    dependencies:
      postcss-selector-parser: 7.0.0

  '@csstools/utilities@2.0.0(postcss@8.4.49)':
    dependencies:
      postcss: 8.4.49

  '@discoveryjs/json-ext@0.5.7': {}

  '@docsearch/css@3.6.0': {}

  '@docsearch/react@3.6.0(@algolia/client-search@4.23.3)(@types/react@18.2.79)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.13.0)':
    dependencies:
      '@algolia/autocomplete-core': 1.9.3(@algolia/client-search@4.23.3)(algoliasearch@4.23.3)(search-insights@2.13.0)
      '@algolia/autocomplete-preset-algolia': 1.9.3(@algolia/client-search@4.23.3)(algoliasearch@4.23.3)
      '@docsearch/css': 3.6.0
      algoliasearch: 4.23.3
    optionalDependencies:
      '@types/react': 18.2.79
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      search-insights: 2.13.0
    transitivePeerDependencies:
      - '@algolia/client-search'

  '@docusaurus/babel@3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/generator': 7.26.2
      '@babel/plugin-syntax-dynamic-import': 7.8.3(@babel/core@7.26.0)
      '@babel/plugin-transform-runtime': 7.25.9(@babel/core@7.26.0)
      '@babel/preset-env': 7.26.0(@babel/core@7.26.0)
      '@babel/preset-react': 7.25.9(@babel/core@7.26.0)
      '@babel/preset-typescript': 7.26.0(@babel/core@7.26.0)
      '@babel/runtime': 7.26.0
      '@babel/runtime-corejs3': 7.26.0
      '@babel/traverse': 7.25.9
      '@docusaurus/logger': 3.6.3
      '@docusaurus/utils': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      babel-plugin-dynamic-import-node: 2.3.3
      fs-extra: 11.2.0
      tslib: 2.6.2
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - react
      - react-dom
      - supports-color
      - typescript
      - uglify-js
      - webpack-cli

  '@docusaurus/bundler@3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@babel/core': 7.26.0
      '@docusaurus/babel': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/cssnano-preset': 3.6.3
      '@docusaurus/logger': 3.6.3
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      babel-loader: 9.2.1(@babel/core@7.26.0)(webpack@5.96.1)
      clean-css: 5.3.3
      copy-webpack-plugin: 11.0.0(webpack@5.96.1)
      css-loader: 6.11.0(webpack@5.96.1)
      css-minimizer-webpack-plugin: 5.0.1(clean-css@5.3.3)(webpack@5.96.1)
      cssnano: 6.1.2(postcss@8.4.49)
      file-loader: 6.2.0(webpack@5.96.1)
      html-minifier-terser: 7.2.0
      mini-css-extract-plugin: 2.9.2(webpack@5.96.1)
      null-loader: 4.0.1(webpack@5.96.1)
      postcss: 8.4.49
      postcss-loader: 7.3.4(postcss@8.4.49)(typescript@5.7.2)(webpack@5.96.1)
      postcss-preset-env: 10.1.1(postcss@8.4.49)
      react-dev-utils: 12.0.1(typescript@5.7.2)(webpack@5.96.1)
      terser-webpack-plugin: 5.3.10(webpack@5.96.1)
      tslib: 2.6.2
      url-loader: 4.1.1(file-loader@6.2.0(webpack@5.96.1))(webpack@5.96.1)
      webpack: 5.96.1
      webpackbar: 6.0.1(webpack@5.96.1)
    transitivePeerDependencies:
      - '@parcel/css'
      - '@rspack/core'
      - '@swc/core'
      - '@swc/css'
      - csso
      - esbuild
      - eslint
      - lightningcss
      - react
      - react-dom
      - supports-color
      - typescript
      - uglify-js
      - vue-template-compiler
      - webpack-cli

  '@docusaurus/core@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/babel': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/bundler': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/logger': 3.6.3
      '@docusaurus/mdx-loader': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/utils': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/utils-common': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils-validation': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@mdx-js/react': 3.1.0(@types/react@18.2.79)(react@18.3.1)
      boxen: 6.2.1
      chalk: 4.1.2
      chokidar: 3.6.0
      cli-table3: 0.6.4
      combine-promises: 1.2.0
      commander: 5.1.0
      core-js: 3.37.0
      del: 6.1.1
      detect-port: 1.5.1
      escape-html: 1.0.3
      eta: 2.2.0
      eval: 0.1.8
      fs-extra: 11.2.0
      html-tags: 3.3.1
      html-webpack-plugin: 5.6.0(webpack@5.96.1)
      leven: 3.1.0
      lodash: 4.17.21
      p-map: 4.0.0
      prompts: 2.4.2
      react: 18.3.1
      react-dev-utils: 12.0.1(typescript@5.7.2)(webpack@5.96.1)
      react-dom: 18.3.1(react@18.3.1)
      react-helmet-async: 1.3.0(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      react-loadable: '@docusaurus/react-loadable@6.0.0(react@18.3.1)'
      react-loadable-ssr-addon-v5-slorber: 1.0.1(@docusaurus/react-loadable@6.0.0(react@18.3.1))(webpack@5.96.1)
      react-router: 5.3.4(react@18.3.1)
      react-router-config: 5.1.1(react-router@5.3.4(react@18.3.1))(react@18.3.1)
      react-router-dom: 5.3.4(react@18.3.1)
      rtl-detect: 1.1.2
      semver: 7.6.0
      serve-handler: 6.1.6
      shelljs: 0.8.5
      tslib: 2.6.2
      update-notifier: 6.0.2
      webpack: 5.96.1
      webpack-bundle-analyzer: 4.10.2
      webpack-dev-server: 4.15.2(webpack@5.96.1)
      webpack-merge: 6.0.1
    transitivePeerDependencies:
      - '@docusaurus/faster'
      - '@parcel/css'
      - '@rspack/core'
      - '@swc/core'
      - '@swc/css'
      - bufferutil
      - csso
      - debug
      - esbuild
      - eslint
      - lightningcss
      - supports-color
      - typescript
      - uglify-js
      - utf-8-validate
      - vue-template-compiler
      - webpack-cli

  '@docusaurus/cssnano-preset@3.6.3':
    dependencies:
      cssnano-preset-advanced: 6.1.2(postcss@8.4.49)
      postcss: 8.4.49
      postcss-sort-media-queries: 5.2.0(postcss@8.4.49)
      tslib: 2.6.2

  '@docusaurus/logger@3.6.3':
    dependencies:
      chalk: 4.1.2
      tslib: 2.6.2

  '@docusaurus/mdx-loader@3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/logger': 3.6.3
      '@docusaurus/utils': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/utils-validation': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@mdx-js/mdx': 3.0.1
      '@slorber/remark-comment': 1.0.0
      escape-html: 1.0.3
      estree-util-value-to-estree: 3.1.1
      file-loader: 6.2.0(webpack@5.96.1)
      fs-extra: 11.2.0
      image-size: 1.1.1
      mdast-util-mdx: 3.0.0
      mdast-util-to-string: 4.0.0
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      rehype-raw: 7.0.0
      remark-directive: 3.0.0
      remark-emoji: 4.0.1
      remark-frontmatter: 5.0.0
      remark-gfm: 4.0.0
      stringify-object: 3.3.0
      tslib: 2.6.2
      unified: 11.0.4
      unist-util-visit: 5.0.0
      url-loader: 4.1.1(file-loader@6.2.0(webpack@5.96.1))(webpack@5.96.1)
      vfile: 6.0.1
      webpack: 5.96.1
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - supports-color
      - typescript
      - uglify-js
      - webpack-cli

  '@docusaurus/module-type-aliases@3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)':
    dependencies:
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@types/history': 4.7.11
      '@types/react': 18.2.79
      '@types/react-router-config': 5.0.11
      '@types/react-router-dom': 5.3.3
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      react-helmet-async: 2.0.4(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      react-loadable: '@docusaurus/react-loadable@6.0.0(react@18.3.1)'
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - supports-color
      - uglify-js
      - webpack-cli

  '@docusaurus/plugin-content-blog@3.6.3(@docusaurus/plugin-content-docs@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2))(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/core': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/logger': 3.6.3
      '@docusaurus/mdx-loader': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/plugin-content-docs': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/theme-common': 3.6.3(@docusaurus/plugin-content-docs@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/utils-common': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils-validation': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      cheerio: 1.0.0-rc.12
      feed: 4.2.2
      fs-extra: 11.2.0
      lodash: 4.17.21
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      reading-time: 1.5.0
      srcset: 4.0.0
      tslib: 2.6.2
      unist-util-visit: 5.0.0
      utility-types: 3.11.0
      webpack: 5.96.1
    transitivePeerDependencies:
      - '@docusaurus/faster'
      - '@mdx-js/react'
      - '@parcel/css'
      - '@rspack/core'
      - '@swc/core'
      - '@swc/css'
      - bufferutil
      - csso
      - debug
      - esbuild
      - eslint
      - lightningcss
      - supports-color
      - typescript
      - uglify-js
      - utf-8-validate
      - vue-template-compiler
      - webpack-cli

  '@docusaurus/plugin-content-docs@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/core': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/logger': 3.6.3
      '@docusaurus/mdx-loader': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/module-type-aliases': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/theme-common': 3.6.3(@docusaurus/plugin-content-docs@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/utils-common': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils-validation': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@types/react-router-config': 5.0.11
      combine-promises: 1.2.0
      fs-extra: 11.2.0
      js-yaml: 4.1.0
      lodash: 4.17.21
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      tslib: 2.6.2
      utility-types: 3.11.0
      webpack: 5.96.1
    transitivePeerDependencies:
      - '@docusaurus/faster'
      - '@mdx-js/react'
      - '@parcel/css'
      - '@rspack/core'
      - '@swc/core'
      - '@swc/css'
      - bufferutil
      - csso
      - debug
      - esbuild
      - eslint
      - lightningcss
      - supports-color
      - typescript
      - uglify-js
      - utf-8-validate
      - vue-template-compiler
      - webpack-cli

  '@docusaurus/plugin-content-pages@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/core': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/mdx-loader': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/utils-validation': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      fs-extra: 11.2.0
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      tslib: 2.6.2
      webpack: 5.96.1
    transitivePeerDependencies:
      - '@docusaurus/faster'
      - '@mdx-js/react'
      - '@parcel/css'
      - '@rspack/core'
      - '@swc/core'
      - '@swc/css'
      - bufferutil
      - csso
      - debug
      - esbuild
      - eslint
      - lightningcss
      - supports-color
      - typescript
      - uglify-js
      - utf-8-validate
      - vue-template-compiler
      - webpack-cli

  '@docusaurus/plugin-debug@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/core': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      fs-extra: 11.2.0
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      react-json-view-lite: 1.3.0(react@18.3.1)
      tslib: 2.6.2
    transitivePeerDependencies:
      - '@docusaurus/faster'
      - '@mdx-js/react'
      - '@parcel/css'
      - '@rspack/core'
      - '@swc/core'
      - '@swc/css'
      - bufferutil
      - csso
      - debug
      - esbuild
      - eslint
      - lightningcss
      - supports-color
      - typescript
      - uglify-js
      - utf-8-validate
      - vue-template-compiler
      - webpack-cli

  '@docusaurus/plugin-google-analytics@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/core': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils-validation': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      tslib: 2.6.2
    transitivePeerDependencies:
      - '@docusaurus/faster'
      - '@mdx-js/react'
      - '@parcel/css'
      - '@rspack/core'
      - '@swc/core'
      - '@swc/css'
      - bufferutil
      - csso
      - debug
      - esbuild
      - eslint
      - lightningcss
      - supports-color
      - typescript
      - uglify-js
      - utf-8-validate
      - vue-template-compiler
      - webpack-cli

  '@docusaurus/plugin-google-gtag@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/core': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils-validation': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@types/gtag.js': 0.0.12
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      tslib: 2.6.2
    transitivePeerDependencies:
      - '@docusaurus/faster'
      - '@mdx-js/react'
      - '@parcel/css'
      - '@rspack/core'
      - '@swc/core'
      - '@swc/css'
      - bufferutil
      - csso
      - debug
      - esbuild
      - eslint
      - lightningcss
      - supports-color
      - typescript
      - uglify-js
      - utf-8-validate
      - vue-template-compiler
      - webpack-cli

  '@docusaurus/plugin-google-tag-manager@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/core': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils-validation': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      tslib: 2.6.2
    transitivePeerDependencies:
      - '@docusaurus/faster'
      - '@mdx-js/react'
      - '@parcel/css'
      - '@rspack/core'
      - '@swc/core'
      - '@swc/css'
      - bufferutil
      - csso
      - debug
      - esbuild
      - eslint
      - lightningcss
      - supports-color
      - typescript
      - uglify-js
      - utf-8-validate
      - vue-template-compiler
      - webpack-cli

  '@docusaurus/plugin-sitemap@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/core': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/logger': 3.6.3
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/utils-common': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils-validation': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      fs-extra: 11.2.0
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      sitemap: 7.1.1
      tslib: 2.6.2
    transitivePeerDependencies:
      - '@docusaurus/faster'
      - '@mdx-js/react'
      - '@parcel/css'
      - '@rspack/core'
      - '@swc/core'
      - '@swc/css'
      - bufferutil
      - csso
      - debug
      - esbuild
      - eslint
      - lightningcss
      - supports-color
      - typescript
      - uglify-js
      - utf-8-validate
      - vue-template-compiler
      - webpack-cli

  '@docusaurus/preset-classic@3.6.3(@algolia/client-search@4.23.3)(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(@types/react@18.2.79)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.13.0)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/core': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/plugin-content-blog': 3.6.3(@docusaurus/plugin-content-docs@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2))(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/plugin-content-docs': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/plugin-content-pages': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/plugin-debug': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/plugin-google-analytics': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/plugin-google-gtag': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/plugin-google-tag-manager': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/plugin-sitemap': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/theme-classic': 3.6.3(@types/react@18.2.79)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/theme-common': 3.6.3(@docusaurus/plugin-content-docs@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/theme-search-algolia': 3.6.3(@algolia/client-search@4.23.3)(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(@types/react@18.2.79)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.13.0)(typescript@5.7.2)
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
    transitivePeerDependencies:
      - '@algolia/client-search'
      - '@docusaurus/faster'
      - '@mdx-js/react'
      - '@parcel/css'
      - '@rspack/core'
      - '@swc/core'
      - '@swc/css'
      - '@types/react'
      - bufferutil
      - csso
      - debug
      - esbuild
      - eslint
      - lightningcss
      - search-insights
      - supports-color
      - typescript
      - uglify-js
      - utf-8-validate
      - vue-template-compiler
      - webpack-cli

  '@docusaurus/react-loadable@6.0.0(react@18.3.1)':
    dependencies:
      '@types/react': 18.2.79
      react: 18.3.1

  '@docusaurus/remark-plugin-npm2yarn@3.6.3':
    dependencies:
      mdast-util-mdx: 3.0.0
      npm-to-yarn: 3.0.0
      tslib: 2.6.2
      unified: 11.0.4
      unist-util-visit: 5.0.0
    transitivePeerDependencies:
      - supports-color

  '@docusaurus/theme-classic@3.6.3(@types/react@18.2.79)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/core': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/logger': 3.6.3
      '@docusaurus/mdx-loader': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/module-type-aliases': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/plugin-content-blog': 3.6.3(@docusaurus/plugin-content-docs@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2))(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/plugin-content-docs': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/plugin-content-pages': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/theme-common': 3.6.3(@docusaurus/plugin-content-docs@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/theme-translations': 3.6.3
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/utils-common': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils-validation': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@mdx-js/react': 3.1.0(@types/react@18.2.79)(react@18.3.1)
      clsx: 2.1.1
      copy-text-to-clipboard: 3.2.0
      infima: 0.2.0-alpha.45
      lodash: 4.17.21
      nprogress: 0.2.0
      postcss: 8.4.49
      prism-react-renderer: 2.4.0(react@18.3.1)
      prismjs: 1.29.0
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      react-router-dom: 5.3.4(react@18.3.1)
      rtlcss: 4.1.1
      tslib: 2.6.2
      utility-types: 3.11.0
    transitivePeerDependencies:
      - '@docusaurus/faster'
      - '@parcel/css'
      - '@rspack/core'
      - '@swc/core'
      - '@swc/css'
      - '@types/react'
      - bufferutil
      - csso
      - debug
      - esbuild
      - eslint
      - lightningcss
      - supports-color
      - typescript
      - uglify-js
      - utf-8-validate
      - vue-template-compiler
      - webpack-cli

  '@docusaurus/theme-common@3.6.3(@docusaurus/plugin-content-docs@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/mdx-loader': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/module-type-aliases': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/plugin-content-docs': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/utils': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/utils-common': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@types/history': 4.7.11
      '@types/react': 18.2.79
      '@types/react-router-config': 5.0.11
      clsx: 2.1.1
      parse-numeric-range: 1.3.0
      prism-react-renderer: 2.4.0(react@18.3.1)
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      tslib: 2.6.2
      utility-types: 3.11.0
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - supports-color
      - typescript
      - uglify-js
      - webpack-cli

  '@docusaurus/theme-search-algolia@3.6.3(@algolia/client-search@4.23.3)(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(@types/react@18.2.79)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.13.0)(typescript@5.7.2)':
    dependencies:
      '@docsearch/react': 3.6.0(@algolia/client-search@4.23.3)(@types/react@18.2.79)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.13.0)
      '@docusaurus/core': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/logger': 3.6.3
      '@docusaurus/plugin-content-docs': 3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/theme-common': 3.6.3(@docusaurus/plugin-content-docs@3.6.3(@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/theme-translations': 3.6.3
      '@docusaurus/utils': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/utils-validation': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      algoliasearch: 4.23.3
      algoliasearch-helper: 3.18.0(algoliasearch@4.23.3)
      clsx: 2.1.1
      eta: 2.2.0
      fs-extra: 11.2.0
      lodash: 4.17.21
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      tslib: 2.6.2
      utility-types: 3.11.0
    transitivePeerDependencies:
      - '@algolia/client-search'
      - '@docusaurus/faster'
      - '@mdx-js/react'
      - '@parcel/css'
      - '@rspack/core'
      - '@swc/core'
      - '@swc/css'
      - '@types/react'
      - bufferutil
      - csso
      - debug
      - esbuild
      - eslint
      - lightningcss
      - search-insights
      - supports-color
      - typescript
      - uglify-js
      - utf-8-validate
      - vue-template-compiler
      - webpack-cli

  '@docusaurus/theme-translations@3.6.3':
    dependencies:
      fs-extra: 11.2.0
      tslib: 2.6.2

  '@docusaurus/tsconfig@3.6.3': {}

  '@docusaurus/types@3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)':
    dependencies:
      '@mdx-js/mdx': 3.0.1
      '@types/history': 4.7.11
      '@types/react': 18.2.79
      commander: 5.1.0
      joi: 17.13.0
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      react-helmet-async: 1.3.0(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      utility-types: 3.11.0
      webpack: 5.96.1
      webpack-merge: 5.10.0
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - supports-color
      - uglify-js
      - webpack-cli

  '@docusaurus/utils-common@3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)':
    dependencies:
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      tslib: 2.6.2
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - react
      - react-dom
      - supports-color
      - uglify-js
      - webpack-cli

  '@docusaurus/utils-validation@3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/logger': 3.6.3
      '@docusaurus/utils': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)
      '@docusaurus/utils-common': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      fs-extra: 11.2.0
      joi: 17.13.0
      js-yaml: 4.1.0
      lodash: 4.17.21
      tslib: 2.6.2
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - react
      - react-dom
      - supports-color
      - typescript
      - uglify-js
      - webpack-cli

  '@docusaurus/utils@3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.7.2)':
    dependencies:
      '@docusaurus/logger': 3.6.3
      '@docusaurus/types': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@docusaurus/utils-common': 3.6.3(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
      '@svgr/webpack': 8.1.0(typescript@5.7.2)
      escape-string-regexp: 4.0.0
      file-loader: 6.2.0(webpack@5.96.1)
      fs-extra: 11.2.0
      github-slugger: 1.5.0
      globby: 11.1.0
      gray-matter: 4.0.3
      jiti: 1.21.6
      js-yaml: 4.1.0
      lodash: 4.17.21
      micromatch: 4.0.8
      prompts: 2.4.2
      resolve-pathname: 3.0.0
      shelljs: 0.8.5
      tslib: 2.6.2
      url-loader: 4.1.1(file-loader@6.2.0(webpack@5.96.1))(webpack@5.96.1)
      utility-types: 3.11.0
      webpack: 5.96.1
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - react
      - react-dom
      - supports-color
      - typescript
      - uglify-js
      - webpack-cli

  '@hapi/hoek@9.3.0': {}

  '@hapi/topo@5.1.0':
    dependencies:
      '@hapi/hoek': 9.3.0

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@jest/schemas@29.6.3':
    dependencies:
      '@sinclair/typebox': 0.27.8

  '@jest/types@29.6.3':
    dependencies:
      '@jest/schemas': 29.6.3
      '@types/istanbul-lib-coverage': 2.0.6
      '@types/istanbul-reports': 3.0.4
      '@types/node': 20.14.11
      '@types/yargs': 17.0.32
      chalk: 4.1.2

  '@jridgewell/gen-mapping@0.3.5':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.4.15
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/source-map@0.3.6':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/sourcemap-codec@1.4.15': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.4.15

  '@leichtgewicht/ip-codec@2.0.5': {}

  '@mdx-js/mdx@3.0.1':
    dependencies:
      '@types/estree': 1.0.6
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdx': 2.0.13
      collapse-white-space: 2.1.0
      devlop: 1.1.0
      estree-util-build-jsx: 3.0.1
      estree-util-is-identifier-name: 3.0.0
      estree-util-to-js: 2.0.0
      estree-walker: 3.0.3
      hast-util-to-estree: 3.1.0
      hast-util-to-jsx-runtime: 2.3.0
      markdown-extensions: 2.0.0
      periscopic: 3.1.0
      remark-mdx: 3.0.1
      remark-parse: 11.0.0
      remark-rehype: 11.1.0
      source-map: 0.7.4
      unified: 11.0.4
      unist-util-position-from-estree: 2.0.0
      unist-util-stringify-position: 4.0.0
      unist-util-visit: 5.0.0
      vfile: 6.0.1
    transitivePeerDependencies:
      - supports-color

  '@mdx-js/react@3.1.0(@types/react@18.2.79)(react@18.3.1)':
    dependencies:
      '@types/mdx': 2.0.13
      '@types/react': 18.2.79
      react: 18.3.1

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.17.1

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@pnpm/config.env-replace@1.1.0': {}

  '@pnpm/network.ca-file@1.0.2':
    dependencies:
      graceful-fs: 4.2.10

  '@pnpm/npm-conf@2.2.2':
    dependencies:
      '@pnpm/config.env-replace': 1.1.0
      '@pnpm/network.ca-file': 1.0.2
      config-chain: 1.1.13

  '@polka/url@1.0.0-next.25': {}

  '@sideway/address@4.1.5':
    dependencies:
      '@hapi/hoek': 9.3.0

  '@sideway/formula@3.0.1': {}

  '@sideway/pinpoint@2.0.0': {}

  '@sinclair/typebox@0.27.8': {}

  '@sindresorhus/is@4.6.0': {}

  '@sindresorhus/is@5.6.0': {}

  '@slorber/remark-comment@1.0.0':
    dependencies:
      micromark-factory-space: 1.1.0
      micromark-util-character: 1.2.0
      micromark-util-symbol: 1.1.0

  '@svgr/babel-plugin-add-jsx-attribute@8.0.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0

  '@svgr/babel-plugin-remove-jsx-attribute@8.0.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0

  '@svgr/babel-plugin-remove-jsx-empty-expression@8.0.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0

  '@svgr/babel-plugin-replace-jsx-attribute-value@8.0.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0

  '@svgr/babel-plugin-svg-dynamic-title@8.0.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0

  '@svgr/babel-plugin-svg-em-dimensions@8.0.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0

  '@svgr/babel-plugin-transform-react-native-svg@8.1.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0

  '@svgr/babel-plugin-transform-svg-component@8.0.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0

  '@svgr/babel-preset@8.1.0(@babel/core@7.26.0)':
    dependencies:
      '@babel/core': 7.26.0
      '@svgr/babel-plugin-add-jsx-attribute': 8.0.0(@babel/core@7.26.0)
      '@svgr/babel-plugin-remove-jsx-attribute': 8.0.0(@babel/core@7.26.0)
      '@svgr/babel-plugin-remove-jsx-empty-expression': 8.0.0(@babel/core@7.26.0)
      '@svgr/babel-plugin-replace-jsx-attribute-value': 8.0.0(@babel/core@7.26.0)
      '@svgr/babel-plugin-svg-dynamic-title': 8.0.0(@babel/core@7.26.0)
      '@svgr/babel-plugin-svg-em-dimensions': 8.0.0(@babel/core@7.26.0)
      '@svgr/babel-plugin-transform-react-native-svg': 8.1.0(@babel/core@7.26.0)
      '@svgr/babel-plugin-transform-svg-component': 8.0.0(@babel/core@7.26.0)

  '@svgr/core@8.1.0(typescript@5.7.2)':
    dependencies:
      '@babel/core': 7.26.0
      '@svgr/babel-preset': 8.1.0(@babel/core@7.26.0)
      camelcase: 6.3.0
      cosmiconfig: 8.3.6(typescript@5.7.2)
      snake-case: 3.0.4
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@svgr/hast-util-to-babel-ast@8.0.0':
    dependencies:
      '@babel/types': 7.26.0
      entities: 4.5.0

  '@svgr/plugin-jsx@8.1.0(@svgr/core@8.1.0(typescript@5.7.2))':
    dependencies:
      '@babel/core': 7.26.0
      '@svgr/babel-preset': 8.1.0(@babel/core@7.26.0)
      '@svgr/core': 8.1.0(typescript@5.7.2)
      '@svgr/hast-util-to-babel-ast': 8.0.0
      svg-parser: 2.0.4
    transitivePeerDependencies:
      - supports-color

  '@svgr/plugin-svgo@8.1.0(@svgr/core@8.1.0(typescript@5.7.2))(typescript@5.7.2)':
    dependencies:
      '@svgr/core': 8.1.0(typescript@5.7.2)
      cosmiconfig: 8.3.6(typescript@5.7.2)
      deepmerge: 4.3.1
      svgo: 3.2.0
    transitivePeerDependencies:
      - typescript

  '@svgr/webpack@8.1.0(typescript@5.7.2)':
    dependencies:
      '@babel/core': 7.26.0
      '@babel/plugin-transform-react-constant-elements': 7.24.1(@babel/core@7.26.0)
      '@babel/preset-env': 7.26.0(@babel/core@7.26.0)
      '@babel/preset-react': 7.25.9(@babel/core@7.26.0)
      '@babel/preset-typescript': 7.26.0(@babel/core@7.26.0)
      '@svgr/core': 8.1.0(typescript@5.7.2)
      '@svgr/plugin-jsx': 8.1.0(@svgr/core@8.1.0(typescript@5.7.2))
      '@svgr/plugin-svgo': 8.1.0(@svgr/core@8.1.0(typescript@5.7.2))(typescript@5.7.2)
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@szmarczak/http-timer@5.0.1':
    dependencies:
      defer-to-connect: 2.0.1

  '@trysound/sax@0.2.0': {}

  '@types/acorn@4.0.6':
    dependencies:
      '@types/estree': 1.0.6

  '@types/body-parser@1.19.5':
    dependencies:
      '@types/connect': 3.4.38
      '@types/node': 20.14.11

  '@types/bonjour@3.5.13':
    dependencies:
      '@types/node': 20.14.11

  '@types/connect-history-api-fallback@1.5.4':
    dependencies:
      '@types/express-serve-static-core': 4.19.0
      '@types/node': 20.14.11

  '@types/connect@3.4.38':
    dependencies:
      '@types/node': 20.14.11

  '@types/debug@4.1.12':
    dependencies:
      '@types/ms': 0.7.34

  '@types/eslint-scope@3.7.7':
    dependencies:
      '@types/eslint': 8.56.10
      '@types/estree': 1.0.6

  '@types/eslint@8.56.10':
    dependencies:
      '@types/estree': 1.0.6
      '@types/json-schema': 7.0.15

  '@types/estree-jsx@1.0.5':
    dependencies:
      '@types/estree': 1.0.6

  '@types/estree@1.0.6': {}

  '@types/express-serve-static-core@4.19.0':
    dependencies:
      '@types/node': 20.14.11
      '@types/qs': 6.9.15
      '@types/range-parser': 1.2.7
      '@types/send': 0.17.4

  '@types/express@4.17.21':
    dependencies:
      '@types/body-parser': 1.19.5
      '@types/express-serve-static-core': 4.19.0
      '@types/qs': 6.9.15
      '@types/serve-static': 1.15.7

  '@types/gtag.js@0.0.12': {}

  '@types/hast@3.0.4':
    dependencies:
      '@types/unist': 3.0.2

  '@types/history@4.7.11': {}

  '@types/html-minifier-terser@6.1.0': {}

  '@types/http-cache-semantics@4.0.4': {}

  '@types/http-errors@2.0.4': {}

  '@types/http-proxy@1.17.14':
    dependencies:
      '@types/node': 20.14.11

  '@types/istanbul-lib-coverage@2.0.6': {}

  '@types/istanbul-lib-report@3.0.3':
    dependencies:
      '@types/istanbul-lib-coverage': 2.0.6

  '@types/istanbul-reports@3.0.4':
    dependencies:
      '@types/istanbul-lib-report': 3.0.3

  '@types/json-schema@7.0.15': {}

  '@types/mdast@4.0.3':
    dependencies:
      '@types/unist': 3.0.2

  '@types/mdx@2.0.13': {}

  '@types/mime@1.3.5': {}

  '@types/ms@0.7.34': {}

  '@types/node-forge@1.3.11':
    dependencies:
      '@types/node': 20.14.11

  '@types/node@17.0.45': {}

  '@types/node@20.14.11':
    dependencies:
      undici-types: 5.26.5

  '@types/parse-json@4.0.2': {}

  '@types/prismjs@1.26.3': {}

  '@types/prop-types@15.7.12': {}

  '@types/qs@6.9.15': {}

  '@types/range-parser@1.2.7': {}

  '@types/react-router-config@5.0.11':
    dependencies:
      '@types/history': 4.7.11
      '@types/react': 18.2.79
      '@types/react-router': 5.1.20

  '@types/react-router-dom@5.3.3':
    dependencies:
      '@types/history': 4.7.11
      '@types/react': 18.2.79
      '@types/react-router': 5.1.20

  '@types/react-router@5.1.20':
    dependencies:
      '@types/history': 4.7.11
      '@types/react': 18.2.79

  '@types/react@18.2.79':
    dependencies:
      '@types/prop-types': 15.7.12
      csstype: 3.1.3

  '@types/retry@0.12.0': {}

  '@types/sax@1.2.7':
    dependencies:
      '@types/node': 20.14.11

  '@types/send@0.17.4':
    dependencies:
      '@types/mime': 1.3.5
      '@types/node': 20.14.11

  '@types/serve-index@1.9.4':
    dependencies:
      '@types/express': 4.17.21

  '@types/serve-static@1.15.7':
    dependencies:
      '@types/http-errors': 2.0.4
      '@types/node': 20.14.11
      '@types/send': 0.17.4

  '@types/sockjs@0.3.36':
    dependencies:
      '@types/node': 20.14.11

  '@types/unist@2.0.10': {}

  '@types/unist@3.0.2': {}

  '@types/ws@8.5.10':
    dependencies:
      '@types/node': 20.14.11

  '@types/yargs-parser@21.0.3': {}

  '@types/yargs@17.0.32':
    dependencies:
      '@types/yargs-parser': 21.0.3

  '@ungap/structured-clone@1.2.0': {}

  '@webassemblyjs/ast@1.12.1':
    dependencies:
      '@webassemblyjs/helper-numbers': 1.11.6
      '@webassemblyjs/helper-wasm-bytecode': 1.11.6

  '@webassemblyjs/floating-point-hex-parser@1.11.6': {}

  '@webassemblyjs/helper-api-error@1.11.6': {}

  '@webassemblyjs/helper-buffer@1.12.1': {}

  '@webassemblyjs/helper-numbers@1.11.6':
    dependencies:
      '@webassemblyjs/floating-point-hex-parser': 1.11.6
      '@webassemblyjs/helper-api-error': 1.11.6
      '@xtuc/long': 4.2.2

  '@webassemblyjs/helper-wasm-bytecode@1.11.6': {}

  '@webassemblyjs/helper-wasm-section@1.12.1':
    dependencies:
      '@webassemblyjs/ast': 1.12.1
      '@webassemblyjs/helper-buffer': 1.12.1
      '@webassemblyjs/helper-wasm-bytecode': 1.11.6
      '@webassemblyjs/wasm-gen': 1.12.1

  '@webassemblyjs/ieee754@1.11.6':
    dependencies:
      '@xtuc/ieee754': 1.2.0

  '@webassemblyjs/leb128@1.11.6':
    dependencies:
      '@xtuc/long': 4.2.2

  '@webassemblyjs/utf8@1.11.6': {}

  '@webassemblyjs/wasm-edit@1.12.1':
    dependencies:
      '@webassemblyjs/ast': 1.12.1
      '@webassemblyjs/helper-buffer': 1.12.1
      '@webassemblyjs/helper-wasm-bytecode': 1.11.6
      '@webassemblyjs/helper-wasm-section': 1.12.1
      '@webassemblyjs/wasm-gen': 1.12.1
      '@webassemblyjs/wasm-opt': 1.12.1
      '@webassemblyjs/wasm-parser': 1.12.1
      '@webassemblyjs/wast-printer': 1.12.1

  '@webassemblyjs/wasm-gen@1.12.1':
    dependencies:
      '@webassemblyjs/ast': 1.12.1
      '@webassemblyjs/helper-wasm-bytecode': 1.11.6
      '@webassemblyjs/ieee754': 1.11.6
      '@webassemblyjs/leb128': 1.11.6
      '@webassemblyjs/utf8': 1.11.6

  '@webassemblyjs/wasm-opt@1.12.1':
    dependencies:
      '@webassemblyjs/ast': 1.12.1
      '@webassemblyjs/helper-buffer': 1.12.1
      '@webassemblyjs/wasm-gen': 1.12.1
      '@webassemblyjs/wasm-parser': 1.12.1

  '@webassemblyjs/wasm-parser@1.12.1':
    dependencies:
      '@webassemblyjs/ast': 1.12.1
      '@webassemblyjs/helper-api-error': 1.11.6
      '@webassemblyjs/helper-wasm-bytecode': 1.11.6
      '@webassemblyjs/ieee754': 1.11.6
      '@webassemblyjs/leb128': 1.11.6
      '@webassemblyjs/utf8': 1.11.6

  '@webassemblyjs/wast-printer@1.12.1':
    dependencies:
      '@webassemblyjs/ast': 1.12.1
      '@xtuc/long': 4.2.2

  '@xtuc/ieee754@1.2.0': {}

  '@xtuc/long@4.2.2': {}

  accepts@1.3.8:
    dependencies:
      mime-types: 2.1.35
      negotiator: 0.6.3

  acorn-jsx@5.3.2(acorn@8.14.0):
    dependencies:
      acorn: 8.14.0

  acorn-walk@8.3.2: {}

  acorn@8.14.0: {}

  address@1.2.2: {}

  aggregate-error@3.1.0:
    dependencies:
      clean-stack: 2.2.0
      indent-string: 4.0.0

  ajv-formats@2.1.1(ajv@8.12.0):
    optionalDependencies:
      ajv: 8.12.0

  ajv-keywords@3.5.2(ajv@6.12.6):
    dependencies:
      ajv: 6.12.6

  ajv-keywords@5.1.0(ajv@8.12.0):
    dependencies:
      ajv: 8.12.0
      fast-deep-equal: 3.1.3

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ajv@8.12.0:
    dependencies:
      fast-deep-equal: 3.1.3
      json-schema-traverse: 1.0.0
      require-from-string: 2.0.2
      uri-js: 4.4.1

  algoliasearch-helper@3.18.0(algoliasearch@4.23.3):
    dependencies:
      '@algolia/events': 4.0.1
      algoliasearch: 4.23.3

  algoliasearch@4.23.3:
    dependencies:
      '@algolia/cache-browser-local-storage': 4.23.3
      '@algolia/cache-common': 4.23.3
      '@algolia/cache-in-memory': 4.23.3
      '@algolia/client-account': 4.23.3
      '@algolia/client-analytics': 4.23.3
      '@algolia/client-common': 4.23.3
      '@algolia/client-personalization': 4.23.3
      '@algolia/client-search': 4.23.3
      '@algolia/logger-common': 4.23.3
      '@algolia/logger-console': 4.23.3
      '@algolia/recommend': 4.23.3
      '@algolia/requester-browser-xhr': 4.23.3
      '@algolia/requester-common': 4.23.3
      '@algolia/requester-node-http': 4.23.3
      '@algolia/transporter': 4.23.3

  ansi-align@3.0.1:
    dependencies:
      string-width: 4.2.3

  ansi-escapes@4.3.2:
    dependencies:
      type-fest: 0.21.3

  ansi-html-community@0.0.8: {}

  ansi-regex@5.0.1: {}

  ansi-regex@6.0.1: {}

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@6.2.1: {}

  any-promise@1.3.0: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  arg@5.0.2: {}

  argparse@1.0.10:
    dependencies:
      sprintf-js: 1.0.3

  argparse@2.0.1: {}

  array-flatten@1.1.1: {}

  array-union@2.1.0: {}

  astring@1.8.6: {}

  at-least-node@1.0.0: {}

  autoprefixer@10.4.20(postcss@8.4.49):
    dependencies:
      browserslist: 4.23.3
      caniuse-lite: 1.0.30001651
      fraction.js: 4.3.7
      normalize-range: 0.1.2
      picocolors: 1.0.1
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  babel-loader@9.2.1(@babel/core@7.26.0)(webpack@5.96.1):
    dependencies:
      '@babel/core': 7.26.0
      find-cache-dir: 4.0.0
      schema-utils: 4.2.0
      webpack: 5.96.1

  babel-plugin-dynamic-import-node@2.3.3:
    dependencies:
      object.assign: 4.1.5

  babel-plugin-polyfill-corejs2@0.4.11(@babel/core@7.26.0):
    dependencies:
      '@babel/compat-data': 7.26.2
      '@babel/core': 7.26.0
      '@babel/helper-define-polyfill-provider': 0.6.2(@babel/core@7.26.0)
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  babel-plugin-polyfill-corejs3@0.10.6(@babel/core@7.26.0):
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-define-polyfill-provider': 0.6.2(@babel/core@7.26.0)
      core-js-compat: 3.39.0
    transitivePeerDependencies:
      - supports-color

  babel-plugin-polyfill-regenerator@0.6.2(@babel/core@7.26.0):
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-define-polyfill-provider': 0.6.2(@babel/core@7.26.0)
    transitivePeerDependencies:
      - supports-color

  bail@2.0.2: {}

  balanced-match@1.0.2: {}

  batch@0.6.1: {}

  big.js@5.2.2: {}

  binary-extensions@2.3.0: {}

  body-parser@1.20.2:
    dependencies:
      bytes: 3.1.2
      content-type: 1.0.5
      debug: 2.6.9
      depd: 2.0.0
      destroy: 1.2.0
      http-errors: 2.0.0
      iconv-lite: 0.4.24
      on-finished: 2.4.1
      qs: 6.11.0
      raw-body: 2.5.2
      type-is: 1.6.18
      unpipe: 1.0.0
    transitivePeerDependencies:
      - supports-color

  bonjour-service@1.2.1:
    dependencies:
      fast-deep-equal: 3.1.3
      multicast-dns: 7.2.5

  boolbase@1.0.0: {}

  boxen@6.2.1:
    dependencies:
      ansi-align: 3.0.1
      camelcase: 6.3.0
      chalk: 4.1.2
      cli-boxes: 3.0.0
      string-width: 5.1.2
      type-fest: 2.19.0
      widest-line: 4.0.1
      wrap-ansi: 8.1.0

  boxen@7.1.1:
    dependencies:
      ansi-align: 3.0.1
      camelcase: 7.0.1
      chalk: 5.3.0
      cli-boxes: 3.0.0
      string-width: 5.1.2
      type-fest: 2.19.0
      widest-line: 4.0.1
      wrap-ansi: 8.1.0

  brace-expansion@1.1.11:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.1:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  browserslist@4.23.3:
    dependencies:
      caniuse-lite: 1.0.30001651
      electron-to-chromium: 1.5.6
      node-releases: 2.0.18
      update-browserslist-db: 1.1.0(browserslist@4.23.3)

  browserslist@4.24.2:
    dependencies:
      caniuse-lite: 1.0.30001680
      electron-to-chromium: 1.5.63
      node-releases: 2.0.18
      update-browserslist-db: 1.1.1(browserslist@4.24.2)

  buffer-from@1.1.2: {}

  bytes@3.0.0: {}

  bytes@3.1.2: {}

  cacheable-lookup@7.0.0: {}

  cacheable-request@10.2.14:
    dependencies:
      '@types/http-cache-semantics': 4.0.4
      get-stream: 6.0.1
      http-cache-semantics: 4.1.1
      keyv: 4.5.4
      mimic-response: 4.0.0
      normalize-url: 8.0.1
      responselike: 3.0.0

  call-bind@1.0.7:
    dependencies:
      es-define-property: 1.0.0
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.2.4
      set-function-length: 1.2.2

  callsites@3.1.0: {}

  camel-case@4.1.2:
    dependencies:
      pascal-case: 3.1.2
      tslib: 2.6.2

  camelcase-css@2.0.1: {}

  camelcase@6.3.0: {}

  camelcase@7.0.1: {}

  caniuse-api@3.0.0:
    dependencies:
      browserslist: 4.24.2
      caniuse-lite: 1.0.30001680
      lodash.memoize: 4.1.2
      lodash.uniq: 4.5.0

  caniuse-lite@1.0.30001651: {}

  caniuse-lite@1.0.30001680: {}

  ccount@2.0.1: {}

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chalk@5.3.0: {}

  char-regex@1.0.2: {}

  character-entities-html4@2.1.0: {}

  character-entities-legacy@3.0.0: {}

  character-entities@2.0.2: {}

  character-reference-invalid@2.0.1: {}

  cheerio-select@2.1.0:
    dependencies:
      boolbase: 1.0.0
      css-select: 5.1.0
      css-what: 6.1.0
      domelementtype: 2.3.0
      domhandler: 5.0.3
      domutils: 3.1.0

  cheerio@1.0.0-rc.12:
    dependencies:
      cheerio-select: 2.1.0
      dom-serializer: 2.0.0
      domhandler: 5.0.3
      domutils: 3.1.0
      htmlparser2: 8.0.2
      parse5: 7.1.2
      parse5-htmlparser2-tree-adapter: 7.0.0

  chokidar@3.6.0:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3

  chrome-trace-event@1.0.3: {}

  ci-info@3.9.0: {}

  clean-css@5.3.3:
    dependencies:
      source-map: 0.6.1

  clean-stack@2.2.0: {}

  cli-boxes@3.0.0: {}

  cli-table3@0.6.4:
    dependencies:
      string-width: 4.2.3
    optionalDependencies:
      '@colors/colors': 1.5.0

  clone-deep@4.0.1:
    dependencies:
      is-plain-object: 2.0.4
      kind-of: 6.0.3
      shallow-clone: 3.0.1

  clsx@2.1.1: {}

  collapse-white-space@2.1.0: {}

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.4: {}

  colord@2.9.3: {}

  colorette@2.0.20: {}

  combine-promises@1.2.0: {}

  comma-separated-tokens@2.0.3: {}

  commander@10.0.1: {}

  commander@2.20.3: {}

  commander@4.1.1: {}

  commander@5.1.0: {}

  commander@7.2.0: {}

  commander@8.3.0: {}

  common-path-prefix@3.0.0: {}

  compressible@2.0.18:
    dependencies:
      mime-db: 1.52.0

  compression@1.7.4:
    dependencies:
      accepts: 1.3.8
      bytes: 3.0.0
      compressible: 2.0.18
      debug: 2.6.9
      on-headers: 1.0.2
      safe-buffer: 5.1.2
      vary: 1.1.2
    transitivePeerDependencies:
      - supports-color

  concat-map@0.0.1: {}

  config-chain@1.1.13:
    dependencies:
      ini: 1.3.8
      proto-list: 1.2.4

  configstore@6.0.0:
    dependencies:
      dot-prop: 6.0.1
      graceful-fs: 4.2.11
      unique-string: 3.0.0
      write-file-atomic: 3.0.3
      xdg-basedir: 5.1.0

  connect-history-api-fallback@2.0.0: {}

  consola@3.2.3: {}

  content-disposition@0.5.2: {}

  content-disposition@0.5.4:
    dependencies:
      safe-buffer: 5.2.1

  content-type@1.0.5: {}

  convert-source-map@2.0.0: {}

  cookie-signature@1.0.6: {}

  cookie@0.6.0: {}

  copy-text-to-clipboard@3.2.0: {}

  copy-webpack-plugin@11.0.0(webpack@5.96.1):
    dependencies:
      fast-glob: 3.3.2
      glob-parent: 6.0.2
      globby: 13.2.2
      normalize-path: 3.0.0
      schema-utils: 4.2.0
      serialize-javascript: 6.0.2
      webpack: 5.96.1

  core-js-compat@3.39.0:
    dependencies:
      browserslist: 4.24.2

  core-js-pure@3.37.0: {}

  core-js@3.37.0: {}

  core-util-is@1.0.3: {}

  cosmiconfig@6.0.0:
    dependencies:
      '@types/parse-json': 4.0.2
      import-fresh: 3.3.0
      parse-json: 5.2.0
      path-type: 4.0.0
      yaml: 1.10.2

  cosmiconfig@8.3.6(typescript@5.7.2):
    dependencies:
      import-fresh: 3.3.0
      js-yaml: 4.1.0
      parse-json: 5.2.0
      path-type: 4.0.0
    optionalDependencies:
      typescript: 5.7.2

  cross-spawn@7.0.3:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  crypto-random-string@4.0.0:
    dependencies:
      type-fest: 1.4.0

  css-blank-pseudo@7.0.1(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0

  css-declaration-sorter@7.2.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  css-has-pseudo@7.0.1(postcss@8.4.49):
    dependencies:
      '@csstools/selector-specificity': 5.0.0(postcss-selector-parser@7.0.0)
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0
      postcss-value-parser: 4.2.0

  css-loader@6.11.0(webpack@5.96.1):
    dependencies:
      icss-utils: 5.1.0(postcss@8.4.49)
      postcss: 8.4.49
      postcss-modules-extract-imports: 3.1.0(postcss@8.4.49)
      postcss-modules-local-by-default: 4.0.5(postcss@8.4.49)
      postcss-modules-scope: 3.2.0(postcss@8.4.49)
      postcss-modules-values: 4.0.0(postcss@8.4.49)
      postcss-value-parser: 4.2.0
      semver: 7.6.0
    optionalDependencies:
      webpack: 5.96.1

  css-minimizer-webpack-plugin@5.0.1(clean-css@5.3.3)(webpack@5.96.1):
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      cssnano: 6.1.2(postcss@8.4.49)
      jest-worker: 29.7.0
      postcss: 8.4.49
      schema-utils: 4.2.0
      serialize-javascript: 6.0.2
      webpack: 5.96.1
    optionalDependencies:
      clean-css: 5.3.3

  css-prefers-color-scheme@10.0.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  css-select@4.3.0:
    dependencies:
      boolbase: 1.0.0
      css-what: 6.1.0
      domhandler: 4.3.1
      domutils: 2.8.0
      nth-check: 2.1.1

  css-select@5.1.0:
    dependencies:
      boolbase: 1.0.0
      css-what: 6.1.0
      domhandler: 5.0.3
      domutils: 3.1.0
      nth-check: 2.1.1

  css-tree@2.2.1:
    dependencies:
      mdn-data: 2.0.28
      source-map-js: 1.2.1

  css-tree@2.3.1:
    dependencies:
      mdn-data: 2.0.30
      source-map-js: 1.2.1

  css-what@6.1.0: {}

  cssdb@8.2.1: {}

  cssesc@3.0.0: {}

  cssnano-preset-advanced@6.1.2(postcss@8.4.49):
    dependencies:
      autoprefixer: 10.4.20(postcss@8.4.49)
      browserslist: 4.24.2
      cssnano-preset-default: 6.1.2(postcss@8.4.49)
      postcss: 8.4.49
      postcss-discard-unused: 6.0.5(postcss@8.4.49)
      postcss-merge-idents: 6.0.3(postcss@8.4.49)
      postcss-reduce-idents: 6.0.3(postcss@8.4.49)
      postcss-zindex: 6.0.2(postcss@8.4.49)

  cssnano-preset-default@6.1.2(postcss@8.4.49):
    dependencies:
      browserslist: 4.24.2
      css-declaration-sorter: 7.2.0(postcss@8.4.49)
      cssnano-utils: 4.0.2(postcss@8.4.49)
      postcss: 8.4.49
      postcss-calc: 9.0.1(postcss@8.4.49)
      postcss-colormin: 6.1.0(postcss@8.4.49)
      postcss-convert-values: 6.1.0(postcss@8.4.49)
      postcss-discard-comments: 6.0.2(postcss@8.4.49)
      postcss-discard-duplicates: 6.0.3(postcss@8.4.49)
      postcss-discard-empty: 6.0.3(postcss@8.4.49)
      postcss-discard-overridden: 6.0.2(postcss@8.4.49)
      postcss-merge-longhand: 6.0.5(postcss@8.4.49)
      postcss-merge-rules: 6.1.1(postcss@8.4.49)
      postcss-minify-font-values: 6.1.0(postcss@8.4.49)
      postcss-minify-gradients: 6.0.3(postcss@8.4.49)
      postcss-minify-params: 6.1.0(postcss@8.4.49)
      postcss-minify-selectors: 6.0.4(postcss@8.4.49)
      postcss-normalize-charset: 6.0.2(postcss@8.4.49)
      postcss-normalize-display-values: 6.0.2(postcss@8.4.49)
      postcss-normalize-positions: 6.0.2(postcss@8.4.49)
      postcss-normalize-repeat-style: 6.0.2(postcss@8.4.49)
      postcss-normalize-string: 6.0.2(postcss@8.4.49)
      postcss-normalize-timing-functions: 6.0.2(postcss@8.4.49)
      postcss-normalize-unicode: 6.1.0(postcss@8.4.49)
      postcss-normalize-url: 6.0.2(postcss@8.4.49)
      postcss-normalize-whitespace: 6.0.2(postcss@8.4.49)
      postcss-ordered-values: 6.0.2(postcss@8.4.49)
      postcss-reduce-initial: 6.1.0(postcss@8.4.49)
      postcss-reduce-transforms: 6.0.2(postcss@8.4.49)
      postcss-svgo: 6.0.3(postcss@8.4.49)
      postcss-unique-selectors: 6.0.4(postcss@8.4.49)

  cssnano-utils@4.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  cssnano@6.1.2(postcss@8.4.49):
    dependencies:
      cssnano-preset-default: 6.1.2(postcss@8.4.49)
      lilconfig: 3.1.1
      postcss: 8.4.49

  csso@5.0.5:
    dependencies:
      css-tree: 2.2.1

  csstype@3.1.3: {}

  debounce@1.2.1: {}

  debug@2.6.9:
    dependencies:
      ms: 2.0.0

  debug@4.3.4:
    dependencies:
      ms: 2.1.2

  decode-named-character-reference@1.0.2:
    dependencies:
      character-entities: 2.0.2

  decompress-response@6.0.0:
    dependencies:
      mimic-response: 3.1.0

  deep-extend@0.6.0: {}

  deepmerge@4.3.1: {}

  default-gateway@6.0.3:
    dependencies:
      execa: 5.1.1

  defer-to-connect@2.0.1: {}

  define-data-property@1.1.4:
    dependencies:
      es-define-property: 1.0.0
      es-errors: 1.3.0
      gopd: 1.0.1

  define-lazy-prop@2.0.0: {}

  define-properties@1.2.1:
    dependencies:
      define-data-property: 1.1.4
      has-property-descriptors: 1.0.2
      object-keys: 1.1.1

  del@6.1.1:
    dependencies:
      globby: 11.1.0
      graceful-fs: 4.2.11
      is-glob: 4.0.3
      is-path-cwd: 2.2.0
      is-path-inside: 3.0.3
      p-map: 4.0.0
      rimraf: 3.0.2
      slash: 3.0.0

  depd@1.1.2: {}

  depd@2.0.0: {}

  dequal@2.0.3: {}

  destroy@1.2.0: {}

  detect-node@2.1.0: {}

  detect-port-alt@1.1.6:
    dependencies:
      address: 1.2.2
      debug: 2.6.9
    transitivePeerDependencies:
      - supports-color

  detect-port@1.5.1:
    dependencies:
      address: 1.2.2
      debug: 4.3.4
    transitivePeerDependencies:
      - supports-color

  devlop@1.1.0:
    dependencies:
      dequal: 2.0.3

  didyoumean@1.2.2: {}

  dir-glob@3.0.1:
    dependencies:
      path-type: 4.0.0

  dlv@1.1.3: {}

  dns-packet@5.6.1:
    dependencies:
      '@leichtgewicht/ip-codec': 2.0.5

  dom-converter@0.2.0:
    dependencies:
      utila: 0.4.0

  dom-serializer@1.4.1:
    dependencies:
      domelementtype: 2.3.0
      domhandler: 4.3.1
      entities: 2.2.0

  dom-serializer@2.0.0:
    dependencies:
      domelementtype: 2.3.0
      domhandler: 5.0.3
      entities: 4.5.0

  domelementtype@2.3.0: {}

  domhandler@4.3.1:
    dependencies:
      domelementtype: 2.3.0

  domhandler@5.0.3:
    dependencies:
      domelementtype: 2.3.0

  domutils@2.8.0:
    dependencies:
      dom-serializer: 1.4.1
      domelementtype: 2.3.0
      domhandler: 4.3.1

  domutils@3.1.0:
    dependencies:
      dom-serializer: 2.0.0
      domelementtype: 2.3.0
      domhandler: 5.0.3

  dot-case@3.0.4:
    dependencies:
      no-case: 3.0.4
      tslib: 2.6.2

  dot-prop@6.0.1:
    dependencies:
      is-obj: 2.0.0

  duplexer@0.1.2: {}

  eastasianwidth@0.2.0: {}

  ee-first@1.1.1: {}

  electron-to-chromium@1.5.6: {}

  electron-to-chromium@1.5.63: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  emojilib@2.4.0: {}

  emojis-list@3.0.0: {}

  emoticon@4.0.1: {}

  encodeurl@1.0.2: {}

  enhanced-resolve@5.17.1:
    dependencies:
      graceful-fs: 4.2.11
      tapable: 2.2.1

  entities@2.2.0: {}

  entities@4.5.0: {}

  error-ex@1.3.2:
    dependencies:
      is-arrayish: 0.2.1

  es-define-property@1.0.0:
    dependencies:
      get-intrinsic: 1.2.4

  es-errors@1.3.0: {}

  es-module-lexer@1.5.0: {}

  escalade@3.1.2: {}

  escalade@3.2.0: {}

  escape-goat@4.0.0: {}

  escape-html@1.0.3: {}

  escape-string-regexp@1.0.5: {}

  escape-string-regexp@4.0.0: {}

  escape-string-regexp@5.0.0: {}

  eslint-scope@5.1.1:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 4.3.0

  esprima@4.0.1: {}

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@4.3.0: {}

  estraverse@5.3.0: {}

  estree-util-attach-comments@3.0.0:
    dependencies:
      '@types/estree': 1.0.6

  estree-util-build-jsx@3.0.1:
    dependencies:
      '@types/estree-jsx': 1.0.5
      devlop: 1.1.0
      estree-util-is-identifier-name: 3.0.0
      estree-walker: 3.0.3

  estree-util-is-identifier-name@3.0.0: {}

  estree-util-to-js@2.0.0:
    dependencies:
      '@types/estree-jsx': 1.0.5
      astring: 1.8.6
      source-map: 0.7.4

  estree-util-value-to-estree@3.1.1:
    dependencies:
      '@types/estree': 1.0.6
      is-plain-obj: 4.1.0

  estree-util-visit@2.0.0:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/unist': 3.0.2

  estree-walker@3.0.3:
    dependencies:
      '@types/estree': 1.0.6

  esutils@2.0.3: {}

  eta@2.2.0: {}

  etag@1.8.1: {}

  eval@0.1.8:
    dependencies:
      '@types/node': 20.14.11
      require-like: 0.1.2

  eventemitter3@4.0.7: {}

  events@3.3.0: {}

  execa@5.1.1:
    dependencies:
      cross-spawn: 7.0.3
      get-stream: 6.0.1
      human-signals: 2.1.0
      is-stream: 2.0.1
      merge-stream: 2.0.0
      npm-run-path: 4.0.1
      onetime: 5.1.2
      signal-exit: 3.0.7
      strip-final-newline: 2.0.0

  express@4.19.2:
    dependencies:
      accepts: 1.3.8
      array-flatten: 1.1.1
      body-parser: 1.20.2
      content-disposition: 0.5.4
      content-type: 1.0.5
      cookie: 0.6.0
      cookie-signature: 1.0.6
      debug: 2.6.9
      depd: 2.0.0
      encodeurl: 1.0.2
      escape-html: 1.0.3
      etag: 1.8.1
      finalhandler: 1.2.0
      fresh: 0.5.2
      http-errors: 2.0.0
      merge-descriptors: 1.0.1
      methods: 1.1.2
      on-finished: 2.4.1
      parseurl: 1.3.3
      path-to-regexp: 0.1.7
      proxy-addr: 2.0.7
      qs: 6.11.0
      range-parser: 1.2.1
      safe-buffer: 5.2.1
      send: 0.18.0
      serve-static: 1.15.0
      setprototypeof: 1.2.0
      statuses: 2.0.1
      type-is: 1.6.18
      utils-merge: 1.0.1
      vary: 1.1.2
    transitivePeerDependencies:
      - supports-color

  extend-shallow@2.0.1:
    dependencies:
      is-extendable: 0.1.1

  extend@3.0.2: {}

  fast-deep-equal@3.1.3: {}

  fast-glob@3.3.2:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-json-stable-stringify@2.1.0: {}

  fastq@1.17.1:
    dependencies:
      reusify: 1.0.4

  fault@2.0.1:
    dependencies:
      format: 0.2.2

  faye-websocket@0.11.4:
    dependencies:
      websocket-driver: 0.7.4

  feed@4.2.2:
    dependencies:
      xml-js: 1.6.11

  figures@3.2.0:
    dependencies:
      escape-string-regexp: 1.0.5

  file-loader@6.2.0(webpack@5.96.1):
    dependencies:
      loader-utils: 2.0.4
      schema-utils: 3.3.0
      webpack: 5.96.1

  filesize@8.0.7: {}

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  finalhandler@1.2.0:
    dependencies:
      debug: 2.6.9
      encodeurl: 1.0.2
      escape-html: 1.0.3
      on-finished: 2.4.1
      parseurl: 1.3.3
      statuses: 2.0.1
      unpipe: 1.0.0
    transitivePeerDependencies:
      - supports-color

  find-cache-dir@4.0.0:
    dependencies:
      common-path-prefix: 3.0.0
      pkg-dir: 7.0.0

  find-up@3.0.0:
    dependencies:
      locate-path: 3.0.0

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  find-up@6.3.0:
    dependencies:
      locate-path: 7.2.0
      path-exists: 5.0.0

  flat@5.0.2: {}

  follow-redirects@1.15.6: {}

  foreground-child@3.1.1:
    dependencies:
      cross-spawn: 7.0.3
      signal-exit: 4.1.0

  fork-ts-checker-webpack-plugin@6.5.3(typescript@5.7.2)(webpack@5.96.1):
    dependencies:
      '@babel/code-frame': 7.26.2
      '@types/json-schema': 7.0.15
      chalk: 4.1.2
      chokidar: 3.6.0
      cosmiconfig: 6.0.0
      deepmerge: 4.3.1
      fs-extra: 9.1.0
      glob: 7.2.3
      memfs: 3.5.3
      minimatch: 3.1.2
      schema-utils: 2.7.0
      semver: 7.6.0
      tapable: 1.1.3
      typescript: 5.7.2
      webpack: 5.96.1

  form-data-encoder@2.1.4: {}

  format@0.2.2: {}

  forwarded@0.2.0: {}

  fraction.js@4.3.7: {}

  fresh@0.5.2: {}

  fs-extra@11.2.0:
    dependencies:
      graceful-fs: 4.2.11
      jsonfile: 6.1.0
      universalify: 2.0.1

  fs-extra@9.1.0:
    dependencies:
      at-least-node: 1.0.0
      graceful-fs: 4.2.11
      jsonfile: 6.1.0
      universalify: 2.0.1

  fs-monkey@1.0.5: {}

  fs.realpath@1.0.0: {}

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  gensync@1.0.0-beta.2: {}

  get-intrinsic@1.2.4:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2
      has-proto: 1.0.3
      has-symbols: 1.0.3
      hasown: 2.0.2

  get-own-enumerable-property-symbols@3.0.2: {}

  get-stream@6.0.1: {}

  github-slugger@1.5.0: {}

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob-to-regexp@0.4.1: {}

  glob@10.3.12:
    dependencies:
      foreground-child: 3.1.1
      jackspeak: 2.3.6
      minimatch: 9.0.4
      minipass: 7.0.4
      path-scurry: 1.10.2

  glob@7.2.3:
    dependencies:
      fs.realpath: 1.0.0
      inflight: 1.0.6
      inherits: 2.0.4
      minimatch: 3.1.2
      once: 1.4.0
      path-is-absolute: 1.0.1

  global-dirs@3.0.1:
    dependencies:
      ini: 2.0.0

  global-modules@2.0.0:
    dependencies:
      global-prefix: 3.0.0

  global-prefix@3.0.0:
    dependencies:
      ini: 1.3.8
      kind-of: 6.0.3
      which: 1.3.1

  globals@11.12.0: {}

  globby@11.1.0:
    dependencies:
      array-union: 2.1.0
      dir-glob: 3.0.1
      fast-glob: 3.3.2
      ignore: 5.3.1
      merge2: 1.4.1
      slash: 3.0.0

  globby@13.2.2:
    dependencies:
      dir-glob: 3.0.1
      fast-glob: 3.3.2
      ignore: 5.3.1
      merge2: 1.4.1
      slash: 4.0.0

  gopd@1.0.1:
    dependencies:
      get-intrinsic: 1.2.4

  got@12.6.1:
    dependencies:
      '@sindresorhus/is': 5.6.0
      '@szmarczak/http-timer': 5.0.1
      cacheable-lookup: 7.0.0
      cacheable-request: 10.2.14
      decompress-response: 6.0.0
      form-data-encoder: 2.1.4
      get-stream: 6.0.1
      http2-wrapper: 2.2.1
      lowercase-keys: 3.0.0
      p-cancelable: 3.0.0
      responselike: 3.0.0

  graceful-fs@4.2.10: {}

  graceful-fs@4.2.11: {}

  gray-matter@4.0.3:
    dependencies:
      js-yaml: 3.14.1
      kind-of: 6.0.3
      section-matter: 1.0.0
      strip-bom-string: 1.0.0

  gzip-size@6.0.0:
    dependencies:
      duplexer: 0.1.2

  handle-thing@2.0.1: {}

  has-flag@4.0.0: {}

  has-property-descriptors@1.0.2:
    dependencies:
      es-define-property: 1.0.0

  has-proto@1.0.3: {}

  has-symbols@1.0.3: {}

  has-yarn@3.0.0: {}

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  hast-util-from-parse5@8.0.1:
    dependencies:
      '@types/hast': 3.0.4
      '@types/unist': 3.0.2
      devlop: 1.1.0
      hastscript: 8.0.0
      property-information: 6.5.0
      vfile: 6.0.1
      vfile-location: 5.0.2
      web-namespaces: 2.0.1

  hast-util-parse-selector@4.0.0:
    dependencies:
      '@types/hast': 3.0.4

  hast-util-raw@9.0.2:
    dependencies:
      '@types/hast': 3.0.4
      '@types/unist': 3.0.2
      '@ungap/structured-clone': 1.2.0
      hast-util-from-parse5: 8.0.1
      hast-util-to-parse5: 8.0.0
      html-void-elements: 3.0.0
      mdast-util-to-hast: 13.1.0
      parse5: 7.1.2
      unist-util-position: 5.0.0
      unist-util-visit: 5.0.0
      vfile: 6.0.1
      web-namespaces: 2.0.1
      zwitch: 2.0.4

  hast-util-to-estree@3.1.0:
    dependencies:
      '@types/estree': 1.0.6
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      comma-separated-tokens: 2.0.3
      devlop: 1.1.0
      estree-util-attach-comments: 3.0.0
      estree-util-is-identifier-name: 3.0.0
      hast-util-whitespace: 3.0.0
      mdast-util-mdx-expression: 2.0.0
      mdast-util-mdx-jsx: 3.1.2
      mdast-util-mdxjs-esm: 2.0.1
      property-information: 6.5.0
      space-separated-tokens: 2.0.2
      style-to-object: 0.4.4
      unist-util-position: 5.0.0
      zwitch: 2.0.4
    transitivePeerDependencies:
      - supports-color

  hast-util-to-jsx-runtime@2.3.0:
    dependencies:
      '@types/estree': 1.0.6
      '@types/hast': 3.0.4
      '@types/unist': 3.0.2
      comma-separated-tokens: 2.0.3
      devlop: 1.1.0
      estree-util-is-identifier-name: 3.0.0
      hast-util-whitespace: 3.0.0
      mdast-util-mdx-expression: 2.0.0
      mdast-util-mdx-jsx: 3.1.2
      mdast-util-mdxjs-esm: 2.0.1
      property-information: 6.5.0
      space-separated-tokens: 2.0.2
      style-to-object: 1.0.6
      unist-util-position: 5.0.0
      vfile-message: 4.0.2
    transitivePeerDependencies:
      - supports-color

  hast-util-to-parse5@8.0.0:
    dependencies:
      '@types/hast': 3.0.4
      comma-separated-tokens: 2.0.3
      devlop: 1.1.0
      property-information: 6.5.0
      space-separated-tokens: 2.0.2
      web-namespaces: 2.0.1
      zwitch: 2.0.4

  hast-util-whitespace@3.0.0:
    dependencies:
      '@types/hast': 3.0.4

  hastscript@8.0.0:
    dependencies:
      '@types/hast': 3.0.4
      comma-separated-tokens: 2.0.3
      hast-util-parse-selector: 4.0.0
      property-information: 6.5.0
      space-separated-tokens: 2.0.2

  he@1.2.0: {}

  history@4.10.1:
    dependencies:
      '@babel/runtime': 7.26.0
      loose-envify: 1.4.0
      resolve-pathname: 3.0.0
      tiny-invariant: 1.3.3
      tiny-warning: 1.0.3
      value-equal: 1.0.1

  hoist-non-react-statics@3.3.2:
    dependencies:
      react-is: 16.13.1

  hpack.js@2.1.6:
    dependencies:
      inherits: 2.0.4
      obuf: 1.1.2
      readable-stream: 2.3.8
      wbuf: 1.7.3

  html-entities@2.5.2: {}

  html-escaper@2.0.2: {}

  html-minifier-terser@6.1.0:
    dependencies:
      camel-case: 4.1.2
      clean-css: 5.3.3
      commander: 8.3.0
      he: 1.2.0
      param-case: 3.0.4
      relateurl: 0.2.7
      terser: 5.30.4

  html-minifier-terser@7.2.0:
    dependencies:
      camel-case: 4.1.2
      clean-css: 5.3.3
      commander: 10.0.1
      entities: 4.5.0
      param-case: 3.0.4
      relateurl: 0.2.7
      terser: 5.30.4

  html-tags@3.3.1: {}

  html-void-elements@3.0.0: {}

  html-webpack-plugin@5.6.0(webpack@5.96.1):
    dependencies:
      '@types/html-minifier-terser': 6.1.0
      html-minifier-terser: 6.1.0
      lodash: 4.17.21
      pretty-error: 4.0.0
      tapable: 2.2.1
    optionalDependencies:
      webpack: 5.96.1

  htmlparser2@6.1.0:
    dependencies:
      domelementtype: 2.3.0
      domhandler: 4.3.1
      domutils: 2.8.0
      entities: 2.2.0

  htmlparser2@8.0.2:
    dependencies:
      domelementtype: 2.3.0
      domhandler: 5.0.3
      domutils: 3.1.0
      entities: 4.5.0

  http-cache-semantics@4.1.1: {}

  http-deceiver@1.2.7: {}

  http-errors@1.6.3:
    dependencies:
      depd: 1.1.2
      inherits: 2.0.3
      setprototypeof: 1.1.0
      statuses: 1.5.0

  http-errors@2.0.0:
    dependencies:
      depd: 2.0.0
      inherits: 2.0.4
      setprototypeof: 1.2.0
      statuses: 2.0.1
      toidentifier: 1.0.1

  http-parser-js@0.5.8: {}

  http-proxy-middleware@2.0.6(@types/express@4.17.21):
    dependencies:
      '@types/http-proxy': 1.17.14
      http-proxy: 1.18.1
      is-glob: 4.0.3
      is-plain-obj: 3.0.0
      micromatch: 4.0.8
    optionalDependencies:
      '@types/express': 4.17.21
    transitivePeerDependencies:
      - debug

  http-proxy@1.18.1:
    dependencies:
      eventemitter3: 4.0.7
      follow-redirects: 1.15.6
      requires-port: 1.0.0
    transitivePeerDependencies:
      - debug

  http2-wrapper@2.2.1:
    dependencies:
      quick-lru: 5.1.1
      resolve-alpn: 1.2.1

  human-signals@2.1.0: {}

  iconv-lite@0.4.24:
    dependencies:
      safer-buffer: 2.1.2

  icss-utils@5.1.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  ignore@5.3.1: {}

  image-size@1.1.1:
    dependencies:
      queue: 6.0.2

  immer@9.0.21: {}

  import-fresh@3.3.0:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  import-lazy@4.0.0: {}

  imurmurhash@0.1.4: {}

  indent-string@4.0.0: {}

  infima@0.2.0-alpha.45: {}

  inflight@1.0.6:
    dependencies:
      once: 1.4.0
      wrappy: 1.0.2

  inherits@2.0.3: {}

  inherits@2.0.4: {}

  ini@1.3.8: {}

  ini@2.0.0: {}

  inline-style-parser@0.1.1: {}

  inline-style-parser@0.2.3: {}

  interpret@1.4.0: {}

  invariant@2.2.4:
    dependencies:
      loose-envify: 1.4.0

  ipaddr.js@1.9.1: {}

  ipaddr.js@2.2.0: {}

  is-alphabetical@2.0.1: {}

  is-alphanumerical@2.0.1:
    dependencies:
      is-alphabetical: 2.0.1
      is-decimal: 2.0.1

  is-arrayish@0.2.1: {}

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-ci@3.0.1:
    dependencies:
      ci-info: 3.9.0

  is-core-module@2.13.1:
    dependencies:
      hasown: 2.0.2

  is-decimal@2.0.1: {}

  is-docker@2.2.1: {}

  is-extendable@0.1.1: {}

  is-extglob@2.1.1: {}

  is-fullwidth-code-point@3.0.0: {}

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-hexadecimal@2.0.1: {}

  is-installed-globally@0.4.0:
    dependencies:
      global-dirs: 3.0.1
      is-path-inside: 3.0.3

  is-npm@6.0.0: {}

  is-number@7.0.0: {}

  is-obj@1.0.1: {}

  is-obj@2.0.0: {}

  is-path-cwd@2.2.0: {}

  is-path-inside@3.0.3: {}

  is-plain-obj@3.0.0: {}

  is-plain-obj@4.1.0: {}

  is-plain-object@2.0.4:
    dependencies:
      isobject: 3.0.1

  is-reference@3.0.2:
    dependencies:
      '@types/estree': 1.0.6

  is-regexp@1.0.0: {}

  is-root@2.1.0: {}

  is-stream@2.0.1: {}

  is-typedarray@1.0.0: {}

  is-wsl@2.2.0:
    dependencies:
      is-docker: 2.2.1

  is-yarn-global@0.4.1: {}

  isarray@0.0.1: {}

  isarray@1.0.0: {}

  isexe@2.0.0: {}

  isobject@3.0.1: {}

  jackspeak@2.3.6:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jest-util@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 20.14.11
      chalk: 4.1.2
      ci-info: 3.9.0
      graceful-fs: 4.2.11
      picomatch: 2.3.1

  jest-worker@27.5.1:
    dependencies:
      '@types/node': 20.14.11
      merge-stream: 2.0.0
      supports-color: 8.1.1

  jest-worker@29.7.0:
    dependencies:
      '@types/node': 20.14.11
      jest-util: 29.7.0
      merge-stream: 2.0.0
      supports-color: 8.1.1

  jiti@1.21.6: {}

  joi@17.13.0:
    dependencies:
      '@hapi/hoek': 9.3.0
      '@hapi/topo': 5.1.0
      '@sideway/address': 4.1.5
      '@sideway/formula': 3.0.1
      '@sideway/pinpoint': 2.0.0

  js-tokens@4.0.0: {}

  js-yaml@3.14.1:
    dependencies:
      argparse: 1.0.10
      esprima: 4.0.1

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jsesc@3.0.2: {}

  json-buffer@3.0.1: {}

  json-parse-even-better-errors@2.3.1: {}

  json-schema-traverse@0.4.1: {}

  json-schema-traverse@1.0.0: {}

  json5@2.2.3: {}

  jsonfile@6.1.0:
    dependencies:
      universalify: 2.0.1
    optionalDependencies:
      graceful-fs: 4.2.11

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  kind-of@6.0.3: {}

  kleur@3.0.3: {}

  latest-version@7.0.0:
    dependencies:
      package-json: 8.1.1

  launch-editor@2.6.1:
    dependencies:
      picocolors: 1.1.1
      shell-quote: 1.8.1

  leven@3.1.0: {}

  lilconfig@3.1.1: {}

  lilconfig@3.1.3: {}

  lines-and-columns@1.2.4: {}

  loader-runner@4.3.0: {}

  loader-utils@2.0.4:
    dependencies:
      big.js: 5.2.2
      emojis-list: 3.0.0
      json5: 2.2.3

  loader-utils@3.2.1: {}

  locate-path@3.0.0:
    dependencies:
      p-locate: 3.0.0
      path-exists: 3.0.0

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  locate-path@7.2.0:
    dependencies:
      p-locate: 6.0.0

  lodash.debounce@4.0.8: {}

  lodash.memoize@4.1.2: {}

  lodash.uniq@4.5.0: {}

  lodash@4.17.21: {}

  longest-streak@3.1.0: {}

  loose-envify@1.4.0:
    dependencies:
      js-tokens: 4.0.0

  lower-case@2.0.2:
    dependencies:
      tslib: 2.6.2

  lowercase-keys@3.0.0: {}

  lru-cache@10.2.0: {}

  lru-cache@5.1.1:
    dependencies:
      yallist: 3.1.1

  lru-cache@6.0.0:
    dependencies:
      yallist: 4.0.0

  lucide-react@0.468.0(react@18.3.1):
    dependencies:
      react: 18.3.1

  markdown-extensions@2.0.0: {}

  markdown-table@2.0.0:
    dependencies:
      repeat-string: 1.6.1

  markdown-table@3.0.3: {}

  mdast-util-directive@3.0.0:
    dependencies:
      '@types/mdast': 4.0.3
      '@types/unist': 3.0.2
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.0
      mdast-util-to-markdown: 2.1.0
      parse-entities: 4.0.1
      stringify-entities: 4.0.4
      unist-util-visit-parents: 6.0.1
    transitivePeerDependencies:
      - supports-color

  mdast-util-find-and-replace@3.0.1:
    dependencies:
      '@types/mdast': 4.0.3
      escape-string-regexp: 5.0.0
      unist-util-is: 6.0.0
      unist-util-visit-parents: 6.0.1

  mdast-util-from-markdown@2.0.0:
    dependencies:
      '@types/mdast': 4.0.3
      '@types/unist': 3.0.2
      decode-named-character-reference: 1.0.2
      devlop: 1.1.0
      mdast-util-to-string: 4.0.0
      micromark: 4.0.0
      micromark-util-decode-numeric-character-reference: 2.0.1
      micromark-util-decode-string: 2.0.0
      micromark-util-normalize-identifier: 2.0.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0
      unist-util-stringify-position: 4.0.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-frontmatter@2.0.1:
    dependencies:
      '@types/mdast': 4.0.3
      devlop: 1.1.0
      escape-string-regexp: 5.0.0
      mdast-util-from-markdown: 2.0.0
      mdast-util-to-markdown: 2.1.0
      micromark-extension-frontmatter: 2.0.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm-autolink-literal@2.0.0:
    dependencies:
      '@types/mdast': 4.0.3
      ccount: 2.0.1
      devlop: 1.1.0
      mdast-util-find-and-replace: 3.0.1
      micromark-util-character: 2.1.0

  mdast-util-gfm-footnote@2.0.0:
    dependencies:
      '@types/mdast': 4.0.3
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.0
      mdast-util-to-markdown: 2.1.0
      micromark-util-normalize-identifier: 2.0.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm-strikethrough@2.0.0:
    dependencies:
      '@types/mdast': 4.0.3
      mdast-util-from-markdown: 2.0.0
      mdast-util-to-markdown: 2.1.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm-table@2.0.0:
    dependencies:
      '@types/mdast': 4.0.3
      devlop: 1.1.0
      markdown-table: 3.0.3
      mdast-util-from-markdown: 2.0.0
      mdast-util-to-markdown: 2.1.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm-task-list-item@2.0.0:
    dependencies:
      '@types/mdast': 4.0.3
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.0
      mdast-util-to-markdown: 2.1.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-gfm@3.0.0:
    dependencies:
      mdast-util-from-markdown: 2.0.0
      mdast-util-gfm-autolink-literal: 2.0.0
      mdast-util-gfm-footnote: 2.0.0
      mdast-util-gfm-strikethrough: 2.0.0
      mdast-util-gfm-table: 2.0.0
      mdast-util-gfm-task-list-item: 2.0.0
      mdast-util-to-markdown: 2.1.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdx-expression@2.0.0:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.3
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.0
      mdast-util-to-markdown: 2.1.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdx-jsx@3.1.2:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.3
      '@types/unist': 3.0.2
      ccount: 2.0.1
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.0
      mdast-util-to-markdown: 2.1.0
      parse-entities: 4.0.1
      stringify-entities: 4.0.4
      unist-util-remove-position: 5.0.0
      unist-util-stringify-position: 4.0.0
      vfile-message: 4.0.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdx@3.0.0:
    dependencies:
      mdast-util-from-markdown: 2.0.0
      mdast-util-mdx-expression: 2.0.0
      mdast-util-mdx-jsx: 3.1.2
      mdast-util-mdxjs-esm: 2.0.1
      mdast-util-to-markdown: 2.1.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdxjs-esm@2.0.1:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.3
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.0
      mdast-util-to-markdown: 2.1.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-phrasing@4.1.0:
    dependencies:
      '@types/mdast': 4.0.3
      unist-util-is: 6.0.0

  mdast-util-to-hast@13.1.0:
    dependencies:
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.3
      '@ungap/structured-clone': 1.2.0
      devlop: 1.1.0
      micromark-util-sanitize-uri: 2.0.0
      trim-lines: 3.0.1
      unist-util-position: 5.0.0
      unist-util-visit: 5.0.0
      vfile: 6.0.1

  mdast-util-to-markdown@2.1.0:
    dependencies:
      '@types/mdast': 4.0.3
      '@types/unist': 3.0.2
      longest-streak: 3.1.0
      mdast-util-phrasing: 4.1.0
      mdast-util-to-string: 4.0.0
      micromark-util-decode-string: 2.0.0
      unist-util-visit: 5.0.0
      zwitch: 2.0.4

  mdast-util-to-string@4.0.0:
    dependencies:
      '@types/mdast': 4.0.3

  mdn-data@2.0.28: {}

  mdn-data@2.0.30: {}

  media-typer@0.3.0: {}

  memfs@3.5.3:
    dependencies:
      fs-monkey: 1.0.5

  merge-descriptors@1.0.1: {}

  merge-stream@2.0.0: {}

  merge2@1.4.1: {}

  methods@1.1.2: {}

  micromark-core-commonmark@2.0.1:
    dependencies:
      decode-named-character-reference: 1.0.2
      devlop: 1.1.0
      micromark-factory-destination: 2.0.0
      micromark-factory-label: 2.0.0
      micromark-factory-space: 2.0.0
      micromark-factory-title: 2.0.0
      micromark-factory-whitespace: 2.0.0
      micromark-util-character: 2.1.0
      micromark-util-chunked: 2.0.0
      micromark-util-classify-character: 2.0.0
      micromark-util-html-tag-name: 2.0.0
      micromark-util-normalize-identifier: 2.0.0
      micromark-util-resolve-all: 2.0.0
      micromark-util-subtokenize: 2.0.1
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-extension-directive@3.0.0:
    dependencies:
      devlop: 1.1.0
      micromark-factory-space: 2.0.0
      micromark-factory-whitespace: 2.0.0
      micromark-util-character: 2.1.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0
      parse-entities: 4.0.1

  micromark-extension-frontmatter@2.0.0:
    dependencies:
      fault: 2.0.1
      micromark-util-character: 2.1.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-extension-gfm-autolink-literal@2.0.0:
    dependencies:
      micromark-util-character: 2.1.0
      micromark-util-sanitize-uri: 2.0.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-extension-gfm-footnote@2.0.0:
    dependencies:
      devlop: 1.1.0
      micromark-core-commonmark: 2.0.1
      micromark-factory-space: 2.0.0
      micromark-util-character: 2.1.0
      micromark-util-normalize-identifier: 2.0.0
      micromark-util-sanitize-uri: 2.0.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-extension-gfm-strikethrough@2.0.0:
    dependencies:
      devlop: 1.1.0
      micromark-util-chunked: 2.0.0
      micromark-util-classify-character: 2.0.0
      micromark-util-resolve-all: 2.0.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-extension-gfm-table@2.0.0:
    dependencies:
      devlop: 1.1.0
      micromark-factory-space: 2.0.0
      micromark-util-character: 2.1.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-extension-gfm-tagfilter@2.0.0:
    dependencies:
      micromark-util-types: 2.0.0

  micromark-extension-gfm-task-list-item@2.0.1:
    dependencies:
      devlop: 1.1.0
      micromark-factory-space: 2.0.0
      micromark-util-character: 2.1.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-extension-gfm@3.0.0:
    dependencies:
      micromark-extension-gfm-autolink-literal: 2.0.0
      micromark-extension-gfm-footnote: 2.0.0
      micromark-extension-gfm-strikethrough: 2.0.0
      micromark-extension-gfm-table: 2.0.0
      micromark-extension-gfm-tagfilter: 2.0.0
      micromark-extension-gfm-task-list-item: 2.0.1
      micromark-util-combine-extensions: 2.0.0
      micromark-util-types: 2.0.0

  micromark-extension-mdx-expression@3.0.0:
    dependencies:
      '@types/estree': 1.0.6
      devlop: 1.1.0
      micromark-factory-mdx-expression: 2.0.1
      micromark-factory-space: 2.0.0
      micromark-util-character: 2.1.0
      micromark-util-events-to-acorn: 2.0.2
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-extension-mdx-jsx@3.0.0:
    dependencies:
      '@types/acorn': 4.0.6
      '@types/estree': 1.0.6
      devlop: 1.1.0
      estree-util-is-identifier-name: 3.0.0
      micromark-factory-mdx-expression: 2.0.1
      micromark-factory-space: 2.0.0
      micromark-util-character: 2.1.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0
      vfile-message: 4.0.2

  micromark-extension-mdx-md@2.0.0:
    dependencies:
      micromark-util-types: 2.0.0

  micromark-extension-mdxjs-esm@3.0.0:
    dependencies:
      '@types/estree': 1.0.6
      devlop: 1.1.0
      micromark-core-commonmark: 2.0.1
      micromark-util-character: 2.1.0
      micromark-util-events-to-acorn: 2.0.2
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0
      unist-util-position-from-estree: 2.0.0
      vfile-message: 4.0.2

  micromark-extension-mdxjs@3.0.0:
    dependencies:
      acorn: 8.14.0
      acorn-jsx: 5.3.2(acorn@8.14.0)
      micromark-extension-mdx-expression: 3.0.0
      micromark-extension-mdx-jsx: 3.0.0
      micromark-extension-mdx-md: 2.0.0
      micromark-extension-mdxjs-esm: 3.0.0
      micromark-util-combine-extensions: 2.0.0
      micromark-util-types: 2.0.0

  micromark-factory-destination@2.0.0:
    dependencies:
      micromark-util-character: 2.1.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-factory-label@2.0.0:
    dependencies:
      devlop: 1.1.0
      micromark-util-character: 2.1.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-factory-mdx-expression@2.0.1:
    dependencies:
      '@types/estree': 1.0.6
      devlop: 1.1.0
      micromark-util-character: 2.1.0
      micromark-util-events-to-acorn: 2.0.2
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0
      unist-util-position-from-estree: 2.0.0
      vfile-message: 4.0.2

  micromark-factory-space@1.1.0:
    dependencies:
      micromark-util-character: 1.2.0
      micromark-util-types: 1.1.0

  micromark-factory-space@2.0.0:
    dependencies:
      micromark-util-character: 2.1.0
      micromark-util-types: 2.0.0

  micromark-factory-title@2.0.0:
    dependencies:
      micromark-factory-space: 2.0.0
      micromark-util-character: 2.1.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-factory-whitespace@2.0.0:
    dependencies:
      micromark-factory-space: 2.0.0
      micromark-util-character: 2.1.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-util-character@1.2.0:
    dependencies:
      micromark-util-symbol: 1.1.0
      micromark-util-types: 1.1.0

  micromark-util-character@2.1.0:
    dependencies:
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-util-chunked@2.0.0:
    dependencies:
      micromark-util-symbol: 2.0.0

  micromark-util-classify-character@2.0.0:
    dependencies:
      micromark-util-character: 2.1.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-util-combine-extensions@2.0.0:
    dependencies:
      micromark-util-chunked: 2.0.0
      micromark-util-types: 2.0.0

  micromark-util-decode-numeric-character-reference@2.0.1:
    dependencies:
      micromark-util-symbol: 2.0.0

  micromark-util-decode-string@2.0.0:
    dependencies:
      decode-named-character-reference: 1.0.2
      micromark-util-character: 2.1.0
      micromark-util-decode-numeric-character-reference: 2.0.1
      micromark-util-symbol: 2.0.0

  micromark-util-encode@2.0.0: {}

  micromark-util-events-to-acorn@2.0.2:
    dependencies:
      '@types/acorn': 4.0.6
      '@types/estree': 1.0.6
      '@types/unist': 3.0.2
      devlop: 1.1.0
      estree-util-visit: 2.0.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0
      vfile-message: 4.0.2

  micromark-util-html-tag-name@2.0.0: {}

  micromark-util-normalize-identifier@2.0.0:
    dependencies:
      micromark-util-symbol: 2.0.0

  micromark-util-resolve-all@2.0.0:
    dependencies:
      micromark-util-types: 2.0.0

  micromark-util-sanitize-uri@2.0.0:
    dependencies:
      micromark-util-character: 2.1.0
      micromark-util-encode: 2.0.0
      micromark-util-symbol: 2.0.0

  micromark-util-subtokenize@2.0.1:
    dependencies:
      devlop: 1.1.0
      micromark-util-chunked: 2.0.0
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0

  micromark-util-symbol@1.1.0: {}

  micromark-util-symbol@2.0.0: {}

  micromark-util-types@1.1.0: {}

  micromark-util-types@2.0.0: {}

  micromark@4.0.0:
    dependencies:
      '@types/debug': 4.1.12
      debug: 4.3.4
      decode-named-character-reference: 1.0.2
      devlop: 1.1.0
      micromark-core-commonmark: 2.0.1
      micromark-factory-space: 2.0.0
      micromark-util-character: 2.1.0
      micromark-util-chunked: 2.0.0
      micromark-util-combine-extensions: 2.0.0
      micromark-util-decode-numeric-character-reference: 2.0.1
      micromark-util-encode: 2.0.0
      micromark-util-normalize-identifier: 2.0.0
      micromark-util-resolve-all: 2.0.0
      micromark-util-sanitize-uri: 2.0.0
      micromark-util-subtokenize: 2.0.1
      micromark-util-symbol: 2.0.0
      micromark-util-types: 2.0.0
    transitivePeerDependencies:
      - supports-color

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.33.0: {}

  mime-db@1.52.0: {}

  mime-types@2.1.18:
    dependencies:
      mime-db: 1.33.0

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  mime@1.6.0: {}

  mimic-fn@2.1.0: {}

  mimic-response@3.1.0: {}

  mimic-response@4.0.0: {}

  mini-css-extract-plugin@2.9.2(webpack@5.96.1):
    dependencies:
      schema-utils: 4.2.0
      tapable: 2.2.1
      webpack: 5.96.1

  minimalistic-assert@1.0.1: {}

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.11

  minimatch@9.0.4:
    dependencies:
      brace-expansion: 2.0.1

  minimist@1.2.8: {}

  minipass@7.0.4: {}

  mrmime@2.0.0: {}

  ms@2.0.0: {}

  ms@2.1.2: {}

  ms@2.1.3: {}

  multicast-dns@7.2.5:
    dependencies:
      dns-packet: 5.6.1
      thunky: 1.1.0

  mz@2.7.0:
    dependencies:
      any-promise: 1.3.0
      object-assign: 4.1.1
      thenify-all: 1.6.0

  nanoid@3.3.7: {}

  negotiator@0.6.3: {}

  neo-async@2.6.2: {}

  no-case@3.0.4:
    dependencies:
      lower-case: 2.0.2
      tslib: 2.6.2

  node-emoji@2.1.3:
    dependencies:
      '@sindresorhus/is': 4.6.0
      char-regex: 1.0.2
      emojilib: 2.4.0
      skin-tone: 2.0.0

  node-forge@1.3.1: {}

  node-releases@2.0.18: {}

  normalize-path@3.0.0: {}

  normalize-range@0.1.2: {}

  normalize-url@8.0.1: {}

  npm-run-path@4.0.1:
    dependencies:
      path-key: 3.1.1

  npm-to-yarn@3.0.0: {}

  nprogress@0.2.0: {}

  nth-check@2.1.1:
    dependencies:
      boolbase: 1.0.0

  null-loader@4.0.1(webpack@5.96.1):
    dependencies:
      loader-utils: 2.0.4
      schema-utils: 3.3.0
      webpack: 5.96.1

  object-assign@4.1.1: {}

  object-hash@3.0.0: {}

  object-inspect@1.13.1: {}

  object-keys@1.1.1: {}

  object.assign@4.1.5:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      has-symbols: 1.0.3
      object-keys: 1.1.1

  obuf@1.1.2: {}

  on-finished@2.4.1:
    dependencies:
      ee-first: 1.1.1

  on-headers@1.0.2: {}

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  onetime@5.1.2:
    dependencies:
      mimic-fn: 2.1.0

  open@8.4.2:
    dependencies:
      define-lazy-prop: 2.0.0
      is-docker: 2.2.1
      is-wsl: 2.2.0

  opener@1.5.2: {}

  p-cancelable@3.0.0: {}

  p-limit@2.3.0:
    dependencies:
      p-try: 2.2.0

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-limit@4.0.0:
    dependencies:
      yocto-queue: 1.0.0

  p-locate@3.0.0:
    dependencies:
      p-limit: 2.3.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  p-locate@6.0.0:
    dependencies:
      p-limit: 4.0.0

  p-map@4.0.0:
    dependencies:
      aggregate-error: 3.1.0

  p-retry@4.6.2:
    dependencies:
      '@types/retry': 0.12.0
      retry: 0.13.1

  p-try@2.2.0: {}

  package-json@8.1.1:
    dependencies:
      got: 12.6.1
      registry-auth-token: 5.0.2
      registry-url: 6.0.1
      semver: 7.6.0

  param-case@3.0.4:
    dependencies:
      dot-case: 3.0.4
      tslib: 2.6.2

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parse-entities@4.0.1:
    dependencies:
      '@types/unist': 2.0.10
      character-entities: 2.0.2
      character-entities-legacy: 3.0.0
      character-reference-invalid: 2.0.1
      decode-named-character-reference: 1.0.2
      is-alphanumerical: 2.0.1
      is-decimal: 2.0.1
      is-hexadecimal: 2.0.1

  parse-json@5.2.0:
    dependencies:
      '@babel/code-frame': 7.26.2
      error-ex: 1.3.2
      json-parse-even-better-errors: 2.3.1
      lines-and-columns: 1.2.4

  parse-numeric-range@1.3.0: {}

  parse5-htmlparser2-tree-adapter@7.0.0:
    dependencies:
      domhandler: 5.0.3
      parse5: 7.1.2

  parse5@7.1.2:
    dependencies:
      entities: 4.5.0

  parseurl@1.3.3: {}

  pascal-case@3.1.2:
    dependencies:
      no-case: 3.0.4
      tslib: 2.6.2

  path-exists@3.0.0: {}

  path-exists@4.0.0: {}

  path-exists@5.0.0: {}

  path-is-absolute@1.0.1: {}

  path-is-inside@1.0.2: {}

  path-key@3.1.1: {}

  path-parse@1.0.7: {}

  path-scurry@1.10.2:
    dependencies:
      lru-cache: 10.2.0
      minipass: 7.0.4

  path-to-regexp@0.1.7: {}

  path-to-regexp@1.8.0:
    dependencies:
      isarray: 0.0.1

  path-to-regexp@3.3.0: {}

  path-type@4.0.0: {}

  periscopic@3.1.0:
    dependencies:
      '@types/estree': 1.0.6
      estree-walker: 3.0.3
      is-reference: 3.0.2

  picocolors@1.0.1: {}

  picocolors@1.1.1: {}

  picomatch@2.3.1: {}

  pify@2.3.0: {}

  pirates@4.0.6: {}

  pkg-dir@7.0.0:
    dependencies:
      find-up: 6.3.0

  pkg-up@3.1.0:
    dependencies:
      find-up: 3.0.0

  postcss-attribute-case-insensitive@7.0.1(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0

  postcss-calc@9.0.1(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 6.1.2
      postcss-value-parser: 4.2.0

  postcss-clamp@4.1.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-color-functional-notation@7.0.6(postcss@8.4.49):
    dependencies:
      '@csstools/css-color-parser': 3.0.6(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/postcss-progressive-custom-properties': 4.0.0(postcss@8.4.49)
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49

  postcss-color-hex-alpha@10.0.0(postcss@8.4.49):
    dependencies:
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-color-rebeccapurple@10.0.0(postcss@8.4.49):
    dependencies:
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-colormin@6.1.0(postcss@8.4.49):
    dependencies:
      browserslist: 4.24.2
      caniuse-api: 3.0.0
      colord: 2.9.3
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-convert-values@6.1.0(postcss@8.4.49):
    dependencies:
      browserslist: 4.24.2
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-custom-media@11.0.5(postcss@8.4.49):
    dependencies:
      '@csstools/cascade-layer-name-parser': 2.0.4(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/media-query-list-parser': 4.0.2(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      postcss: 8.4.49

  postcss-custom-properties@14.0.4(postcss@8.4.49):
    dependencies:
      '@csstools/cascade-layer-name-parser': 2.0.4(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-custom-selectors@8.0.4(postcss@8.4.49):
    dependencies:
      '@csstools/cascade-layer-name-parser': 2.0.4(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0

  postcss-dir-pseudo-class@9.0.1(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0

  postcss-discard-comments@6.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  postcss-discard-duplicates@6.0.3(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  postcss-discard-empty@6.0.3(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  postcss-discard-overridden@6.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  postcss-discard-unused@6.0.5(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 6.1.2

  postcss-double-position-gradients@6.0.0(postcss@8.4.49):
    dependencies:
      '@csstools/postcss-progressive-custom-properties': 4.0.0(postcss@8.4.49)
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-focus-visible@10.0.1(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0

  postcss-focus-within@9.0.1(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0

  postcss-font-variant@5.0.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  postcss-gap-properties@6.0.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  postcss-image-set-function@7.0.0(postcss@8.4.49):
    dependencies:
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-import@15.1.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0
      read-cache: 1.0.0
      resolve: 1.22.8

  postcss-js@4.0.1(postcss@8.4.49):
    dependencies:
      camelcase-css: 2.0.1
      postcss: 8.4.49

  postcss-lab-function@7.0.6(postcss@8.4.49):
    dependencies:
      '@csstools/css-color-parser': 3.0.6(@csstools/css-parser-algorithms@3.0.4(@csstools/css-tokenizer@3.0.3))(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-parser-algorithms': 3.0.4(@csstools/css-tokenizer@3.0.3)
      '@csstools/css-tokenizer': 3.0.3
      '@csstools/postcss-progressive-custom-properties': 4.0.0(postcss@8.4.49)
      '@csstools/utilities': 2.0.0(postcss@8.4.49)
      postcss: 8.4.49

  postcss-load-config@4.0.2(postcss@8.4.49):
    dependencies:
      lilconfig: 3.1.3
      yaml: 2.4.1
    optionalDependencies:
      postcss: 8.4.49

  postcss-loader@7.3.4(postcss@8.4.49)(typescript@5.7.2)(webpack@5.96.1):
    dependencies:
      cosmiconfig: 8.3.6(typescript@5.7.2)
      jiti: 1.21.6
      postcss: 8.4.49
      semver: 7.6.0
      webpack: 5.96.1
    transitivePeerDependencies:
      - typescript

  postcss-logical@8.0.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-merge-idents@6.0.3(postcss@8.4.49):
    dependencies:
      cssnano-utils: 4.0.2(postcss@8.4.49)
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-merge-longhand@6.0.5(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0
      stylehacks: 6.1.1(postcss@8.4.49)

  postcss-merge-rules@6.1.1(postcss@8.4.49):
    dependencies:
      browserslist: 4.24.2
      caniuse-api: 3.0.0
      cssnano-utils: 4.0.2(postcss@8.4.49)
      postcss: 8.4.49
      postcss-selector-parser: 6.1.2

  postcss-minify-font-values@6.1.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-minify-gradients@6.0.3(postcss@8.4.49):
    dependencies:
      colord: 2.9.3
      cssnano-utils: 4.0.2(postcss@8.4.49)
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-minify-params@6.1.0(postcss@8.4.49):
    dependencies:
      browserslist: 4.24.2
      cssnano-utils: 4.0.2(postcss@8.4.49)
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-minify-selectors@6.0.4(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 6.1.2

  postcss-modules-extract-imports@3.1.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  postcss-modules-local-by-default@4.0.5(postcss@8.4.49):
    dependencies:
      icss-utils: 5.1.0(postcss@8.4.49)
      postcss: 8.4.49
      postcss-selector-parser: 6.1.2
      postcss-value-parser: 4.2.0

  postcss-modules-scope@3.2.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 6.1.2

  postcss-modules-values@4.0.0(postcss@8.4.49):
    dependencies:
      icss-utils: 5.1.0(postcss@8.4.49)
      postcss: 8.4.49

  postcss-nested@6.2.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 6.1.2

  postcss-nested@7.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0

  postcss-nesting@13.0.1(postcss@8.4.49):
    dependencies:
      '@csstools/selector-resolve-nested': 3.0.0(postcss-selector-parser@7.0.0)
      '@csstools/selector-specificity': 5.0.0(postcss-selector-parser@7.0.0)
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0

  postcss-normalize-charset@6.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  postcss-normalize-display-values@6.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-normalize-positions@6.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-normalize-repeat-style@6.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-normalize-string@6.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-normalize-timing-functions@6.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-normalize-unicode@6.1.0(postcss@8.4.49):
    dependencies:
      browserslist: 4.24.2
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-normalize-url@6.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-normalize-whitespace@6.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-opacity-percentage@3.0.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  postcss-ordered-values@6.0.2(postcss@8.4.49):
    dependencies:
      cssnano-utils: 4.0.2(postcss@8.4.49)
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-overflow-shorthand@6.0.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-page-break@3.0.4(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  postcss-place@10.0.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-preset-env@10.1.1(postcss@8.4.49):
    dependencies:
      '@csstools/postcss-cascade-layers': 5.0.1(postcss@8.4.49)
      '@csstools/postcss-color-function': 4.0.6(postcss@8.4.49)
      '@csstools/postcss-color-mix-function': 3.0.6(postcss@8.4.49)
      '@csstools/postcss-content-alt-text': 2.0.4(postcss@8.4.49)
      '@csstools/postcss-exponential-functions': 2.0.5(postcss@8.4.49)
      '@csstools/postcss-font-format-keywords': 4.0.0(postcss@8.4.49)
      '@csstools/postcss-gamut-mapping': 2.0.6(postcss@8.4.49)
      '@csstools/postcss-gradients-interpolation-method': 5.0.6(postcss@8.4.49)
      '@csstools/postcss-hwb-function': 4.0.6(postcss@8.4.49)
      '@csstools/postcss-ic-unit': 4.0.0(postcss@8.4.49)
      '@csstools/postcss-initial': 2.0.0(postcss@8.4.49)
      '@csstools/postcss-is-pseudo-class': 5.0.1(postcss@8.4.49)
      '@csstools/postcss-light-dark-function': 2.0.7(postcss@8.4.49)
      '@csstools/postcss-logical-float-and-clear': 3.0.0(postcss@8.4.49)
      '@csstools/postcss-logical-overflow': 2.0.0(postcss@8.4.49)
      '@csstools/postcss-logical-overscroll-behavior': 2.0.0(postcss@8.4.49)
      '@csstools/postcss-logical-resize': 3.0.0(postcss@8.4.49)
      '@csstools/postcss-logical-viewport-units': 3.0.3(postcss@8.4.49)
      '@csstools/postcss-media-minmax': 2.0.5(postcss@8.4.49)
      '@csstools/postcss-media-queries-aspect-ratio-number-values': 3.0.4(postcss@8.4.49)
      '@csstools/postcss-nested-calc': 4.0.0(postcss@8.4.49)
      '@csstools/postcss-normalize-display-values': 4.0.0(postcss@8.4.49)
      '@csstools/postcss-oklab-function': 4.0.6(postcss@8.4.49)
      '@csstools/postcss-progressive-custom-properties': 4.0.0(postcss@8.4.49)
      '@csstools/postcss-random-function': 1.0.1(postcss@8.4.49)
      '@csstools/postcss-relative-color-syntax': 3.0.6(postcss@8.4.49)
      '@csstools/postcss-scope-pseudo-class': 4.0.1(postcss@8.4.49)
      '@csstools/postcss-sign-functions': 1.1.0(postcss@8.4.49)
      '@csstools/postcss-stepped-value-functions': 4.0.5(postcss@8.4.49)
      '@csstools/postcss-text-decoration-shorthand': 4.0.1(postcss@8.4.49)
      '@csstools/postcss-trigonometric-functions': 4.0.5(postcss@8.4.49)
      '@csstools/postcss-unset-value': 4.0.0(postcss@8.4.49)
      autoprefixer: 10.4.20(postcss@8.4.49)
      browserslist: 4.24.2
      css-blank-pseudo: 7.0.1(postcss@8.4.49)
      css-has-pseudo: 7.0.1(postcss@8.4.49)
      css-prefers-color-scheme: 10.0.0(postcss@8.4.49)
      cssdb: 8.2.1
      postcss: 8.4.49
      postcss-attribute-case-insensitive: 7.0.1(postcss@8.4.49)
      postcss-clamp: 4.1.0(postcss@8.4.49)
      postcss-color-functional-notation: 7.0.6(postcss@8.4.49)
      postcss-color-hex-alpha: 10.0.0(postcss@8.4.49)
      postcss-color-rebeccapurple: 10.0.0(postcss@8.4.49)
      postcss-custom-media: 11.0.5(postcss@8.4.49)
      postcss-custom-properties: 14.0.4(postcss@8.4.49)
      postcss-custom-selectors: 8.0.4(postcss@8.4.49)
      postcss-dir-pseudo-class: 9.0.1(postcss@8.4.49)
      postcss-double-position-gradients: 6.0.0(postcss@8.4.49)
      postcss-focus-visible: 10.0.1(postcss@8.4.49)
      postcss-focus-within: 9.0.1(postcss@8.4.49)
      postcss-font-variant: 5.0.0(postcss@8.4.49)
      postcss-gap-properties: 6.0.0(postcss@8.4.49)
      postcss-image-set-function: 7.0.0(postcss@8.4.49)
      postcss-lab-function: 7.0.6(postcss@8.4.49)
      postcss-logical: 8.0.0(postcss@8.4.49)
      postcss-nesting: 13.0.1(postcss@8.4.49)
      postcss-opacity-percentage: 3.0.0(postcss@8.4.49)
      postcss-overflow-shorthand: 6.0.0(postcss@8.4.49)
      postcss-page-break: 3.0.4(postcss@8.4.49)
      postcss-place: 10.0.0(postcss@8.4.49)
      postcss-pseudo-class-any-link: 10.0.1(postcss@8.4.49)
      postcss-replace-overflow-wrap: 4.0.0(postcss@8.4.49)
      postcss-selector-not: 8.0.1(postcss@8.4.49)

  postcss-pseudo-class-any-link@10.0.1(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0

  postcss-reduce-idents@6.0.3(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-reduce-initial@6.1.0(postcss@8.4.49):
    dependencies:
      browserslist: 4.24.2
      caniuse-api: 3.0.0
      postcss: 8.4.49

  postcss-reduce-transforms@6.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  postcss-replace-overflow-wrap@4.0.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  postcss-selector-not@8.0.1(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 7.0.0

  postcss-selector-parser@6.1.2:
    dependencies:
      cssesc: 3.0.0
      util-deprecate: 1.0.2

  postcss-selector-parser@7.0.0:
    dependencies:
      cssesc: 3.0.0
      util-deprecate: 1.0.2

  postcss-sort-media-queries@5.2.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      sort-css-media-queries: 2.2.0

  postcss-svgo@6.0.3(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0
      svgo: 3.2.0

  postcss-unique-selectors@6.0.4(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 6.1.2

  postcss-value-parser@4.2.0: {}

  postcss-zindex@6.0.2(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49

  postcss@8.4.49:
    dependencies:
      nanoid: 3.3.7
      picocolors: 1.1.1
      source-map-js: 1.2.1

  pretty-error@4.0.0:
    dependencies:
      lodash: 4.17.21
      renderkid: 3.0.0

  pretty-time@1.1.0: {}

  prism-react-renderer@2.4.0(react@18.3.1):
    dependencies:
      '@types/prismjs': 1.26.3
      clsx: 2.1.1
      react: 18.3.1

  prismjs@1.29.0: {}

  process-nextick-args@2.0.1: {}

  prompts@2.4.2:
    dependencies:
      kleur: 3.0.3
      sisteransi: 1.0.5

  prop-types@15.8.1:
    dependencies:
      loose-envify: 1.4.0
      object-assign: 4.1.1
      react-is: 16.13.1

  property-information@6.5.0: {}

  proto-list@1.2.4: {}

  proxy-addr@2.0.7:
    dependencies:
      forwarded: 0.2.0
      ipaddr.js: 1.9.1

  punycode@2.3.1: {}

  pupa@3.1.0:
    dependencies:
      escape-goat: 4.0.0

  qs@6.11.0:
    dependencies:
      side-channel: 1.0.6

  queue-microtask@1.2.3: {}

  queue@6.0.2:
    dependencies:
      inherits: 2.0.4

  quick-lru@5.1.1: {}

  randombytes@2.1.0:
    dependencies:
      safe-buffer: 5.2.1

  range-parser@1.2.0: {}

  range-parser@1.2.1: {}

  raw-body@2.5.2:
    dependencies:
      bytes: 3.1.2
      http-errors: 2.0.0
      iconv-lite: 0.4.24
      unpipe: 1.0.0

  rc@1.2.8:
    dependencies:
      deep-extend: 0.6.0
      ini: 1.3.8
      minimist: 1.2.8
      strip-json-comments: 2.0.1

  react-dev-utils@12.0.1(typescript@5.7.2)(webpack@5.96.1):
    dependencies:
      '@babel/code-frame': 7.26.2
      address: 1.2.2
      browserslist: 4.24.2
      chalk: 4.1.2
      cross-spawn: 7.0.3
      detect-port-alt: 1.1.6
      escape-string-regexp: 4.0.0
      filesize: 8.0.7
      find-up: 5.0.0
      fork-ts-checker-webpack-plugin: 6.5.3(typescript@5.7.2)(webpack@5.96.1)
      global-modules: 2.0.0
      globby: 11.1.0
      gzip-size: 6.0.0
      immer: 9.0.21
      is-root: 2.1.0
      loader-utils: 3.2.1
      open: 8.4.2
      pkg-up: 3.1.0
      prompts: 2.4.2
      react-error-overlay: 6.0.11
      recursive-readdir: 2.2.3
      shell-quote: 1.8.1
      strip-ansi: 6.0.1
      text-table: 0.2.0
      webpack: 5.96.1
    optionalDependencies:
      typescript: 5.7.2
    transitivePeerDependencies:
      - eslint
      - supports-color
      - vue-template-compiler

  react-dom@18.3.1(react@18.3.1):
    dependencies:
      loose-envify: 1.4.0
      react: 18.3.1
      scheduler: 0.23.2

  react-error-overlay@6.0.11: {}

  react-fast-compare@3.2.2: {}

  react-helmet-async@1.3.0(react-dom@18.3.1(react@18.3.1))(react@18.3.1):
    dependencies:
      '@babel/runtime': 7.26.0
      invariant: 2.2.4
      prop-types: 15.8.1
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      react-fast-compare: 3.2.2
      shallowequal: 1.1.0

  react-helmet-async@2.0.4(react-dom@18.3.1(react@18.3.1))(react@18.3.1):
    dependencies:
      invariant: 2.2.4
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      react-fast-compare: 3.2.2
      shallowequal: 1.1.0

  react-is@16.13.1: {}

  react-json-view-lite@1.3.0(react@18.3.1):
    dependencies:
      react: 18.3.1

  react-loadable-ssr-addon-v5-slorber@1.0.1(@docusaurus/react-loadable@6.0.0(react@18.3.1))(webpack@5.96.1):
    dependencies:
      '@babel/runtime': 7.26.0
      react-loadable: '@docusaurus/react-loadable@6.0.0(react@18.3.1)'
      webpack: 5.96.1

  react-router-config@5.1.1(react-router@5.3.4(react@18.3.1))(react@18.3.1):
    dependencies:
      '@babel/runtime': 7.26.0
      react: 18.3.1
      react-router: 5.3.4(react@18.3.1)

  react-router-dom@5.3.4(react@18.3.1):
    dependencies:
      '@babel/runtime': 7.26.0
      history: 4.10.1
      loose-envify: 1.4.0
      prop-types: 15.8.1
      react: 18.3.1
      react-router: 5.3.4(react@18.3.1)
      tiny-invariant: 1.3.3
      tiny-warning: 1.0.3

  react-router@5.3.4(react@18.3.1):
    dependencies:
      '@babel/runtime': 7.26.0
      history: 4.10.1
      hoist-non-react-statics: 3.3.2
      loose-envify: 1.4.0
      path-to-regexp: 1.8.0
      prop-types: 15.8.1
      react: 18.3.1
      react-is: 16.13.1
      tiny-invariant: 1.3.3
      tiny-warning: 1.0.3

  react@18.3.1:
    dependencies:
      loose-envify: 1.4.0

  read-cache@1.0.0:
    dependencies:
      pify: 2.3.0

  readable-stream@2.3.8:
    dependencies:
      core-util-is: 1.0.3
      inherits: 2.0.4
      isarray: 1.0.0
      process-nextick-args: 2.0.1
      safe-buffer: 5.1.2
      string_decoder: 1.1.1
      util-deprecate: 1.0.2

  readable-stream@3.6.2:
    dependencies:
      inherits: 2.0.4
      string_decoder: 1.3.0
      util-deprecate: 1.0.2

  readdirp@3.6.0:
    dependencies:
      picomatch: 2.3.1

  reading-time@1.5.0: {}

  rechoir@0.6.2:
    dependencies:
      resolve: 1.22.8

  recursive-readdir@2.2.3:
    dependencies:
      minimatch: 3.1.2

  regenerate-unicode-properties@10.2.0:
    dependencies:
      regenerate: 1.4.2

  regenerate@1.4.2: {}

  regenerator-runtime@0.14.1: {}

  regenerator-transform@0.15.2:
    dependencies:
      '@babel/runtime': 7.26.0

  regexpu-core@6.1.1:
    dependencies:
      regenerate: 1.4.2
      regenerate-unicode-properties: 10.2.0
      regjsgen: 0.8.0
      regjsparser: 0.11.2
      unicode-match-property-ecmascript: 2.0.0
      unicode-match-property-value-ecmascript: 2.1.0

  registry-auth-token@5.0.2:
    dependencies:
      '@pnpm/npm-conf': 2.2.2

  registry-url@6.0.1:
    dependencies:
      rc: 1.2.8

  regjsgen@0.8.0: {}

  regjsparser@0.11.2:
    dependencies:
      jsesc: 3.0.2

  rehype-raw@7.0.0:
    dependencies:
      '@types/hast': 3.0.4
      hast-util-raw: 9.0.2
      vfile: 6.0.1

  relateurl@0.2.7: {}

  remark-directive@3.0.0:
    dependencies:
      '@types/mdast': 4.0.3
      mdast-util-directive: 3.0.0
      micromark-extension-directive: 3.0.0
      unified: 11.0.4
    transitivePeerDependencies:
      - supports-color

  remark-emoji@4.0.1:
    dependencies:
      '@types/mdast': 4.0.3
      emoticon: 4.0.1
      mdast-util-find-and-replace: 3.0.1
      node-emoji: 2.1.3
      unified: 11.0.4

  remark-frontmatter@5.0.0:
    dependencies:
      '@types/mdast': 4.0.3
      mdast-util-frontmatter: 2.0.1
      micromark-extension-frontmatter: 2.0.0
      unified: 11.0.4
    transitivePeerDependencies:
      - supports-color

  remark-gfm@4.0.0:
    dependencies:
      '@types/mdast': 4.0.3
      mdast-util-gfm: 3.0.0
      micromark-extension-gfm: 3.0.0
      remark-parse: 11.0.0
      remark-stringify: 11.0.0
      unified: 11.0.4
    transitivePeerDependencies:
      - supports-color

  remark-mdx@3.0.1:
    dependencies:
      mdast-util-mdx: 3.0.0
      micromark-extension-mdxjs: 3.0.0
    transitivePeerDependencies:
      - supports-color

  remark-parse@11.0.0:
    dependencies:
      '@types/mdast': 4.0.3
      mdast-util-from-markdown: 2.0.0
      micromark-util-types: 2.0.0
      unified: 11.0.4
    transitivePeerDependencies:
      - supports-color

  remark-rehype@11.1.0:
    dependencies:
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.3
      mdast-util-to-hast: 13.1.0
      unified: 11.0.4
      vfile: 6.0.1

  remark-stringify@11.0.0:
    dependencies:
      '@types/mdast': 4.0.3
      mdast-util-to-markdown: 2.1.0
      unified: 11.0.4

  renderkid@3.0.0:
    dependencies:
      css-select: 4.3.0
      dom-converter: 0.2.0
      htmlparser2: 6.1.0
      lodash: 4.17.21
      strip-ansi: 6.0.1

  repeat-string@1.6.1: {}

  require-from-string@2.0.2: {}

  require-like@0.1.2: {}

  requires-port@1.0.0: {}

  resolve-alpn@1.2.1: {}

  resolve-from@4.0.0: {}

  resolve-pathname@3.0.0: {}

  resolve@1.22.8:
    dependencies:
      is-core-module: 2.13.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  responselike@3.0.0:
    dependencies:
      lowercase-keys: 3.0.0

  retry@0.13.1: {}

  reusify@1.0.4: {}

  rimraf@3.0.2:
    dependencies:
      glob: 7.2.3

  rtl-detect@1.1.2: {}

  rtlcss@4.1.1:
    dependencies:
      escalade: 3.2.0
      picocolors: 1.1.1
      postcss: 8.4.49
      strip-json-comments: 3.1.1

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  safe-buffer@5.1.2: {}

  safe-buffer@5.2.1: {}

  safer-buffer@2.1.2: {}

  sax@1.3.0: {}

  scheduler@0.23.2:
    dependencies:
      loose-envify: 1.4.0

  schema-utils@2.7.0:
    dependencies:
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      ajv-keywords: 3.5.2(ajv@6.12.6)

  schema-utils@3.3.0:
    dependencies:
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      ajv-keywords: 3.5.2(ajv@6.12.6)

  schema-utils@4.2.0:
    dependencies:
      '@types/json-schema': 7.0.15
      ajv: 8.12.0
      ajv-formats: 2.1.1(ajv@8.12.0)
      ajv-keywords: 5.1.0(ajv@8.12.0)

  search-insights@2.13.0: {}

  section-matter@1.0.0:
    dependencies:
      extend-shallow: 2.0.1
      kind-of: 6.0.3

  select-hose@2.0.0: {}

  selfsigned@2.4.1:
    dependencies:
      '@types/node-forge': 1.3.11
      node-forge: 1.3.1

  semver-diff@4.0.0:
    dependencies:
      semver: 7.6.0

  semver@6.3.1: {}

  semver@7.6.0:
    dependencies:
      lru-cache: 6.0.0

  send@0.18.0:
    dependencies:
      debug: 2.6.9
      depd: 2.0.0
      destroy: 1.2.0
      encodeurl: 1.0.2
      escape-html: 1.0.3
      etag: 1.8.1
      fresh: 0.5.2
      http-errors: 2.0.0
      mime: 1.6.0
      ms: 2.1.3
      on-finished: 2.4.1
      range-parser: 1.2.1
      statuses: 2.0.1
    transitivePeerDependencies:
      - supports-color

  serialize-javascript@6.0.2:
    dependencies:
      randombytes: 2.1.0

  serve-handler@6.1.6:
    dependencies:
      bytes: 3.0.0
      content-disposition: 0.5.2
      mime-types: 2.1.18
      minimatch: 3.1.2
      path-is-inside: 1.0.2
      path-to-regexp: 3.3.0
      range-parser: 1.2.0

  serve-index@1.9.1:
    dependencies:
      accepts: 1.3.8
      batch: 0.6.1
      debug: 2.6.9
      escape-html: 1.0.3
      http-errors: 1.6.3
      mime-types: 2.1.35
      parseurl: 1.3.3
    transitivePeerDependencies:
      - supports-color

  serve-static@1.15.0:
    dependencies:
      encodeurl: 1.0.2
      escape-html: 1.0.3
      parseurl: 1.3.3
      send: 0.18.0
    transitivePeerDependencies:
      - supports-color

  set-function-length@1.2.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.2.4
      gopd: 1.0.1
      has-property-descriptors: 1.0.2

  setprototypeof@1.1.0: {}

  setprototypeof@1.2.0: {}

  shallow-clone@3.0.1:
    dependencies:
      kind-of: 6.0.3

  shallowequal@1.1.0: {}

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  shell-quote@1.8.1: {}

  shelljs@0.8.5:
    dependencies:
      glob: 7.2.3
      interpret: 1.4.0
      rechoir: 0.6.2

  side-channel@1.0.6:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      get-intrinsic: 1.2.4
      object-inspect: 1.13.1

  signal-exit@3.0.7: {}

  signal-exit@4.1.0: {}

  sirv@2.0.4:
    dependencies:
      '@polka/url': 1.0.0-next.25
      mrmime: 2.0.0
      totalist: 3.0.1

  sisteransi@1.0.5: {}

  sitemap@7.1.1:
    dependencies:
      '@types/node': 17.0.45
      '@types/sax': 1.2.7
      arg: 5.0.2
      sax: 1.3.0

  skin-tone@2.0.0:
    dependencies:
      unicode-emoji-modifier-base: 1.0.0

  slash@3.0.0: {}

  slash@4.0.0: {}

  snake-case@3.0.4:
    dependencies:
      dot-case: 3.0.4
      tslib: 2.6.2

  sockjs@0.3.24:
    dependencies:
      faye-websocket: 0.11.4
      uuid: 8.3.2
      websocket-driver: 0.7.4

  sort-css-media-queries@2.2.0: {}

  source-map-js@1.2.1: {}

  source-map-support@0.5.21:
    dependencies:
      buffer-from: 1.1.2
      source-map: 0.6.1

  source-map@0.6.1: {}

  source-map@0.7.4: {}

  space-separated-tokens@2.0.2: {}

  spdy-transport@3.0.0:
    dependencies:
      debug: 4.3.4
      detect-node: 2.1.0
      hpack.js: 2.1.6
      obuf: 1.1.2
      readable-stream: 3.6.2
      wbuf: 1.7.3
    transitivePeerDependencies:
      - supports-color

  spdy@4.0.2:
    dependencies:
      debug: 4.3.4
      handle-thing: 2.0.1
      http-deceiver: 1.2.7
      select-hose: 2.0.0
      spdy-transport: 3.0.0
    transitivePeerDependencies:
      - supports-color

  sprintf-js@1.0.3: {}

  srcset@4.0.0: {}

  statuses@1.5.0: {}

  statuses@2.0.1: {}

  std-env@3.7.0: {}

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string_decoder@1.1.1:
    dependencies:
      safe-buffer: 5.1.2

  string_decoder@1.3.0:
    dependencies:
      safe-buffer: 5.2.1

  stringify-entities@4.0.4:
    dependencies:
      character-entities-html4: 2.1.0
      character-entities-legacy: 3.0.0

  stringify-object@3.3.0:
    dependencies:
      get-own-enumerable-property-symbols: 3.0.2
      is-obj: 1.0.1
      is-regexp: 1.0.0

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.0.1

  strip-bom-string@1.0.0: {}

  strip-final-newline@2.0.0: {}

  strip-json-comments@2.0.1: {}

  strip-json-comments@3.1.1: {}

  style-to-object@0.4.4:
    dependencies:
      inline-style-parser: 0.1.1

  style-to-object@1.0.6:
    dependencies:
      inline-style-parser: 0.2.3

  stylehacks@6.1.1(postcss@8.4.49):
    dependencies:
      browserslist: 4.24.2
      postcss: 8.4.49
      postcss-selector-parser: 6.1.2

  sucrase@3.35.0:
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      commander: 4.1.1
      glob: 10.3.12
      lines-and-columns: 1.2.4
      mz: 2.7.0
      pirates: 4.0.6
      ts-interface-checker: 0.1.13

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-color@8.1.1:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  svg-parser@2.0.4: {}

  svgo@3.2.0:
    dependencies:
      '@trysound/sax': 0.2.0
      commander: 7.2.0
      css-select: 5.1.0
      css-tree: 2.3.1
      css-what: 6.1.0
      csso: 5.0.5
      picocolors: 1.1.1

  tailwindcss-bg-patterns@0.3.0(tailwindcss@3.4.16):
    dependencies:
      tailwindcss: 3.4.16

  tailwindcss@3.4.16:
    dependencies:
      '@alloc/quick-lru': 5.2.0
      arg: 5.0.2
      chokidar: 3.6.0
      didyoumean: 1.2.2
      dlv: 1.1.3
      fast-glob: 3.3.2
      glob-parent: 6.0.2
      is-glob: 4.0.3
      jiti: 1.21.6
      lilconfig: 3.1.3
      micromatch: 4.0.8
      normalize-path: 3.0.0
      object-hash: 3.0.0
      picocolors: 1.1.1
      postcss: 8.4.49
      postcss-import: 15.1.0(postcss@8.4.49)
      postcss-js: 4.0.1(postcss@8.4.49)
      postcss-load-config: 4.0.2(postcss@8.4.49)
      postcss-nested: 6.2.0(postcss@8.4.49)
      postcss-selector-parser: 6.1.2
      resolve: 1.22.8
      sucrase: 3.35.0
    transitivePeerDependencies:
      - ts-node

  tapable@1.1.3: {}

  tapable@2.2.1: {}

  terser-webpack-plugin@5.3.10(webpack@5.96.1):
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      jest-worker: 27.5.1
      schema-utils: 3.3.0
      serialize-javascript: 6.0.2
      terser: 5.30.4
      webpack: 5.96.1

  terser@5.30.4:
    dependencies:
      '@jridgewell/source-map': 0.3.6
      acorn: 8.14.0
      commander: 2.20.3
      source-map-support: 0.5.21

  text-table@0.2.0: {}

  thenify-all@1.6.0:
    dependencies:
      thenify: 3.3.1

  thenify@3.3.1:
    dependencies:
      any-promise: 1.3.0

  thunky@1.1.0: {}

  tiny-invariant@1.3.3: {}

  tiny-warning@1.0.3: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  toidentifier@1.0.1: {}

  totalist@3.0.1: {}

  trim-lines@3.0.1: {}

  trough@2.2.0: {}

  ts-interface-checker@0.1.13: {}

  tslib@2.6.2: {}

  type-fest@0.21.3: {}

  type-fest@1.4.0: {}

  type-fest@2.19.0: {}

  type-is@1.6.18:
    dependencies:
      media-typer: 0.3.0
      mime-types: 2.1.35

  typedarray-to-buffer@3.1.5:
    dependencies:
      is-typedarray: 1.0.0

  typescript@5.7.2: {}

  undici-types@5.26.5: {}

  unicode-canonical-property-names-ecmascript@2.0.0: {}

  unicode-emoji-modifier-base@1.0.0: {}

  unicode-match-property-ecmascript@2.0.0:
    dependencies:
      unicode-canonical-property-names-ecmascript: 2.0.0
      unicode-property-aliases-ecmascript: 2.1.0

  unicode-match-property-value-ecmascript@2.1.0: {}

  unicode-property-aliases-ecmascript@2.1.0: {}

  unified@11.0.4:
    dependencies:
      '@types/unist': 3.0.2
      bail: 2.0.2
      devlop: 1.1.0
      extend: 3.0.2
      is-plain-obj: 4.1.0
      trough: 2.2.0
      vfile: 6.0.1

  unique-string@3.0.0:
    dependencies:
      crypto-random-string: 4.0.0

  unist-util-is@6.0.0:
    dependencies:
      '@types/unist': 3.0.2

  unist-util-position-from-estree@2.0.0:
    dependencies:
      '@types/unist': 3.0.2

  unist-util-position@5.0.0:
    dependencies:
      '@types/unist': 3.0.2

  unist-util-remove-position@5.0.0:
    dependencies:
      '@types/unist': 3.0.2
      unist-util-visit: 5.0.0

  unist-util-stringify-position@4.0.0:
    dependencies:
      '@types/unist': 3.0.2

  unist-util-visit-parents@6.0.1:
    dependencies:
      '@types/unist': 3.0.2
      unist-util-is: 6.0.0

  unist-util-visit@5.0.0:
    dependencies:
      '@types/unist': 3.0.2
      unist-util-is: 6.0.0
      unist-util-visit-parents: 6.0.1

  universalify@2.0.1: {}

  unpipe@1.0.0: {}

  update-browserslist-db@1.1.0(browserslist@4.23.3):
    dependencies:
      browserslist: 4.23.3
      escalade: 3.1.2
      picocolors: 1.0.1

  update-browserslist-db@1.1.1(browserslist@4.24.2):
    dependencies:
      browserslist: 4.24.2
      escalade: 3.2.0
      picocolors: 1.1.1

  update-notifier@6.0.2:
    dependencies:
      boxen: 7.1.1
      chalk: 5.3.0
      configstore: 6.0.0
      has-yarn: 3.0.0
      import-lazy: 4.0.0
      is-ci: 3.0.1
      is-installed-globally: 0.4.0
      is-npm: 6.0.0
      is-yarn-global: 0.4.1
      latest-version: 7.0.0
      pupa: 3.1.0
      semver: 7.6.0
      semver-diff: 4.0.0
      xdg-basedir: 5.1.0

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  url-loader@4.1.1(file-loader@6.2.0(webpack@5.96.1))(webpack@5.96.1):
    dependencies:
      loader-utils: 2.0.4
      mime-types: 2.1.35
      schema-utils: 3.3.0
      webpack: 5.96.1
    optionalDependencies:
      file-loader: 6.2.0(webpack@5.96.1)

  util-deprecate@1.0.2: {}

  utila@0.4.0: {}

  utility-types@3.11.0: {}

  utils-merge@1.0.1: {}

  uuid@8.3.2: {}

  value-equal@1.0.1: {}

  vary@1.1.2: {}

  vfile-location@5.0.2:
    dependencies:
      '@types/unist': 3.0.2
      vfile: 6.0.1

  vfile-message@4.0.2:
    dependencies:
      '@types/unist': 3.0.2
      unist-util-stringify-position: 4.0.0

  vfile@6.0.1:
    dependencies:
      '@types/unist': 3.0.2
      unist-util-stringify-position: 4.0.0
      vfile-message: 4.0.2

  watchpack@2.4.1:
    dependencies:
      glob-to-regexp: 0.4.1
      graceful-fs: 4.2.11

  wbuf@1.7.3:
    dependencies:
      minimalistic-assert: 1.0.1

  web-namespaces@2.0.1: {}

  webpack-bundle-analyzer@4.10.2:
    dependencies:
      '@discoveryjs/json-ext': 0.5.7
      acorn: 8.14.0
      acorn-walk: 8.3.2
      commander: 7.2.0
      debounce: 1.2.1
      escape-string-regexp: 4.0.0
      gzip-size: 6.0.0
      html-escaper: 2.0.2
      opener: 1.5.2
      picocolors: 1.1.1
      sirv: 2.0.4
      ws: 7.5.9
    transitivePeerDependencies:
      - bufferutil
      - utf-8-validate

  webpack-dev-middleware@5.3.4(webpack@5.96.1):
    dependencies:
      colorette: 2.0.20
      memfs: 3.5.3
      mime-types: 2.1.35
      range-parser: 1.2.1
      schema-utils: 4.2.0
      webpack: 5.96.1

  webpack-dev-server@4.15.2(webpack@5.96.1):
    dependencies:
      '@types/bonjour': 3.5.13
      '@types/connect-history-api-fallback': 1.5.4
      '@types/express': 4.17.21
      '@types/serve-index': 1.9.4
      '@types/serve-static': 1.15.7
      '@types/sockjs': 0.3.36
      '@types/ws': 8.5.10
      ansi-html-community: 0.0.8
      bonjour-service: 1.2.1
      chokidar: 3.6.0
      colorette: 2.0.20
      compression: 1.7.4
      connect-history-api-fallback: 2.0.0
      default-gateway: 6.0.3
      express: 4.19.2
      graceful-fs: 4.2.11
      html-entities: 2.5.2
      http-proxy-middleware: 2.0.6(@types/express@4.17.21)
      ipaddr.js: 2.2.0
      launch-editor: 2.6.1
      open: 8.4.2
      p-retry: 4.6.2
      rimraf: 3.0.2
      schema-utils: 4.2.0
      selfsigned: 2.4.1
      serve-index: 1.9.1
      sockjs: 0.3.24
      spdy: 4.0.2
      webpack-dev-middleware: 5.3.4(webpack@5.96.1)
      ws: 8.16.0
    optionalDependencies:
      webpack: 5.96.1
    transitivePeerDependencies:
      - bufferutil
      - debug
      - supports-color
      - utf-8-validate

  webpack-merge@5.10.0:
    dependencies:
      clone-deep: 4.0.1
      flat: 5.0.2
      wildcard: 2.0.1

  webpack-merge@6.0.1:
    dependencies:
      clone-deep: 4.0.1
      flat: 5.0.2
      wildcard: 2.0.1

  webpack-sources@3.2.3: {}

  webpack@5.96.1:
    dependencies:
      '@types/eslint-scope': 3.7.7
      '@types/estree': 1.0.6
      '@webassemblyjs/ast': 1.12.1
      '@webassemblyjs/wasm-edit': 1.12.1
      '@webassemblyjs/wasm-parser': 1.12.1
      acorn: 8.14.0
      browserslist: 4.24.2
      chrome-trace-event: 1.0.3
      enhanced-resolve: 5.17.1
      es-module-lexer: 1.5.0
      eslint-scope: 5.1.1
      events: 3.3.0
      glob-to-regexp: 0.4.1
      graceful-fs: 4.2.11
      json-parse-even-better-errors: 2.3.1
      loader-runner: 4.3.0
      mime-types: 2.1.35
      neo-async: 2.6.2
      schema-utils: 3.3.0
      tapable: 2.2.1
      terser-webpack-plugin: 5.3.10(webpack@5.96.1)
      watchpack: 2.4.1
      webpack-sources: 3.2.3
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - uglify-js

  webpackbar@6.0.1(webpack@5.96.1):
    dependencies:
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      consola: 3.2.3
      figures: 3.2.0
      markdown-table: 2.0.0
      pretty-time: 1.1.0
      std-env: 3.7.0
      webpack: 5.96.1
      wrap-ansi: 7.0.0

  websocket-driver@0.7.4:
    dependencies:
      http-parser-js: 0.5.8
      safe-buffer: 5.2.1
      websocket-extensions: 0.1.4

  websocket-extensions@0.1.4: {}

  which@1.3.1:
    dependencies:
      isexe: 2.0.0

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  widest-line@4.0.1:
    dependencies:
      string-width: 5.1.2

  wildcard@2.0.1: {}

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  wrappy@1.0.2: {}

  write-file-atomic@3.0.3:
    dependencies:
      imurmurhash: 0.1.4
      is-typedarray: 1.0.0
      signal-exit: 3.0.7
      typedarray-to-buffer: 3.1.5

  ws@7.5.9: {}

  ws@8.16.0: {}

  xdg-basedir@5.1.0: {}

  xml-js@1.6.11:
    dependencies:
      sax: 1.3.0

  yallist@3.1.1: {}

  yallist@4.0.0: {}

  yaml@1.10.2: {}

  yaml@2.4.1: {}

  yocto-queue@0.1.0: {}

  yocto-queue@1.0.0: {}

  zwitch@2.0.4: {}


================================================
File: /website/docusaurus.config.js
================================================
import { themes } from "prism-react-renderer";

/** @type {import('@docusaurus/types').Config} */
export default {
	title: "next-safe-action",
	tagline: "Type safe Server Actions in your Next.js project",
	favicon: "img/favicon.ico",

	// Set the production url of your site here
	url: "https://next-safe-action.dev",
	// Set the /<baseUrl>/ pathname under which your site is served
	// For GitHub pages deployment, it is often '/<projectName>/'
	baseUrl: "/",

	// GitHub pages deployment config.
	// If you aren't using GitHub pages, you don't need these.
	organizationName: "TheEdoRan", // Usually your GitHub org/user name.
	projectName: "next-safe-action", // Usually your repo name.

	onBrokenLinks: "throw",
	onBrokenMarkdownLinks: "warn",
	onDuplicateRoutes: "throw",
	onBrokenAnchors: "throw",

	scripts: [
		{
			"src": "https://plausible.theedoran.xyz/js/script.js",
			"async": true,
			"defer": true,
			"data-domain": "next-safe-action.dev",
		},
	],
	headTags: [
		{
			tagName: "link",
			attributes: {
				rel: "preconnect",
				href: "https://fonts.googleapis.com",
			},
		},
		{
			tagName: "link",
			attributes: {
				rel: "preconnect",
				href: "https://fonts.gstatic.com",
				crossorigin: "anonymous",
			},
		},
		{
			tagName: "link",
			attributes: {
				rel: "stylesheet",
				href: "https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap",
			},
		},
	],

	// Even if you don't use internalization, you can use this field to set useful
	// metadata like html lang. For example, if your site is Chinese, you may want
	// to replace "en" with "zh-Hans".
	i18n: {
		defaultLocale: "en",
		locales: ["en"],
	},
	presets: [
		[
			"classic",
			/** @type {import('@docusaurus/preset-classic').Options} */
			{
				docs: {
					sidebarPath: require.resolve("./sidebars.js"),
					// Please change this to your repo.
					// Remove this to remove the "edit this page" links.
					editUrl:
						"https://github.com/TheEdoRan/next-safe-action/tree/main/website",
					remarkPlugins: [
						[require("@docusaurus/remark-plugin-npm2yarn"), { sync: true }],
					],
				},
				blog: false,
				theme: {
					customCss: require.resolve("./src/css/custom.css"),
				},
				// sitemap: {
				// 	lastmod: "date",
				// 	changefreq: "weekly",
				// 	priority: 0.8,
				// 	filename: "sitemap.xml",
				// 	createSitemapItems: async (params) => {
				// 		const { defaultCreateSitemapItems, ...rest } = params;
				// 		const items = await defaultCreateSitemapItems(rest);
				// 		return items
				// 		);
				// 	},
			},
		],
	],

	/** @type {import('@docusaurus/preset-classic').ThemeConfig} */
	themeConfig: {
		colorMode: {
			defaultMode: "light",
			respectPrefersColorScheme: true,
		},
		// Replace with your project's social card
		image: "img/social-card.png",
		algolia: {
			appId: "I6TZS9IBSZ",
			apiKey: "87b638e133658cdec7cc633e6c4986c3",
			indexName: "next-safe-action",
		},
		navbar: {
			title: "next-safe-action",
			logo: {
				alt: "next-safe-action",
				src: "img/logo-light-mode.svg",
				srcDark: "img/logo-dark-mode.svg",
			},
			items: [
				{
					type: "docSidebar",
					sidebarId: "docsSidebar",
					position: "left",
					label: "Docs",
				},
				{
					"href": "https://github.com/TheEdoRan/next-safe-action",
					"position": "right",
					"className": "header-github-link",
					"aria-label": "next-safe-action's GitHub page",
				},
			],
		},
		prism: {
			additionalLanguages: ["typescript"],
			theme: themes.vsLight,
			darkTheme: themes.oceanicNext,
		},
	},
};


================================================
File: /website/tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
	content: ["./src/**/*.{js,jsx,ts,tsx}"],
	darkMode: ["class", '[data-theme="dark"]'],
	corePlugins: {
		preflight: false,
	},
	theme: {
		extend: {},
	},
	plugins: [require("tailwindcss-bg-patterns")],
};


================================================
File: /website/src/components/landing/tweet.tsx
================================================
export type TweetProps = {
	tweetURL: string;
	authorName: string;
	authorHandle: string;
	date: string;
	textHTML: string;
};

export function Tweet({
	tweetURL,
	authorName,
	authorHandle,
	date,
	textHTML,
}: TweetProps) {
	return (
		<a
			href={tweetURL}
			target="_blank"
			rel="noopener noreferrer"
			className="p-4 bg-white dark:bg-zinc-800 rounded-xl flex flex-col space-y-4 max-w-lg !no-underline transition hover:brightness-90">
			<div className="flex space-x-4 items-center">
				<img
					src={`/img/x/${authorHandle}.jpg`}
					className="rounded-full w-10 h-10"
				/>
				<div className="flex flex-col">
					<span className="text-sm font-semibold text-zinc-950 dark:text-zinc-50">
						{authorName}
					</span>
					<span className="text-sm text-zinc-600 dark:text-zinc-400">
						@{authorHandle}
					</span>
				</div>
			</div>
			<div
				className="text-zinc-950 dark:text-zinc-50 flex-1"
				dangerouslySetInnerHTML={{ __html: textHTML }}
			/>
			<div className="text-sm text-zinc-600 dark:text-zinc-400 ">{date}</div>
		</a>
	);
}


================================================
File: /website/src/components/landing/testimonials.tsx
================================================
import { Tweet, TweetProps } from "./tweet";

const libURLSpan = `<span class="text-blue-500 dark:text-blue-400">https://github.com/TheEdoRan/next-safe-action</span>`;

const tweets: TweetProps[] = [
	{
		tweetURL: "https://twitter.com/dihmeetree/status/1734512058597605854",
		authorName: "Dmitry",
		authorHandle: "dihmeetree",
		date: "Dec 12, 2023",
		textHTML: `Thank you <b>@TheEdoRan</b> for the "next-safe-action" package! It's super awesome!! Keep up the amazing work! 😊`,
	},
	{
		tweetURL: "https://twitter.com/Kingsley_codes/status/1718282007510143183",
		authorName: "Kingsley O.",
		authorHandle: "Kingsley_codes",
		date: "Oct 28, 2023",
		textHTML: `If you aren't using next-safe-actions by <b>@TheEdoRan</b> for your Next 14 app, what are you waiting for? The DX is marvelous. An even better package than zact and <b>@t3dotgg</b> recommends it too so you know it's good!`,
	},
	{
		tweetURL: "https://twitter.com/zaphodias/status/1654158096048979973",
		authorName: "zaphodias",
		authorHandle: "zaphodias",
		date: "May 4, 2023",
		textHTML: `step 1: upgrade to next 13.4;<br>
step 2: understand actions;<br>
step 3: use <b>@TheEdoRan</b>'s lib 🎉`,
	},
	{
		tweetURL: "https://twitter.com/rclmenezes/status/1654111420047409153",
		authorName: "rigo",
		authorHandle: "rclmenezes",
		date: "May 4, 2023",
		textHTML: `I predict that ${libURLSpan} is going to get a loooooot of stars in a few hours :)<br><br>
Props <b>@TheEdoRan</b>`,
	},
	{
		tweetURL: "https://twitter.com/ErfanEbrahimnia/status/1699816975009013935",
		authorName: "Erfan Ebrahimnia",
		authorHandle: "ErfanEbrahimnia",
		date: "Sep 7, 2023",
		textHTML: `Using next-safe-action by <b>@TheEdoRan</b> in a project right now and really like it<br><br>
It handles input-validation and errors when using Server Actions<br><br>
${libURLSpan}`,
	},
	{
		tweetURL: "https://twitter.com/Xexr/status/1674154036788879360",
		authorName: "Xexr",
		authorHandle: "Xexr",
		date: "Jun 28, 2023",
		textHTML: `<b>@t3dotgg</b> I saw you mention next-safe-action on your live stream. I wanted to throw my hat in the ring and give it a shout out.<br><br>
It's honestly great, <b>@TheEdoRan</b> has done a fantastic job and it deserves way more attention, I suspect it will get it after the stream mention. 👇`,
	},
];

export function Testimonials() {
	return (
		<div className="px-5 md:px-10">
			<div className="mx-auto w-full max-w-6xl">
				<div className="flex-col flex gap-y-20 max-[479px]:gap-[60px] items-center lg:items-center py-20 lg:py-24">
					<div className="flex-col flex items-center justify-center gap-y-[60px] max-[479px]:gap-[60px]">
						<div className="text-center font-bold text-3xl sm:text-4xl lg:text-5xl">
							Coolest web devs say:
						</div>
						<div className="grid grid-cols-1 lg:grid-cols-2 gap-12 lg:gap-16">
							{tweets.map((tweet, idx) => (
								<Tweet key={idx} {...tweet} />
							))}
						</div>
					</div>
				</div>
			</div>
		</div>
	);
}


================================================
File: /website/src/components/landing/github-button.tsx
================================================
import { Star } from "lucide-react";
import { useEffect, useState } from "react";

function useFetchStarsCount() {
	const [starsCount, setStarsCount] = useState<number | null>(undefined);

	useEffect(() => {
		fetch("https://api.github.com/repos/TheEdoRan/next-safe-action")
			.then((res) =>
				res.json().then((data) => {
					if (typeof data.stargazers_count === "number") {
						setStarsCount(data.stargazers_count);
					}
				})
			)
			.catch(console.error);
	}, []);

	return { starsCount };
}

export function GitHubButton() {
	const { starsCount } = useFetchStarsCount();

	return (
		<a
			href="https://github.com/TheEdoRan/next-safe-action"
			target="_blank"
			rel="noopener noreferrer"
			className="!no-underline hover:!bg-sky-100 transition !text-zinc-900 cursor-pointer rounded-lg mr-4 bg-zinc-50 px-3 py-2 font-bold inline-flex items-center justify-center space-x-1 text-sm sm:text-lg md:text-xl">
			<Star className="w-4 h-4 sm:w-6 sm:h-6" />
			<span>
				{starsCount
					? Intl.NumberFormat("en", { notation: "compact" }).format(starsCount)
					: ". . ."}{" "}
				GitHub
			</span>
		</a>
	);
}


================================================
File: /website/src/components/landing/features.tsx
================================================
import { Check } from "lucide-react";
import { Fragment } from "react";

const features: { title: string; description: string }[] = [
	{
		title: "Pretty simple",
		description:
			"No need to overcomplicate things. next-safe-action API is pretty simple, designed with fast development in mind.",
	},
	{
		title: "End-to-end type safety",
		description:
			"With next-safe-action you get full type safety between server and client code.",
	},
	{
		title: "Form Actions support",
		description:
			"next-safe-action supports Form Actions out of the box, with stateful and stateless actions.",
	},
	{
		title: "Powerful middleware system",
		description:
			"Manage authorization, log and halt execution, and much more with a composable middleware system.",
	},
	{
		title: "Input/output validation using multiple validation libraries",
		description: `Input and output are validated using your favorite library.`,
	},
	{
		title: "Advanced server error handling",
		description:
			"Decide how to return execution errors to the client and how to log them on the server.",
	},
	{
		title: "Optimistic updates",
		description:
			"Need to update UI immediately without waiting for server response? You can do it with the powerful <code>useOptimisticAction</code> hook.",
	},
];

export function Features() {
	return (
		<div className="px-5 md:px-10">
			<div className="mx-auto w-full max-w-4xl">
				<div className="flex-col flex gap-y-20 max-[479px]:gap-[60px] items-center lg:items-center py-20 lg:py-24">
					<div className="flex-col flex items-center justify-center gap-y-[60px] max-[479px]:gap-[60px]">
						<div className="text-center font-bold text-3xl sm:text-4xl lg:text-5xl">
							Why choose next-safe-action?
						</div>
						<div className="min-w-full flex flex-col space-y-6">
							{features.map(({ title, description }, idx) => (
								<Fragment key={idx}>
									{idx > 0 ? (
										<div className="h-px min-h-[1px] min-w-full bg-zinc-200 dark:bg-zinc-700"></div>
									) : null}
									<div className="flex space-x-2 sm:space-x-4 md:space-x-6">
										<Check className="w-8 h-8 shrink-0" />
										<div className="flex-col flex items-start gap-y-2 max-[479px]:pr-10">
											<div className="font-bold text-xl sm:text-xl">
												{title}
											</div>
											<div
												className="text-[#8a8880] text-base sm:text-base"
												dangerouslySetInnerHTML={{ __html: description }}
											/>
										</div>
									</div>
								</Fragment>
							))}
						</div>
					</div>
				</div>
			</div>
		</div>
	);
}


================================================
File: /website/src/components/landing/hero.tsx
================================================
import useDocusaurusContext from "@docusaurus/useDocusaurusContext";
import { GitHubButton } from "./github-button";

export function Hero() {
	const { siteConfig } = useDocusaurusContext();

	return (
		<header className="block bg-gradient-to-b from-zinc-50 to-zinc-100 dark:from-zinc-900 dark:to-zinc-950 bg-center bg-cover overflow-hidden relative">
			<div className="absolute inset-0 pattern-dots pattern-zinc-600 pattern-bg-transparent pattern-size-6 pattern-opacity-10" />
			<div className="px-5 md:px-10">
				<div className="mx-auto w-full max-w-7xl">
					<div className="pt-12 pb-4 md:pt-16 md:pb-8 lg:pt-20">
						<div className="mx-auto flex max-w-3xl flex-col items-center text-center mb-8 md:mb-12 lg:mb-16">
							<div className="text-center z-20">
								<div className="mx-auto max-w-3xl mb-5 md:mb-6 lg:mb-8 flex flex-col items-center">
									<h1 className="text-zinc-800 dark:text-zinc-50 text-2xl sm:text-3xl md:text-5xl font-bold tracking-tight">
										{siteConfig.tagline}
									</h1>
									<h2 className="text-zinc-700 dark:text-zinc-300 font-medium text-base sm:text-lg md:text-xl max-w-xl">
										next-safe-action handles your Next.js app mutations type
										safety, input/output validation, server errors and even
										more!
									</h2>
								</div>
								<div className="flex justify-center items-center gap-4">
									<a
										href="/docs/getting-started"
										className="!no-underline hover:brightness-90 transition !text-zinc-100 cursor-pointer rounded-lg bg-zinc-800 px-3 py-2 font-bold inline-flex items-center justify-center text-sm sm:text-lg md:text-xl">
										Getting started ➡️
									</a>
									<GitHubButton />
								</div>
							</div>
						</div>
					</div>
					<div className="cursor-pointer relative z-20 flex items-center justify-center mb-8">
						<video width="1280" height="720" controls muted autoPlay>
							<source src="/vid/demo.mp4" type="video/mp4" />
							Your browser does not support the video tag.
						</video>
					</div>
				</div>
			</div>
		</header>
	);
}


================================================
File: /website/src/components/landing/getting-started.tsx
================================================
export function GettingStarted() {
	return (
		<div className="flex min-h-screen items-center justify-center flex-col">
			<div className="text-xl sm:text-4xl lg:text-5xl tracking-tight font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-500 to-purple-500 dark:from-cyan-300 dark:to-purple-300 sm:h-12 lg:h-16">
				Try it out for yourself!
			</div>
			<div className="flex gap-4 mt-10 flex-wrap items-center justify-center">
				<a
					href="/docs/getting-started"
					className="!no-underline hover:brightness-90 transition cursor-pointer rounded-lg py-2 font-bold inline-flex items-center justify-center text-2xl bg-zinc-800 !text-zinc-100 w-72">
					Get started ➡️
				</a>
				<a
					href="https://next-safe-action-playground.vercel.app/"
					className="!no-underline hover:brightness-90 transition cursor-pointer rounded-lg py-2 font-bold inline-flex items-center justify-center text-2xl bg-orange-500 dark:bg-orange-600 !text-zinc-100 w-72">
					Learn by example ✨
				</a>
			</div>
		</div>
	);
}


================================================
File: /website/src/components/landing/index.tsx
================================================
import { Features } from "./features";
import { GettingStarted } from "./getting-started";
import { Hero } from "./hero";
import { Testimonials } from "./testimonials";

export function Landing() {
	return (
		<main>
			<Hero />
			<Features />
			<div className="h-px min-h-[1px] min-w-full bg-zinc-200 dark:bg-zinc-700"></div>
			<Testimonials />
			<div className="h-px min-h-[1px] min-w-full bg-zinc-200 dark:bg-zinc-700"></div>
			<GettingStarted />
		</main>
	);
}


================================================
File: /website/src/pages/index.tsx
================================================
import useDocusaurusContext from "@docusaurus/useDocusaurusContext";
import Layout from "@theme/Layout";
import { Landing } from "../components/landing";

export default function Home(): JSX.Element {
	const { siteConfig } = useDocusaurusContext();
	return (
		<Layout
			title={siteConfig.tagline}
			description="next-safe-action is a library for defining end-to-end typesafe and validated Server Actions in Next.js App Router projects.">
			<Landing />
		</Layout>
	);
}


================================================
File: /website/src/css/custom.css
================================================
/**
 * Any CSS included here will be global. The classic template
 * bundles Infima by default. Infima is a CSS framework designed to
 * work well for content-centric websites.
 */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* You can override the default Infima variables here. */

.lib-logo > path {
	color: white !important;
}

.header-github-link::before {
	display: flex;
	background-repeat: no-repeat;
	background-position: center;
	height: 1.5rem;
	width: 1.5rem;
	content: "";
	background-image: url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M12%200c-6.626%200-12%205.373-12%2012%200%205.302%203.438%209.8%208.207%2011.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729%201.205.084%201.839%201.237%201.839%201.237%201.07%201.834%202.807%201.304%203.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931%200-1.311.469-2.381%201.236-3.221-.124-.303-.535-1.524.117-3.176%200%200%201.008-.322%203.301%201.23.957-.266%201.983-.399%203.003-.404%201.02.005%202.047.138%203.006.404%202.291-1.552%203.297-1.23%203.297-1.23.653%201.653.242%202.874.118%203.176.77.84%201.235%201.911%201.235%203.221%200%204.609-2.807%205.624-5.479%205.921.43.372.823%201.102.823%202.222v3.293c0%20.319.192.694.801.576%204.765-1.589%208.199-6.086%208.199-11.386%200-6.627-5.373-12-12-12z%22%2F%3E%3C%2Fsvg%3E");
}

.navbar {
	background-color: #fafaf9 !important;
	box-shadow: 0px 1px #e7e5e4 !important;
}

.navbar__brand::after {
	content: "v7";
	margin-left: 0.5rem;
	font-weight: 500;
	position: relative;
	top: -0.4rem;
	font-size: 90%;
}

div[role="banner"] > button > svg {
	color: #ffffff;
}

:root {
	--ifm-font-family-base: "Inter";
	--ifm-heading-font-family: "Inter";
	--ifm-color-primary: #da6f0c;
	--ifm-color-primary-dark: #c4640b;
	--ifm-color-primary-darker: #b95e0a;
	--ifm-color-primary-darkest: #994e08;
	--ifm-color-primary-light: #f07a0d;
	--ifm-color-primary-lighter: #f28016;
	--ifm-color-primary-lightest: #f49237;
	--ifm-color-primary-lightest: #eea35d;
	--ifm-code-font-size: 95%;
	--docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.1);
	--ifm-background-color: #fafaf9 !important;
	--ifm-color-emphasis-200: #e7e5e4 !important;
}

/* For readability concerns, you should choose a lighter palette in dark mode. */
[data-theme="dark"] {
	--ifm-color-primary: #f79f2d;
	--ifm-color-primary-dark: #f69211;
	--ifm-color-primary-darker: #ef8b09;
	--ifm-color-primary-darkest: #c57208;
	--ifm-color-primary-light: #f8ac49;
	--ifm-color-primary-lighter: #f9b257;
	--ifm-color-primary-lightest: #fac681;
	--docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.3);
	--ifm-background-color: #18181b !important;
	--ifm-color-emphasis-200: #2b2e33 !important;

	--docusaurus-highlighted-code-line-bg: #363b44;

	.header-github-link::before {
		filter: invert(1);
	}

	.navbar {
		background-color: #191a1d !important;
		box-shadow: 0px 1px #2b2e33 !important;
	}
}

video {
	max-width: 900px;
	width: 100%;
	height: auto;
}


================================================
File: /website/static/google0917abe14cfb4fd2.html
================================================
google-site-verification: google0917abe14cfb4fd2.html

================================================
File: /packages/next-safe-action/.eslintrc.js
================================================
// @ts-check
const { defineConfig } = require("eslint-define-config");

module.exports = defineConfig({
	root: true,
	extends: ["eslint:recommended", "plugin:@typescript-eslint/recommended-type-checked", "prettier"],
	plugins: ["@typescript-eslint", "react-hooks"],
	parser: "@typescript-eslint/parser",
	parserOptions: {
		project: "./tsconfig.json",
		tsconfigRootDir: __dirname,
	},
	ignorePatterns: ["**/*.js", "**/*.mjs", "**/*.cjs", "dist/**"],
	rules: {
		"@typescript-eslint/consistent-type-imports": "error",
		"@typescript-eslint/consistent-type-exports": "error",
		"@typescript-eslint/unbound-method": "off",
		"@typescript-eslint/ban-ts-comment": "off",
		"@typescript-eslint/no-redundant-type-constituents": "off",
		"@typescript-eslint/no-explicit-any": "off",
		"@typescript-eslint/no-unsafe-function-type": "off",
		"@typescript-eslint/no-empty-object-type": "off",
		"@typescript-eslint/prefer-promise-reject-errors": "off",
		"@typescript-eslint/only-throw-error": "off",
		"@typescript-eslint/ban-types": "off",
		"react-hooks/exhaustive-deps": "warn",
		"@typescript-eslint/require-await": "off",
	},
});


================================================
File: /packages/next-safe-action/tsup.config.ts
================================================
import { defineConfig } from "tsup";

export default defineConfig({
	entry: ["src/index.ts", "src/hooks.ts", "src/stateful-hooks.ts", "src/adapters/*.ts"],
	bundle: true,
	format: ["esm"],
	clean: true,
	splitting: false,
	sourcemap: true,
	dts: true,
});


================================================
File: /packages/next-safe-action/package.json
================================================
{
	"name": "next-safe-action",
	"version": "0.0.0-development",
	"private": false,
	"description": "Type safe and validated Server Actions in your Next.js project.",
	"main": "./dist/index.mjs",
	"module": "./dist/index.mjs",
	"types": "./dist/index.d.mts",
	"files": [
		"dist"
	],
	"exports": {
		".": "./dist/index.mjs",
		"./hooks": "./dist/hooks.mjs",
		"./stateful-hooks": "./dist/stateful-hooks.mjs",
		"./adapters/*": "./dist/adapters/*.mjs"
	},
	"typesVersions": {
		"*": {
			".": [
				"./dist/index.d.mts"
			],
			"hooks": [
				"./dist/hooks.d.mts"
			],
			"stateful-hooks": [
				"./dist/stateful-hooks.d.mts"
			],
			"adapters/*": [
				"./dist/adapters/*.d.mts"
			]
		}
	},
	"funding": [
		{
			"type": "github",
			"url": "https://github.com/sponsors/TheEdoRan"
		},
		{
			"type": "paypal",
			"url": "https://www.paypal.com/donate/?hosted_button_id=ES9JRPSC66XKW"
		}
	],
	"scripts": {
		"lint": "tsc && prettier --write . && eslint .",
		"test": "node --import tsx --test ./src/__tests__/*.test.ts",
		"build": "tsup",
		"deploy": "semantic-release"
	},
	"keywords": [
		"next",
		"nextjs",
		"react",
		"rsc",
		"react server components",
		"mutation",
		"action",
		"actions",
		"react actions",
		"next actions",
		"server actions"
	],
	"author": "Edoardo Ranghieri",
	"license": "MIT",
	"engines": {
		"node": ">=18.17"
	},
	"devDependencies": {
		"@eslint/js": "^9.15.0",
		"@sinclair/typebox": "^0.34.4",
		"@types/node": "^22",
		"@types/react": "^19",
		"@types/react-dom": "^19",
		"deepmerge-ts": "^7.1.3",
		"eslint": "^8.57.0",
		"eslint-config-prettier": "^9.1.0",
		"eslint-define-config": "^2.1.0",
		"eslint-plugin-react-hooks": "^5.0.0",
		"next": "15.1.0",
		"prettier": "^3.3.3",
		"react": "^19",
		"react-dom": "^19",
		"semantic-release": "^23",
		"tsup": "^8.3.5",
		"tsx": "^4.19.2",
		"typescript": "^5.6.3",
		"typescript-eslint": "^8.15.0",
		"valibot": "^0.42.1",
		"yup": "^1.4.0",
		"zod": "^3.23.8"
	},
	"peerDependencies": {
		"@sinclair/typebox": ">= 0.33.3",
		"next": ">= 14.0.0",
		"react": ">= 18.2.0",
		"react-dom": ">= 18.2.0",
		"valibot": ">= 0.36.0",
		"yup": ">= 1.0.0",
		"zod": ">= 3.0.0"
	},
	"peerDependenciesMeta": {
		"zod": {
			"optional": true
		},
		"valibot": {
			"optional": true
		},
		"yup": {
			"optional": true
		},
		"@sinclair/typebox": {
			"optional": true
		}
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/TheEdoRan/next-safe-action.git"
	}
}


================================================
File: /packages/next-safe-action/.prettierrc.json
================================================
{
	"trailingComma": "es5",
	"printWidth": 120,
	"useTabs": true,
	"arrowParens": "always",
	"tabWidth": 2,
	"semi": true,
	"singleQuote": false,
	"quoteProps": "consistent"
}


================================================
File: /packages/next-safe-action/release.config.cjs
================================================
/**
 * @type {import('semantic-release').GlobalConfig}
 */
module.exports = {
	branches: [
		{
			name: "main",
		},
		{
			name: "next",
			channel: "next",
			prerelease: true,
		},
		{
			name: "experimental",
			channel: "experimental",
			prerelease: true,
		},
		{
			name: "beta",
			channel: "beta",
			prerelease: true,
		},
		{
			name: "4.x",
			range: "4.x",
			channel: "4.x",
		},
	],
	plugins: [
		[
			"@semantic-release/commit-analyzer",
			{
				preset: "conventionalcommits",
				releaseRules: [
					{
						breaking: true,
						release: "major",
					},
					{
						revert: true,
						release: "patch",
					},
					{
						type: "feat",
						release: "minor",
					},
					{
						type: "fix",
						release: "patch",
					},
					{
						type: "perf",
						release: "patch",
					},
					{
						type: "refactor",
						release: "patch",
					},
					{
						type: "build",
						release: "patch",
					},
					{
						type: "docs",
						release: "patch",
					},
					{
						type: "chore",
						release: false,
					},
					{
						type: "test",
						release: false,
					},
					{
						type: "ci",
						release: false,
					},
					{
						type: "style",
						release: false,
					},
				],
				parserOpts: {
					noteKeywords: ["BREAKING CHANGE", "BREAKING CHANGES"],
				},
			},
		],
		[
			"@semantic-release/release-notes-generator",
			{
				preset: "conventionalcommits",
				presetConfig: {
					types: [
						{
							type: "revert",
							section: "Reverts",
							hidden: false,
						},
						{
							type: "feat",
							section: "Features",
							hidden: false,
						},
						{
							type: "fix",
							section: "Bug Fixes",
							hidden: false,
						},
						{
							type: "perf",
							section: "Performance improvements",
							hidden: false,
						},
						{
							type: "refactor",
							section: "Refactors",
							hidden: false,
						},
						{
							type: "build",
							section: "Build System",
							hidden: false,
						},
						{
							type: "docs",
							section: "Documentation",
							hidden: false,
						},
						{
							type: "chore",
							hidden: true,
						},
						{
							type: "test",
							hidden: true,
						},
						{
							type: "ci",
							hidden: true,
						},
						{
							type: "style",
							hidden: true,
						},
					],
				},
				parserOpts: {
					noteKeywords: ["BREAKING CHANGE", "BREAKING CHANGES"],
				},
			},
		],
		"@semantic-release/npm",
		"@semantic-release/github",
	],
};


================================================
File: /packages/next-safe-action/LICENSE
================================================
MIT License

Copyright (c) 2023 Edoardo Ranghieri

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================================================
File: /packages/next-safe-action/tsconfig.json
================================================
{
	"compilerOptions": {
		"target": "ESNext",
		"module": "CommonJS",
		"lib": ["ES2022"],
		"skipLibCheck": true,
		"sourceMap": true,
		"outDir": "./dist",
		"moduleResolution": "node",
		"removeComments": false,
		"strict": true,
		"strictPropertyInitialization": false,
		"useUnknownInCatchVariables": false,
		"forceConsistentCasingInFileNames": true,
		"noImplicitAny": true,
		"noImplicitThis": true,
		"noImplicitReturns": true,
		"noEmitOnError": true,
		"noUncheckedIndexedAccess": true,
		"noFallthroughCasesInSwitch": true,
		"allowSyntheticDefaultImports": true,
		"esModuleInterop": true,
		"resolveJsonModule": true,
		"incremental": false,
		"noEmit": true
	},
	"exclude": ["node_modules"],
	"include": ["tsup.config.ts", "./src/**/*.ts"]
}


================================================
File: /packages/next-safe-action/README.md
================================================
<div align="center">
  <img src="https://raw.githubusercontent.com/TheEdoRan/next-safe-action/main/assets/logo.png" alt="next-safe-action logo" width="36" height="36">
  <a href="https://github.com/TheEdoRan/next-safe-action"><h1>next-safe-action</h1></a>
</div>

**next-safe-action** is a library that takes full advantage of the latest and greatest Next.js, React and TypeScript features to let you define **type safe** Server Actions and execute them inside React Components.

## How does it work?

Like magic. 🪄

https://github.com/TheEdoRan/next-safe-action/assets/1337629/664eb3ee-92f3-4d4a-ba1b-a3b1c13fff04

## Features

- ✅ Pretty simple
- ✅ End-to-end type safety
- ✅ Form Actions support
- ✅ Powerful middleware system
- ✅ Input/output validation using multiple validation libraries
- ✅ Advanced server error handling
- ✅ Optimistic updates

## Documentation

**Explore the documentation for the current stable version of the library on the [next-safe-action v7 website](https://next-safe-action.dev).** ✨

### Looking for v6 docs?

You can keep using version 6 and eventually upgrade to version 7. Check out the v6 documentation [here](https://v6.next-safe-action.dev).

## Migrate from v6 to v7

Check out the [v6 to v7 migration guide](https://next-safe-action.dev/docs/migrations/v6-to-v7) to learn how to update your code for v7.

## Installation

```bash
npm i next-safe-action
```

## Playground

You can find a basic working implementation of the library [here](https://github.com/TheEdoRan/next-safe-action/tree/main/apps/playground).

## Sponsors

A big shout-out to all our [sponsors](https://github.com/sponsors/TheEdoRan)! You’re the driving force behind this library's growth, and we're truly grateful for your support. ❤️

<table>
  <tr>
   <td align="center"><a href="https://arcjet.com/?ref=next-safe-action">  <picture>
    <source media="(prefers-color-scheme: dark)" srcset="https://arcjet.com/logo/arcjet-dark-lockup-voyage-horizontal.svg">
    <img src="https://arcjet.com/logo/arcjet-light-lockup-voyage-horizontal.svg" alt="Arcjet Logo" height="128" width="auto">
  </picture><br />Arcjet</a></td>
  </tr>
</table>

## Contributing

If you want to contribute to next-safe-action, please check out the [contributing guide](https://github.com/TheEdoRan/next-safe-action/blob/main/CONTRIBUTING.md).

If you found bugs or just want to ask a question, feel free to open an issue or a discussion by following the [issue templates](https://github.com/TheEdoRan/next-safe-action/issues/new/choose).

## Contributors

<a href="https://github.com/TheEdoRan/next-safe-action/graphs/contributors">
  <img src="https://contrib.rocks/image?repo=TheEdoRan/next-safe-action" />
</a>

Made with [contrib.rocks](https://contrib.rocks).

## License

next-safe-action is released under the [MIT License](https://github.com/TheEdoRan/next-safe-action/blob/main/LICENSE).


================================================
File: /packages/next-safe-action/src/action-builder.ts
================================================
import { deepmerge } from "deepmerge-ts";
import type {} from "zod";
import type { Infer, InferArray, InferIn, InferInArray, Schema, ValidationAdapter } from "./adapters/types";
import type {
	MiddlewareFn,
	MiddlewareResult,
	SafeActionClientOpts,
	SafeActionFn,
	SafeActionResult,
	SafeActionUtils,
	SafeStateActionFn,
	ServerCodeFn,
	StateServerCodeFn,
} from "./index.types";
import {
	isForbiddenError,
	isFrameworkError,
	isNotFoundError,
	isRedirectError,
	isUnauthorizedError,
} from "./next/errors";
import { DEFAULT_SERVER_ERROR_MESSAGE, isError, winningBoolean } from "./utils";
import {
	ActionMetadataValidationError,
	ActionOutputDataValidationError,
	ActionServerValidationError,
	ActionValidationError,
	buildValidationErrors,
} from "./validation-errors";
import type {
	BindArgsValidationErrors,
	HandleBindArgsValidationErrorsShapeFn,
	HandleValidationErrorsShapeFn,
	ValidationErrors,
} from "./validation-errors.types";

export function actionBuilder<
	ServerError,
	MetadataSchema extends Schema | undefined = undefined,
	MD = MetadataSchema extends Schema ? Infer<Schema> : undefined, // metadata type (inferred from metadata schema)
	Ctx extends object = {},
	ISF extends (() => Promise<Schema>) | undefined = undefined, // input schema function
	IS extends Schema | undefined = ISF extends Function ? Awaited<ReturnType<ISF>> : undefined, // input schema
	OS extends Schema | undefined = undefined, // output schema
	const BAS extends readonly Schema[] = [],
	CVE = undefined,
	CBAVE = undefined,
>(args: {
	inputSchemaFn?: ISF;
	bindArgsSchemas?: BAS;
	outputSchema?: OS;
	validationAdapter: ValidationAdapter;
	handleValidationErrorsShape: HandleValidationErrorsShapeFn<IS, BAS, MD, Ctx, CVE>;
	handleBindArgsValidationErrorsShape: HandleBindArgsValidationErrorsShapeFn<IS, BAS, MD, Ctx, CBAVE>;
	metadataSchema: MetadataSchema;
	metadata: MD;
	handleServerError: NonNullable<SafeActionClientOpts<ServerError, MetadataSchema, any>["handleServerError"]>;
	middlewareFns: MiddlewareFn<ServerError, any, any, any>[];
	ctxType: Ctx;
	throwValidationErrors: boolean;
}) {
	const bindArgsSchemas = (args.bindArgsSchemas ?? []) as BAS;

	function buildAction({ withState }: { withState: false }): {
		action: <Data extends OS extends Schema ? Infer<OS> : any>(
			serverCodeFn: ServerCodeFn<MD, Ctx, IS, BAS, Data>,
			utils?: SafeActionUtils<ServerError, MD, Ctx, IS, BAS, CVE, CBAVE, Data>
		) => SafeActionFn<ServerError, IS, BAS, CVE, CBAVE, Data>;
	};
	function buildAction({ withState }: { withState: true }): {
		action: <Data extends OS extends Schema ? Infer<OS> : any>(
			serverCodeFn: StateServerCodeFn<ServerError, MD, Ctx, IS, BAS, CVE, CBAVE, Data>,
			utils?: SafeActionUtils<ServerError, MD, Ctx, IS, BAS, CVE, CBAVE, Data>
		) => SafeStateActionFn<ServerError, IS, BAS, CVE, CBAVE, Data>;
	};
	function buildAction({ withState }: { withState: boolean }) {
		return {
			action: <Data extends OS extends Schema ? Infer<OS> : any>(
				serverCodeFn:
					| ServerCodeFn<MD, Ctx, IS, BAS, Data>
					| StateServerCodeFn<ServerError, MD, Ctx, IS, BAS, CVE, CBAVE, Data>,
				utils?: SafeActionUtils<ServerError, MD, Ctx, IS, BAS, CVE, CBAVE, Data>
			) => {
				return async (...clientInputs: unknown[]) => {
					let currentCtx: object = {};
					const middlewareResult: MiddlewareResult<ServerError, object> = { success: false };
					type PrevResult = SafeActionResult<ServerError, IS, BAS, CVE, CBAVE, Data> | undefined;
					let prevResult: PrevResult | undefined = undefined;
					const parsedInputDatas: any[] = [];
					let frameworkError: Error | null = null;

					if (withState) {
						// Previous state is placed between bind args and main arg inputs, so it's always at the index of
						// the bind args schemas + 1. Get it and remove it from the client inputs array.
						prevResult = clientInputs.splice(bindArgsSchemas.length, 1)[0] as PrevResult;
					}

					// If the number of bind args schemas + 1 (which is the optional main arg schema) is greater
					// than the number of provided client inputs, it means that the main argument is missing.
					// This happens when the main schema is missing (since it's optional), or if a void main schema
					// is provided along with bind args schemas.
					if (bindArgsSchemas.length + 1 > clientInputs.length) {
						clientInputs.push(undefined);
					}

					// Execute the middleware stack.
					const executeMiddlewareStack = async (idx = 0) => {
						if (frameworkError) {
							return;
						}

						const middlewareFn = args.middlewareFns[idx];
						middlewareResult.ctx = currentCtx;

						try {
							if (idx === 0) {
								if (args.metadataSchema) {
									// Validate metadata input.
									const parsedMd = await args.validationAdapter.validate(args.metadataSchema, args.metadata);

									if (!parsedMd.success) {
										throw new ActionMetadataValidationError<MetadataSchema>(buildValidationErrors(parsedMd.issues));
									}
								}
							}

							// Middleware function.
							if (middlewareFn) {
								await middlewareFn({
									clientInput: clientInputs.at(-1), // pass raw client input
									bindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],
									ctx: currentCtx,
									metadata: args.metadata,
									next: async (nextOpts) => {
										currentCtx = deepmerge(currentCtx, nextOpts?.ctx ?? {});
										await executeMiddlewareStack(idx + 1);
										return middlewareResult;
									},
								});
								// Action function.
							} else {
								// Validate the client inputs in parallel.
								const parsedInputs = await Promise.all(
									clientInputs.map(async (input, i) => {
										// Last client input in the array, main argument (no bind arg).
										if (i === clientInputs.length - 1) {
											// If schema is undefined, set parsed data to undefined.
											if (typeof args.inputSchemaFn === "undefined") {
												return {
													success: true,
													data: undefined,
												} as const;
											}

											// Otherwise, parse input with the schema.
											return args.validationAdapter.validate(await args.inputSchemaFn(), input);
										}

										// Otherwise, we're processing bind args client inputs.
										return args.validationAdapter.validate(bindArgsSchemas[i]!, input);
									})
								);

								let hasBindValidationErrors = false;

								// Initialize the bind args validation errors array with null values.
								// It has the same length as the number of bind arguments (parsedInputs - 1).
								const bindArgsValidationErrors = Array(parsedInputs.length - 1).fill({});

								for (let i = 0; i < parsedInputs.length; i++) {
									const parsedInput = parsedInputs[i]!;

									if (parsedInput.success) {
										parsedInputDatas.push(parsedInput.data);
									} else {
										// If we're processing a bind argument and there are validation errors for this one,
										// we need to store them in the bind args validation errors array at this index.
										if (i < parsedInputs.length - 1) {
											bindArgsValidationErrors[i] = buildValidationErrors<BAS[number]>(parsedInput.issues);
											hasBindValidationErrors = true;
										} else {
											// Otherwise, we're processing the non-bind argument (the last one) in the array.
											const validationErrors = buildValidationErrors<IS>(parsedInput.issues);

											middlewareResult.validationErrors = await Promise.resolve(
												args.handleValidationErrorsShape(validationErrors, {
													clientInput: clientInputs.at(-1) as IS extends Schema ? InferIn<IS> : undefined,
													bindArgsClientInputs: (bindArgsSchemas.length
														? clientInputs.slice(0, -1)
														: []) as InferInArray<BAS>,
													ctx: currentCtx as Ctx,
													metadata: args.metadata as MetadataSchema extends Schema ? Infer<MetadataSchema> : undefined,
												})
											);
										}
									}
								}

								// If there are bind args validation errors, format them and store them in the middleware result.
								if (hasBindValidationErrors) {
									middlewareResult.bindArgsValidationErrors = await Promise.resolve(
										args.handleBindArgsValidationErrorsShape(
											bindArgsValidationErrors as BindArgsValidationErrors<BAS>,
											{
												clientInput: clientInputs.at(-1) as IS extends Schema ? InferIn<IS> : undefined,
												bindArgsClientInputs: (bindArgsSchemas.length
													? clientInputs.slice(0, -1)
													: []) as InferInArray<BAS>,
												ctx: currentCtx as Ctx,
												metadata: args.metadata as MetadataSchema extends Schema ? Infer<MetadataSchema> : undefined,
											}
										)
									);
								}

								if (middlewareResult.validationErrors || middlewareResult.bindArgsValidationErrors) {
									return;
								}

								// @ts-expect-error
								const scfArgs: Parameters<StateServerCodeFn<ServerError, MD, Ctx, IS, BAS, CVE, CBAVE, Data>> = [];

								// Server code function always has this object as the first argument.
								scfArgs[0] = {
									parsedInput: parsedInputDatas.at(-1) as IS extends Schema ? Infer<IS> : undefined,
									bindArgsParsedInputs: parsedInputDatas.slice(0, -1) as InferArray<BAS>,
									clientInput: clientInputs.at(-1) as IS extends Schema ? InferIn<IS> : undefined,
									bindArgsClientInputs: (bindArgsSchemas.length ? clientInputs.slice(0, -1) : []) as InferInArray<BAS>,
									ctx: currentCtx as Ctx,
									metadata: args.metadata,
								};

								// If this action is stateful, server code function also has a `prevResult` property inside the second
								// argument object.
								if (withState) {
									scfArgs[1] = { prevResult: structuredClone(prevResult!) };
								}

								const data = await serverCodeFn(...scfArgs);

								// If a `outputSchema` is passed, validate the action return value.
								if (typeof args.outputSchema !== "undefined") {
									const parsedData = await args.validationAdapter.validate(args.outputSchema, data);

									if (!parsedData.success) {
										throw new ActionOutputDataValidationError<OS>(buildValidationErrors(parsedData.issues));
									}
								}

								middlewareResult.success = true;
								middlewareResult.data = data;
								middlewareResult.parsedInput = parsedInputDatas.at(-1);
								middlewareResult.bindArgsParsedInputs = parsedInputDatas.slice(0, -1);
							}
						} catch (e: unknown) {
							// next/navigation functions work by throwing an error that will be
							// processed internally by Next.js.
							if (isFrameworkError(e)) {
								middlewareResult.success = true;
								frameworkError = e;
								return;
							}

							// If error is `ActionServerValidationError`, return `validationErrors` as if schema validation would fail.
							if (e instanceof ActionServerValidationError) {
								const ve = e.validationErrors as ValidationErrors<IS>;
								middlewareResult.validationErrors = await Promise.resolve(
									args.handleValidationErrorsShape(ve, {
										clientInput: clientInputs.at(-1) as IS extends Schema ? InferIn<IS> : undefined,
										bindArgsClientInputs: (bindArgsSchemas.length
											? clientInputs.slice(0, -1)
											: []) as InferInArray<BAS>,
										ctx: currentCtx as Ctx,
										metadata: args.metadata as MetadataSchema extends Schema ? Infer<MetadataSchema> : undefined,
									})
								);
							} else {
								// If error is not an instance of Error, wrap it in an Error object with
								// the default message.
								const error = isError(e) ? e : new Error(DEFAULT_SERVER_ERROR_MESSAGE);
								const returnedError = await Promise.resolve(
									args.handleServerError(error, {
										clientInput: clientInputs.at(-1), // pass raw client input
										bindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],
										ctx: currentCtx,
										metadata: args.metadata as MetadataSchema extends Schema ? Infer<MetadataSchema> : undefined,
									})
								);

								middlewareResult.serverError = returnedError;
							}
						}
					};

					// Execute middleware chain + action function.
					await executeMiddlewareStack();

					const callbackPromises: (Promise<unknown> | undefined)[] = [];

					// If an internal framework error occurred, throw it, so it will be processed by Next.js.
					if (frameworkError) {
						callbackPromises.push(
							utils?.onSuccess?.({
								data: undefined,
								metadata: args.metadata,
								ctx: currentCtx as Ctx,
								clientInput: clientInputs.at(-1) as IS extends Schema ? InferIn<IS> : undefined,
								bindArgsClientInputs: (bindArgsSchemas.length ? clientInputs.slice(0, -1) : []) as InferInArray<BAS>,
								parsedInput: parsedInputDatas.at(-1) as IS extends Schema ? Infer<IS> : undefined,
								bindArgsParsedInputs: parsedInputDatas.slice(0, -1) as InferArray<BAS>,
								hasRedirected: isRedirectError(frameworkError),
								hasNotFound: isNotFoundError(frameworkError),
								hasForbidden: isForbiddenError(frameworkError),
								hasUnauthorized: isUnauthorizedError(frameworkError),
							})
						);

						callbackPromises.push(
							utils?.onSettled?.({
								metadata: args.metadata,
								ctx: currentCtx as Ctx,
								clientInput: clientInputs.at(-1) as IS extends Schema ? InferIn<IS> : undefined,
								bindArgsClientInputs: (bindArgsSchemas.length ? clientInputs.slice(0, -1) : []) as InferInArray<BAS>,
								result: {},
								hasRedirected: isRedirectError(frameworkError),
								hasNotFound: isNotFoundError(frameworkError),
								hasForbidden: isForbiddenError(frameworkError),
								hasUnauthorized: isUnauthorizedError(frameworkError),
							})
						);

						await Promise.all(callbackPromises);

						throw frameworkError;
					}

					const actionResult: SafeActionResult<ServerError, IS, BAS, CVE, CBAVE, Data> = {};

					if (typeof middlewareResult.validationErrors !== "undefined") {
						// `utils.throwValidationErrors` has higher priority since it's set at the action level.
						// It overrides the client setting, if set.
						if (winningBoolean(args.throwValidationErrors, utils?.throwValidationErrors)) {
							throw new ActionValidationError(middlewareResult.validationErrors as CVE);
						} else {
							actionResult.validationErrors = middlewareResult.validationErrors as CVE;
						}
					}

					if (typeof middlewareResult.bindArgsValidationErrors !== "undefined") {
						actionResult.bindArgsValidationErrors = middlewareResult.bindArgsValidationErrors as CBAVE;
					}

					if (typeof middlewareResult.serverError !== "undefined") {
						if (utils?.throwServerError) {
							throw middlewareResult.serverError;
						} else {
							actionResult.serverError = middlewareResult.serverError;
						}
					}

					if (middlewareResult.success) {
						if (typeof middlewareResult.data !== "undefined") {
							actionResult.data = middlewareResult.data as Data;
						}

						callbackPromises.push(
							utils?.onSuccess?.({
								metadata: args.metadata,
								ctx: currentCtx as Ctx,
								data: actionResult.data as Data,
								clientInput: clientInputs.at(-1) as IS extends Schema ? InferIn<IS> : undefined,
								bindArgsClientInputs: (bindArgsSchemas.length ? clientInputs.slice(0, -1) : []) as InferInArray<BAS>,
								parsedInput: parsedInputDatas.at(-1) as IS extends Schema ? Infer<IS> : undefined,
								bindArgsParsedInputs: parsedInputDatas.slice(0, -1) as InferArray<BAS>,
								hasRedirected: false,
								hasNotFound: false,
								hasForbidden: false,
								hasUnauthorized: false,
							})
						);
					} else {
						callbackPromises.push(
							utils?.onError?.({
								metadata: args.metadata,
								ctx: currentCtx as Ctx,
								clientInput: clientInputs.at(-1) as IS extends Schema ? InferIn<IS> : undefined,
								bindArgsClientInputs: (bindArgsSchemas.length ? clientInputs.slice(0, -1) : []) as InferInArray<BAS>,
								error: actionResult,
							})
						);
					}

					// onSettled, if provided, is always executed.
					callbackPromises.push(
						utils?.onSettled?.({
							metadata: args.metadata,
							ctx: currentCtx as Ctx,
							clientInput: clientInputs.at(-1) as IS extends Schema ? InferIn<IS> : undefined,
							bindArgsClientInputs: (bindArgsSchemas.length ? clientInputs.slice(0, -1) : []) as InferInArray<BAS>,
							result: actionResult,
							hasRedirected: false,
							hasNotFound: false,
							hasForbidden: false,
							hasUnauthorized: false,
						})
					);

					await Promise.all(callbackPromises);

					return actionResult;
				};
			},
		};
	}

	return {
		/**
		 * Define the action.
		 * @param serverCodeFn Code that will be executed on the **server side**
		 *
		 * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}
		 */
		action: buildAction({ withState: false }).action,

		/**
		 * Define the stateful action. To be used with the [`useStateAction`](https://next-safe-action.dev/docs/execute-actions/hooks/usestateaction) hook.
		 * @param serverCodeFn Code that will be executed on the **server side**
		 *
		 * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}
		 */
		stateAction: buildAction({ withState: true }).action,
	};
}


================================================
File: /packages/next-safe-action/src/hooks-utils.ts
================================================
import * as React from "react";
import {} from "react/experimental";
import type {} from "zod";
import type { InferIn, Schema } from "./adapters/types";
import type { HookActionStatus, HookBaseUtils, HookCallbacks, HookShorthandStatus } from "./hooks.types";
import type { SafeActionResult } from "./index.types";

export const getActionStatus = <
	ServerError,
	S extends Schema | undefined,
	const BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
>({
	isIdle,
	isExecuting,
	result,
}: {
	isIdle: boolean;
	isExecuting: boolean;
	result: SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>;
}): HookActionStatus => {
	if (isIdle) {
		return "idle";
	} else if (isExecuting) {
		return "executing";
	} else if (
		typeof result.validationErrors !== "undefined" ||
		typeof result.bindArgsValidationErrors !== "undefined" ||
		typeof result.serverError !== "undefined"
	) {
		return "hasErrored";
	} else {
		return "hasSucceeded";
	}
};

export const getActionShorthandStatusObject = ({
	status,
	isTransitioning,
}: {
	status: HookActionStatus;
	isTransitioning: boolean;
}): HookShorthandStatus => {
	return {
		isIdle: status === "idle",
		isExecuting: status === "executing",
		isTransitioning,
		isPending: status === "executing" || isTransitioning,
		hasSucceeded: status === "hasSucceeded",
		hasErrored: status === "hasErrored",
	};
};

export const useExecuteOnMount = <S extends Schema | undefined>(
	args: HookBaseUtils<S> & {
		executeFn: (input: S extends Schema ? InferIn<S> : void) => void;
	}
) => {
	const mounted = React.useRef(false);

	React.useEffect(() => {
		const t = setTimeout(() => {
			if (args.executeOnMount && !mounted.current) {
				args.executeFn(args.executeOnMount.input as S extends Schema ? InferIn<S> : void);
				mounted.current = true;
			}
		}, args.executeOnMount?.delayMs ?? 0);

		return () => {
			clearTimeout(t);
		};
	}, [args]);
};

export const useActionCallbacks = <
	ServerError,
	S extends Schema | undefined,
	const BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
>({
	result,
	input,
	status,
	cb,
}: {
	result: SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>;
	input: S extends Schema ? InferIn<S> : undefined;
	status: HookActionStatus;
	cb?: HookCallbacks<ServerError, S, BAS, CVE, CBAVE, Data>;
}) => {
	const onExecuteRef = React.useRef(cb?.onExecute);
	const onSuccessRef = React.useRef(cb?.onSuccess);
	const onErrorRef = React.useRef(cb?.onError);
	const onSettledRef = React.useRef(cb?.onSettled);

	// Execute the callback when the action status changes.
	React.useEffect(() => {
		const onExecute = onExecuteRef.current;
		const onSuccess = onSuccessRef.current;
		const onError = onErrorRef.current;
		const onSettled = onSettledRef.current;

		const executeCallbacks = async () => {
			switch (status) {
				case "executing":
					await Promise.resolve(onExecute?.({ input }));
					break;
				case "hasSucceeded":
					await Promise.all([
						Promise.resolve(onSuccess?.({ data: result?.data, input })),
						Promise.resolve(onSettled?.({ result, input })),
					]);
					break;
				case "hasErrored":
					await Promise.all([
						Promise.resolve(onError?.({ error: result, input })),
						Promise.resolve(onSettled?.({ result, input })),
					]);
					break;
			}
		};

		executeCallbacks().catch(console.error);
	}, [status, result, input]);
};


================================================
File: /packages/next-safe-action/src/validation-errors.types.ts
================================================
import type { Infer, InferIn, Schema } from "./adapters/types";
import type { Prettify } from "./utils.types";

// Basic types and arrays.
type NotObject = number | string | boolean | bigint | symbol | null | undefined | any[];

// Object with an optional list of validation errors.
type VEList = Prettify<{ _errors?: string[] }>;

// Creates nested schema validation errors type using recursion.
type SchemaErrors<S> = {
	[K in keyof S]?: S[K] extends NotObject ? VEList : Prettify<VEList & SchemaErrors<S[K]>>;
} & {};

/**
 * Type of the returned object when validation fails.
 */
export type ValidationErrors<S extends Schema | undefined> = S extends Schema
	? Infer<S> extends NotObject
		? VEList
		: Prettify<VEList & SchemaErrors<Infer<S>>>
	: undefined;

/**
 * Type of the array of bind arguments validation errors.
 */
export type BindArgsValidationErrors<BAS extends readonly Schema[]> = {
	[K in keyof BAS]: ValidationErrors<BAS[K]>;
};

/**
 * Type of flattened validation errors. `formErrors` contains global errors, and `fieldErrors`
 * contains errors for each field, one level deep.
 */
export type FlattenedValidationErrors<VE extends ValidationErrors<any>> = Prettify<{
	formErrors: string[];
	fieldErrors: {
		[K in keyof Omit<VE, "_errors">]?: string[];
	};
}>;

/**
 * Type of flattened bind arguments validation errors.
 */
export type FlattenedBindArgsValidationErrors<BAVE extends readonly ValidationErrors<any>[]> = {
	[K in keyof BAVE]: FlattenedValidationErrors<BAVE[K]>;
};

/**
 * Type of the function used to format validation errors.
 */
export type HandleValidationErrorsShapeFn<
	S extends Schema | undefined,
	BAS extends readonly Schema[],
	MD,
	Ctx extends object,
	CVE,
> = (
	validationErrors: ValidationErrors<S>,
	utils: {
		clientInput: S extends Schema ? InferIn<S> : undefined;
		bindArgsClientInputs: BAS;
		metadata: MD;
		ctx: Prettify<Ctx>;
	}
) => Promise<CVE>;

/**
 * Type of the function used to format bind arguments validation errors.
 */
export type HandleBindArgsValidationErrorsShapeFn<
	S extends Schema | undefined,
	BAS extends readonly Schema[],
	MD,
	Ctx extends object,
	CBAVE,
> = (
	bindArgsValidationErrors: BindArgsValidationErrors<BAS>,
	utils: {
		clientInput: S extends Schema ? InferIn<S> : undefined;
		bindArgsClientInputs: BAS;
		metadata: MD;
		ctx: Prettify<Ctx>;
	}
) => Promise<CBAVE>;


================================================
File: /packages/next-safe-action/src/middleware.ts
================================================
import type { MiddlewareFn } from "./index.types";

/**
 * Creates a standalone middleware function. It accepts a generic object with optional `serverError`, `ctx` and `metadata`
 * properties, if you need one or all of them to be typed. The type for each property that is passed as generic is the
 * **minimum** shape required to define the middleware function, but it can also be larger than that.
 *
 * {@link https://next-safe-action.dev/docs/define-actions/middleware#create-standalone-middleware-with-createmiddleware See docs for more information}
 */
export const createMiddleware = <BaseData extends { serverError?: any; ctx?: object; metadata?: any }>() => {
	return {
		define: <NextCtx extends object>(
			middlewareFn: MiddlewareFn<
				BaseData extends { serverError: infer SE } ? SE : any,
				BaseData extends { metadata: infer MD } ? MD : any,
				BaseData extends { ctx: infer Ctx extends object } ? Ctx : object,
				NextCtx
			>
		) => middlewareFn,
	};
};


================================================
File: /packages/next-safe-action/src/validation-errors.ts
================================================
/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment */

import type { Schema, ValidationIssue } from "./adapters/types";
import type {
	FlattenedBindArgsValidationErrors,
	FlattenedValidationErrors,
	ValidationErrors,
} from "./validation-errors.types";

// This function is used internally to build the validation errors object from a list of validation issues.
export const buildValidationErrors = <S extends Schema | undefined>(issues: ValidationIssue[]) => {
	const ve: any = {};

	for (const issue of issues) {
		const { path, message } = issue;

		// When path is undefined or empty, set root errors.
		if (!path || path.length === 0) {
			ve._errors = ve._errors ? [...ve._errors, message] : [message];
			continue;
		}

		// Reference to errors object.
		let ref = ve;

		// Set object for the path, if it doesn't exist.
		for (let i = 0; i < path.length - 1; i++) {
			const k = path[i]!;

			if (!ref[k]) {
				ref[k] = {};
			}

			ref = ref[k];
		}

		// Key is always the last element of the path.
		const key = path[path.length - 1]!;

		// Set error for the current path. If `_errors` array exists, add the message to it.
		ref[key] = ref[key]?._errors
			? {
					...structuredClone(ref[key]),
					_errors: [...ref[key]._errors, message],
				}
			: { ...structuredClone(ref[key]), _errors: [message] };
	}

	return ve as ValidationErrors<S>;
};

// This class is internally used to throw validation errors in action's server code function, using
// `returnValidationErrors`.
export class ActionServerValidationError<S extends Schema> extends Error {
	public validationErrors: ValidationErrors<S>;
	constructor(validationErrors: ValidationErrors<S>) {
		super("Server Action server validation error(s) occurred");
		this.validationErrors = validationErrors;
	}
}

// This class is internally used to throw validation errors in action's server code function, using
// `returnValidationErrors`.
export class ActionValidationError<CVE> extends Error {
	public validationErrors: CVE;
	constructor(validationErrors: CVE) {
		super("Server Action validation error(s) occurred");
		this.validationErrors = validationErrors;
	}
}

/**
 * Return custom validation errors to the client from the action's server code function.
 * Code declared after this function invocation will not be executed.
 * @param schema Input schema
 * @param validationErrors Validation errors object
 *
 * {@link https://next-safe-action.dev/docs/define-actions/validation-errors#returnvalidationerrors See docs for more information}
 */
export function returnValidationErrors<
	S extends Schema | (() => Promise<Schema>),
	AS extends Schema = S extends () => Promise<Schema> ? Awaited<ReturnType<S>> : S, // actual schema
>(schema: S, validationErrors: ValidationErrors<AS>): never {
	throw new ActionServerValidationError<AS>(validationErrors);
}

/**
 * Default validation errors format.
 * Emulation of `zod`'s [`format`](https://zod.dev/ERROR_HANDLING?id=formatting-errors) function.
 */
export function formatValidationErrors<VE extends ValidationErrors<any>>(validationErrors: VE) {
	return validationErrors;
}

/**
 * Default bind args validation errors format.
 * Emulation of `zod`'s [`format`](https://zod.dev/ERROR_HANDLING?id=formatting-errors) function.
 */
export function formatBindArgsValidationErrors<BAVE extends readonly ValidationErrors<any>[]>(
	bindArgsValidationErrors: BAVE
) {
	return bindArgsValidationErrors;
}

/**
 * Transform default formatted validation errors into flattened structure.
 * `formErrors` contains global errors, and `fieldErrors` contains errors for each field,
 * one level deep. It discards errors for nested fields.
 * Emulation of `zod`'s [`flatten`](https://zod.dev/ERROR_HANDLING?id=flattening-errors) function.
 * @param {ValidationErrors} [validationErrors] Validation errors object
 *
 * {@link https://next-safe-action.dev/docs/define-actions/validation-errors#flattenvalidationerrors-and-flattenbindargsvalidationerrors-utility-functions See docs for more information}
 */
export function flattenValidationErrors<VE extends ValidationErrors<any>>(validationErrors: VE) {
	const flattened: FlattenedValidationErrors<VE> = {
		formErrors: [],
		fieldErrors: {},
	};

	for (const [key, value] of Object.entries<string[] | { _errors: string[] }>(validationErrors ?? {})) {
		if (key === "_errors" && Array.isArray(value)) {
			flattened.formErrors = [...value];
		} else {
			if ("_errors" in value) {
				flattened.fieldErrors[key as keyof Omit<VE, "_errors">] = [...value._errors];
			}
		}
	}

	return flattened;
}

/**
 * Transform default formatted bind arguments validation errors into flattened structure.
 * `formErrors` contains global errors, and `fieldErrors` contains errors for each field,
 * one level deep. It discards errors for nested fields.
 * Emulation of `zod`'s [`flatten`](https://zod.dev/ERROR_HANDLING?id=flattening-errors) function.
 * @param {ValidationErrors[]} [bindArgsValidationErrors] Bind arguments validation errors object
 *
 * {@link https://next-safe-action.dev/docs/define-actions/validation-errors#flattenvalidationerrors-and-flattenbindargsvalidationerrors-utility-functions See docs for more information}
 */
export function flattenBindArgsValidationErrors<BAVE extends readonly ValidationErrors<any>[]>(
	bindArgsValidationErrors: BAVE
) {
	return bindArgsValidationErrors.map((ve) => flattenValidationErrors(ve)) as FlattenedBindArgsValidationErrors<BAVE>;
}

/**
 * This error is thrown when an action metadata is invalid, i.e. when there's a mismatch between the
 * type of the metadata schema returned from `defineMetadataSchema` and the actual data passed.
 */
export class ActionMetadataValidationError<MDS extends Schema | undefined> extends Error {
	public validationErrors: ValidationErrors<MDS>;

	constructor(validationErrors: ValidationErrors<MDS>) {
		super("Invalid metadata input. Please be sure to pass metadata via `metadata` method before defining the action.");
		this.name = "ActionMetadataError";
		this.validationErrors = validationErrors;
	}
}

/**
 * This error is thrown when an action's data (output) is invalid, i.e. when there's a mismatch between the
 * type of the data schema passed to `dataSchema` method and the actual return of the action.
 */
export class ActionOutputDataValidationError<DS extends Schema | undefined> extends Error {
	public validationErrors: ValidationErrors<DS>;

	constructor(validationErrors: ValidationErrors<DS>) {
		super(
			"Invalid action data (output). Please be sure to return data following the shape of the schema passed to `dataSchema` method."
		);
		this.name = "ActionOutputDataError";
		this.validationErrors = validationErrors;
	}
}


================================================
File: /packages/next-safe-action/src/next/errors/bailout-to-csr.ts
================================================
// Comes from https://github.com/vercel/next.js/blob/canary/packages/next/src/shared/lib/lazy-dynamic/bailout-to-csr.ts

// This has to be a shared module which is shared between client component error boundary and dynamic component
const BAILOUT_TO_CSR = "BAILOUT_TO_CLIENT_SIDE_RENDERING";

/** An error that should be thrown when we want to bail out to client-side rendering. */
class BailoutToCSRError extends Error {
	public readonly digest = BAILOUT_TO_CSR;

	constructor(public readonly reason: string) {
		super(`Bail out to client-side rendering: ${reason}`);
	}
}

/** Checks if a passed argument is an error that is thrown if we want to bail out to client-side rendering. */
export function isBailoutToCSRError(err: unknown): err is BailoutToCSRError {
	if (typeof err !== "object" || err === null || !("digest" in err)) {
		return false;
	}

	return err.digest === BAILOUT_TO_CSR;
}


================================================
File: /packages/next-safe-action/src/next/errors/http-access-fallback.ts
================================================
// Comes from https://github.com/vercel/next.js/blob/canary/packages/next/src/client/components/http-access-fallback/http-access-fallback.ts

const HTTPAccessErrorStatus = {
	NOT_FOUND: 404,
	FORBIDDEN: 403,
	UNAUTHORIZED: 401,
};

const ALLOWED_CODES = new Set(Object.values(HTTPAccessErrorStatus));

const HTTP_ERROR_FALLBACK_ERROR_CODE = "NEXT_HTTP_ERROR_FALLBACK";

export type HTTPAccessFallbackError = Error & {
	digest: `${typeof HTTP_ERROR_FALLBACK_ERROR_CODE};${string}`;
};

/**
 * Checks an error to determine if it's an error generated by
 * the HTTP navigation APIs `notFound()`, `forbidden()` or `unauthorized()`.
 *
 * @param error the error that may reference a HTTP access error
 * @returns true if the error is a HTTP access error
 */
export function isHTTPAccessFallbackError(error: unknown): error is HTTPAccessFallbackError {
	if (typeof error !== "object" || error === null || !("digest" in error) || typeof error.digest !== "string") {
		return false;
	}
	const [prefix, httpStatus] = error.digest.split(";");

	return prefix === HTTP_ERROR_FALLBACK_ERROR_CODE && ALLOWED_CODES.has(Number(httpStatus));
}

export function getAccessFallbackHTTPStatus(error: HTTPAccessFallbackError): number {
	const httpStatus = error.digest.split(";")[1];
	return Number(httpStatus);
}


================================================
File: /packages/next-safe-action/src/next/errors/postpone.ts
================================================
// Comes from https://github.com/vercel/next.js/blob/canary/packages/next/src/server/lib/router-utils/is-postpone.ts

const REACT_POSTPONE_TYPE: symbol = Symbol.for("react.postpone");

export function isPostpone(error: any): boolean {
	return (
		typeof error === "object" &&
		error !== null &&
		// eslint-disable-next-line
		error.$$typeof === REACT_POSTPONE_TYPE
	);
}


================================================
File: /packages/next-safe-action/src/next/errors/router.ts
================================================
// Comes from https://github.com/vercel/next.js/blob/canary/packages/next/src/client/components/is-next-router-error.ts

import { isHTTPAccessFallbackError, type HTTPAccessFallbackError } from "./http-access-fallback";
import { isRedirectError, type RedirectError } from "./redirect";

/**
 * Returns true if the error is a navigation signal error. These errors are
 * thrown by user code to perform navigation operations and interrupt the React
 * render.
 */
export function isNextRouterError(error: unknown): error is RedirectError | HTTPAccessFallbackError {
	return isRedirectError(error) || isHTTPAccessFallbackError(error);
}


================================================
File: /packages/next-safe-action/src/next/errors/redirect.ts
================================================
// Comes from: https://github.com/vercel/next.js/blob/canary/packages/next/src/client/components/redirect-error.ts

enum RedirectStatusCode {
	SeeOther = 303,
	TemporaryRedirect = 307,
	PermanentRedirect = 308,
}

const REDIRECT_ERROR_CODE = "NEXT_REDIRECT";

enum RedirectType {
	push = "push",
	replace = "replace",
}

export type RedirectError = Error & {
	digest: `${typeof REDIRECT_ERROR_CODE};${RedirectType};${string};${RedirectStatusCode};`;
};

/**
 * Checks an error to determine if it's an error generated by the
 * `redirect(url)` helper.
 *
 * @param error the error that may reference a redirect error
 * @returns true if the error is a redirect error
 */
export function isRedirectError(error: unknown): error is RedirectError {
	if (typeof error !== "object" || error === null || !("digest" in error) || typeof error.digest !== "string") {
		return false;
	}

	const digest = error.digest.split(";");
	const [errorCode, type] = digest;
	const destination = digest.slice(2, -2).join(";");
	const status = digest.at(-2);

	const statusCode = Number(status);

	return (
		errorCode === REDIRECT_ERROR_CODE &&
		(type === "replace" || type === "push") &&
		typeof destination === "string" &&
		!isNaN(statusCode) &&
		statusCode in RedirectStatusCode
	);
}


================================================
File: /packages/next-safe-action/src/next/errors/index.ts
================================================
import { isBailoutToCSRError } from "./bailout-to-csr";
import { isDynamicUsageError } from "./dynamic-usage";
import {
	getAccessFallbackHTTPStatus,
	isHTTPAccessFallbackError,
	type HTTPAccessFallbackError,
} from "./http-access-fallback";
import { isPostpone } from "./postpone";
import { isNextRouterError } from "./router";

export function isNotFoundError(error: unknown): error is HTTPAccessFallbackError {
	return isHTTPAccessFallbackError(error) && getAccessFallbackHTTPStatus(error) === 404;
}

export function isForbiddenError(error: unknown): error is HTTPAccessFallbackError {
	return isHTTPAccessFallbackError(error) && getAccessFallbackHTTPStatus(error) === 403;
}

export function isUnauthorizedError(error: unknown): error is HTTPAccessFallbackError {
	return isHTTPAccessFallbackError(error) && getAccessFallbackHTTPStatus(error) === 401;
}

// Next.js error handling
export function isFrameworkError(error: unknown): error is Error {
	return isNextRouterError(error) || isBailoutToCSRError(error) || isDynamicUsageError(error) || isPostpone(error);
}

export { isRedirectError } from "./redirect";


================================================
File: /packages/next-safe-action/src/next/errors/dynamic-usage.ts
================================================
// Comes from https://github.com/vercel/next.js/blob/canary/packages/next/src/export/helpers/is-dynamic-usage-error.ts

import { isBailoutToCSRError } from "./bailout-to-csr";
import { isNextRouterError } from "./router";

const DYNAMIC_ERROR_CODE = "DYNAMIC_SERVER_USAGE";

class DynamicServerError extends Error {
	digest: typeof DYNAMIC_ERROR_CODE = DYNAMIC_ERROR_CODE;

	constructor(public readonly description: string) {
		super(`Dynamic server usage: ${description}`);
	}
}

function isDynamicServerError(err: unknown): err is DynamicServerError {
	if (typeof err !== "object" || err === null || !("digest" in err) || typeof err.digest !== "string") {
		return false;
	}

	return err.digest === DYNAMIC_ERROR_CODE;
}

function isDynamicPostponeReason(reason: string) {
	return (
		reason.includes("needs to bail out of prerendering at this point because it used") &&
		reason.includes("Learn more: https://nextjs.org/docs/messages/ppr-caught-error")
	);
}

function isDynamicPostpone(err: unknown) {
	if (
		typeof err === "object" &&
		err !== null &&
		// eslint-disable-next-line
		typeof (err as any).message === "string"
	) {
		// eslint-disable-next-line
		return isDynamicPostponeReason((err as any).message);
	}
	return false;
}

export const isDynamicUsageError = (err: unknown) =>
	isDynamicServerError(err) || isBailoutToCSRError(err) || isNextRouterError(err) || isDynamicPostpone(err);


================================================
File: /packages/next-safe-action/src/index.types.ts
================================================
import type { Infer, InferArray, InferIn, InferInArray, Schema, ValidationAdapter } from "./adapters/types";
import type { SafeActionClient } from "./safe-action-client";
import type { MaybePromise, Prettify } from "./utils.types";
import type { BindArgsValidationErrors, ValidationErrors } from "./validation-errors.types";

/**
 * Type of the default validation errors shape passed to `createSafeActionClient` via `defaultValidationErrorsShape`
 * property.
 */
export type DVES = "formatted" | "flattened";

/**
 * Type of the util properties passed to server error handler functions.
 */
export type ServerErrorFunctionUtils<MetadataSchema extends Schema | undefined> = {
	clientInput: unknown;
	bindArgsClientInputs: unknown[];
	ctx: object;
	metadata: MetadataSchema extends Schema ? Infer<MetadataSchema> : undefined;
};

/**
 * Type of options when creating a new safe action client.
 */
export type SafeActionClientOpts<
	ServerError,
	MetadataSchema extends Schema | undefined,
	ODVES extends DVES | undefined,
> = {
	validationAdapter?: ValidationAdapter;
	defineMetadataSchema?: () => MetadataSchema;
	handleServerError?: (error: Error, utils: ServerErrorFunctionUtils<MetadataSchema>) => MaybePromise<ServerError>;
	throwValidationErrors?: boolean;
	defaultValidationErrorsShape?: ODVES;
};

/**
 * Type of the result of a safe action.
 */
export type SafeActionResult<
	ServerError,
	S extends Schema | undefined,
	BAS extends readonly Schema[],
	CVE = ValidationErrors<S>,
	CBAVE = BindArgsValidationErrors<BAS>,
	Data = unknown,
	// eslint-disable-next-line
	NextCtx = object,
> = {
	data?: Data;
	serverError?: ServerError;
	validationErrors?: CVE;
	bindArgsValidationErrors?: CBAVE;
};

/**
 * Type of the function called from components with type safe input data.
 */
export type SafeActionFn<ServerError, S extends Schema | undefined, BAS extends readonly Schema[], CVE, CBAVE, Data> = (
	...clientInputs: [...bindArgsInputs: InferInArray<BAS>, input: S extends Schema ? InferIn<S> : void]
) => Promise<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data> | undefined>;

/**
 * Type of the stateful function called from components with type safe input data.
 */
export type SafeStateActionFn<
	ServerError,
	S extends Schema | undefined,
	BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
> = (
	...clientInputs: [
		...bindArgsInputs: InferInArray<BAS>,
		prevResult: Prettify<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>>,
		input: S extends Schema ? InferIn<S> : void,
	]
) => Promise<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>>;

/**
 * Type of the result of a middleware function. It extends the result of a safe action with
 * information about the action execution.
 */
export type MiddlewareResult<ServerError, NextCtx extends object> = SafeActionResult<
	ServerError,
	any,
	any,
	any,
	any,
	any,
	NextCtx
> & {
	parsedInput?: unknown;
	bindArgsParsedInputs?: unknown[];
	ctx?: object;
	success: boolean;
};

/**
 * Type of the middleware function passed to a safe action client.
 */
export type MiddlewareFn<ServerError, MD, Ctx extends object, NextCtx extends object> = {
	(opts: {
		clientInput: unknown;
		bindArgsClientInputs: unknown[];
		ctx: Prettify<Ctx>;
		metadata: MD;
		next: {
			<NC extends object = {}>(opts?: { ctx?: NC }): Promise<MiddlewareResult<ServerError, NC>>;
		};
	}): Promise<MiddlewareResult<ServerError, NextCtx>>;
};

/**
 * Type of the function that executes server code when defining a new safe action.
 */
export type ServerCodeFn<
	MD,
	Ctx extends object,
	S extends Schema | undefined,
	BAS extends readonly Schema[],
	Data,
> = (args: {
	parsedInput: S extends Schema ? Infer<S> : undefined;
	clientInput: S extends Schema ? InferIn<S> : undefined;
	bindArgsParsedInputs: InferArray<BAS>;
	bindArgsClientInputs: InferInArray<BAS>;
	ctx: Prettify<Ctx>;
	metadata: MD;
}) => Promise<Data>;

/**
 * Type of the function that executes server code when defining a new stateful safe action.
 */
export type StateServerCodeFn<
	ServerError,
	MD,
	Ctx extends object,
	S extends Schema | undefined,
	BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
> = (
	args: {
		parsedInput: S extends Schema ? Infer<S> : undefined;
		clientInput: S extends Schema ? InferIn<S> : undefined;
		bindArgsParsedInputs: InferArray<BAS>;
		bindArgsClientInputs: InferInArray<BAS>;
		ctx: Prettify<Ctx>;
		metadata: MD;
	},
	utils: { prevResult: Prettify<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>> }
) => Promise<Data>;

/**
 * Type of action execution utils. It includes action callbacks and other utils.
 */
export type SafeActionUtils<
	ServerError,
	MD,
	Ctx extends object,
	S extends Schema | undefined,
	BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
> = {
	throwServerError?: boolean;
	throwValidationErrors?: boolean;
	onSuccess?: (args: {
		data?: Data;
		metadata: MD;
		ctx?: Prettify<Ctx>;
		clientInput: S extends Schema ? InferIn<S> : undefined;
		bindArgsClientInputs: InferInArray<BAS>;
		parsedInput: S extends Schema ? Infer<S> : undefined;
		bindArgsParsedInputs: InferArray<BAS>;
		hasRedirected: boolean;
		hasNotFound: boolean;
		hasForbidden: boolean;
		hasUnauthorized: boolean;
	}) => Promise<unknown>;
	onError?: (args: {
		error: Prettify<Omit<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>, "data">>;
		metadata: MD;
		ctx?: Prettify<Ctx>;
		clientInput: S extends Schema ? InferIn<S> : undefined;
		bindArgsClientInputs: InferInArray<BAS>;
	}) => Promise<unknown>;
	onSettled?: (args: {
		result: Prettify<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>>;
		metadata: MD;
		ctx?: Prettify<Ctx>;
		clientInput: S extends Schema ? InferIn<S> : undefined;
		bindArgsClientInputs: InferInArray<BAS>;
		hasRedirected: boolean;
		hasNotFound: boolean;
		hasForbidden: boolean;
		hasUnauthorized: boolean;
	}) => Promise<unknown>;
};

/**
 * Infer input types of a safe action.
 */
export type InferSafeActionFnInput<T extends Function> = T extends
	| SafeActionFn<any, infer S extends Schema | undefined, infer BAS extends readonly Schema[], any, any, any>
	| SafeStateActionFn<any, infer S extends Schema | undefined, infer BAS extends readonly Schema[], any, any, any>
	? S extends Schema
		? {
				clientInput: InferIn<S>;
				bindArgsClientInputs: InferInArray<BAS>;
				parsedInput: Infer<S>;
				bindArgsParsedInputs: InferArray<BAS>;
			}
		: {
				clientInput: undefined;
				bindArgsClientInputs: InferInArray<BAS>;
				parsedInput: undefined;
				bindArgsParsedInputs: InferArray<BAS>;
			}
	: never;

/**
 * Infer the result type of a safe action.
 */
export type InferSafeActionFnResult<T extends Function> = T extends
	| SafeActionFn<
			infer ServerError,
			infer S extends Schema | undefined,
			infer BAS extends readonly Schema[],
			infer CVE,
			infer CBAVE,
			infer Data
	  >
	| SafeStateActionFn<
			infer ServerError,
			infer S extends Schema | undefined,
			infer BAS extends readonly Schema[],
			infer CVE,
			infer CBAVE,
			infer Data
	  >
	? SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>
	: never;

/**
 * Infer the next context type returned by a middleware function using the `next` function.
 */
export type InferMiddlewareFnNextCtx<T> =
	T extends MiddlewareFn<any, any, any, infer NextCtx extends object> ? NextCtx : never;

/**
 * Infer the context type of a safe action client or middleware function.
 */
export type InferCtx<T> = T extends
	| SafeActionClient<any, any, any, any, infer Ctx extends object, any, any, any, any, any>
	| MiddlewareFn<any, any, infer Ctx extends object, any>
	? Ctx
	: never;

/**
 * Infer the metadata type of a safe action client or middleware function.
 */
export type InferMetadata<T> = T extends
	| SafeActionClient<any, any, any, infer MD, any, any, any, any, any, any>
	| MiddlewareFn<any, infer MD, any, any>
	? MD
	: never;

/**
 * Infer the server error type from a safe action client or a middleware function or a safe action function.
 */
export type InferServerError<T> = T extends
	| SafeActionClient<infer ServerError, any, any, any, any, any, any, any, any, any>
	| MiddlewareFn<infer ServerError, any, any, any>
	| SafeActionFn<infer ServerError, any, any, any, any, any>
	| SafeStateActionFn<infer ServerError, any, any, any, any, any>
	? ServerError
	: never;

/**
 * Type of the core safe action client.
 */
export { SafeActionClient };


================================================
File: /packages/next-safe-action/src/utils.types.ts
================================================
// Takes an object type and makes it more readable.
export type Prettify<T> = {
	[K in keyof T]: T[K];
} & {};

// Returns type or promise of type.
export type MaybePromise<T> = Promise<T> | T;


================================================
File: /packages/next-safe-action/src/utils.ts
================================================
export const DEFAULT_SERVER_ERROR_MESSAGE = "Something went wrong while executing the operation.";

/**
 * Checks if passed argument is an instance of Error.
 */
export const isError = (error: unknown): error is Error => error instanceof Error;

/**
 * Checks what the winning boolean value is from a series of values, from lowest to highest priority.
 * `null` and `undefined` values are skipped.
 */
export const winningBoolean = (...args: (boolean | undefined | null)[]) => {
	return args.reduce((acc, v) => (typeof v === "boolean" ? v : acc), false) as boolean;
};


================================================
File: /packages/next-safe-action/src/hooks.ts
================================================
"use client";

import * as React from "react";
import {} from "react/experimental";
import type {} from "zod";
import type { InferIn, Schema } from "./adapters/types";
import { getActionShorthandStatusObject, getActionStatus, useActionCallbacks, useExecuteOnMount } from "./hooks-utils";
import type {
	HookBaseUtils,
	HookCallbacks,
	HookSafeActionFn,
	UseActionHookReturn,
	UseOptimisticActionHookReturn,
} from "./hooks.types";
import type { SafeActionResult } from "./index.types";

// HOOKS

/**
 * Use the action from a Client Component via hook.
 * @param safeActionFn The action function
 * @param utils Optional base utils and callbacks
 *
 * {@link https://next-safe-action.dev/docs/execute-actions/hooks/useaction See docs for more information}
 */
export const useAction = <
	ServerError,
	S extends Schema | undefined,
	const BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
>(
	safeActionFn: HookSafeActionFn<ServerError, S, BAS, CVE, CBAVE, Data>,
	utils?: HookBaseUtils<S> & HookCallbacks<ServerError, S, BAS, CVE, CBAVE, Data>
): UseActionHookReturn<ServerError, S, BAS, CVE, CBAVE, Data> => {
	const [isTransitioning, startTransition] = React.useTransition();
	const [result, setResult] = React.useState<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>>({});
	const [clientInput, setClientInput] = React.useState<S extends Schema ? InferIn<S> : void>();
	const [isExecuting, setIsExecuting] = React.useState(false);
	const [isIdle, setIsIdle] = React.useState(true);

	const status = getActionStatus<ServerError, S, BAS, CVE, CBAVE, Data>({ isExecuting, result, isIdle });

	const execute = React.useCallback(
		(input: S extends Schema ? InferIn<S> : void) => {
			setTimeout(() => {
				setIsIdle(false);
				setClientInput(input);
				setIsExecuting(true);
			}, 0);

			startTransition(() => {
				safeActionFn(input as S extends Schema ? InferIn<S> : undefined)
					.then((res) => setResult(res ?? {}))
					.catch((e) => {
						throw e;
					})
					.finally(() => {
						setIsExecuting(false);
					});
			});
		},
		[safeActionFn]
	);

	const executeAsync = React.useCallback(
		(input: S extends Schema ? InferIn<S> : void) => {
			const fn = new Promise<Awaited<ReturnType<typeof safeActionFn>>>((resolve, reject) => {
				setTimeout(() => {
					setIsIdle(false);
					setClientInput(input);
					setIsExecuting(true);
				}, 0);

				startTransition(() => {
					safeActionFn(input as S extends Schema ? InferIn<S> : undefined)
						.then((res) => {
							setResult(res ?? {});
							resolve(res);
						})
						.catch((e) => {
							reject(e);
						})
						.finally(() => {
							setIsExecuting(false);
						});
				});
			});

			return fn;
		},
		[safeActionFn]
	);

	const reset = React.useCallback(() => {
		setIsIdle(true);
		setClientInput(undefined);
		setResult({});
	}, []);

	useExecuteOnMount({
		executeOnMount: utils?.executeOnMount,
		executeFn: execute,
	});

	useActionCallbacks({
		result: result ?? {},
		input: clientInput as S extends Schema ? InferIn<S> : undefined,
		status,
		cb: {
			onExecute: utils?.onExecute,
			onSuccess: utils?.onSuccess,
			onError: utils?.onError,
			onSettled: utils?.onSettled,
		},
	});

	return {
		execute,
		executeAsync,
		input: clientInput as S extends Schema ? InferIn<S> : undefined,
		result,
		reset,
		status,
		...getActionShorthandStatusObject({ status, isTransitioning }),
	};
};

/**
 * Use the action from a Client Component via hook, with optimistic data update.
 * @param safeActionFn The action function
 * @param utils Required `currentData` and `updateFn` and optional base utils and callbacks
 *
 * {@link https://next-safe-action.dev/docs/execute-actions/hooks/useoptimisticaction See docs for more information}
 */
export const useOptimisticAction = <
	ServerError,
	S extends Schema | undefined,
	const BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
	State,
>(
	safeActionFn: HookSafeActionFn<ServerError, S, BAS, CVE, CBAVE, Data>,
	utils: {
		currentState: State;
		updateFn: (state: State, input: S extends Schema ? InferIn<S> : undefined) => State;
	} & HookBaseUtils<S> &
		HookCallbacks<ServerError, S, BAS, CVE, CBAVE, Data>
): UseOptimisticActionHookReturn<ServerError, S, BAS, CVE, CBAVE, Data, State> => {
	const [isTransitioning, startTransition] = React.useTransition();
	const [result, setResult] = React.useState<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>>({});
	const [clientInput, setClientInput] = React.useState<S extends Schema ? InferIn<S> : void>();
	const [isExecuting, setIsExecuting] = React.useState(false);
	const [isIdle, setIsIdle] = React.useState(true);
	const [optimisticState, setOptimisticValue] = React.useOptimistic<State, S extends Schema ? InferIn<S> : undefined>(
		utils.currentState,
		utils.updateFn
	);

	const status = getActionStatus<ServerError, S, BAS, CVE, CBAVE, Data>({ isExecuting, result, isIdle });

	const execute = React.useCallback(
		(input: S extends Schema ? InferIn<S> : void) => {
			setTimeout(() => {
				setIsIdle(false);
				setClientInput(input);
				setIsExecuting(true);
			}, 0);

			startTransition(() => {
				setOptimisticValue(input as S extends Schema ? InferIn<S> : undefined);
				safeActionFn(input as S extends Schema ? InferIn<S> : undefined)
					.then((res) => setResult(res ?? {}))
					.catch((e) => {
						throw e;
					})
					.finally(() => {
						setIsExecuting(false);
					});
			});
		},
		[safeActionFn, setOptimisticValue]
	);

	const executeAsync = React.useCallback(
		(input: S extends Schema ? InferIn<S> : void) => {
			const fn = new Promise<Awaited<ReturnType<typeof safeActionFn>>>((resolve, reject) => {
				setTimeout(() => {
					setIsIdle(false);
					setClientInput(input);
					setIsExecuting(true);
				}, 0);

				startTransition(() => {
					setOptimisticValue(input as S extends Schema ? InferIn<S> : undefined);
					safeActionFn(input as S extends Schema ? InferIn<S> : undefined)
						.then((res) => {
							setResult(res ?? {});
							resolve(res);
						})
						.catch((e) => {
							reject(e);
						})
						.finally(() => {
							setIsExecuting(false);
						});
				});
			});

			return fn;
		},
		[safeActionFn, setOptimisticValue]
	);

	const reset = React.useCallback(() => {
		setIsIdle(true);
		setClientInput(undefined);
		setResult({});
	}, []);

	useExecuteOnMount({
		executeOnMount: utils?.executeOnMount,
		executeFn: execute,
	});

	useActionCallbacks({
		result: result ?? {},
		input: clientInput as S extends Schema ? InferIn<S> : undefined,
		status,
		cb: {
			onExecute: utils.onExecute,
			onSuccess: utils.onSuccess,
			onError: utils.onError,
			onSettled: utils.onSettled,
		},
	});

	return {
		execute,
		executeAsync,
		input: clientInput as S extends Schema ? InferIn<S> : undefined,
		result,
		optimisticState,
		reset,
		status,
		...getActionShorthandStatusObject({ status, isTransitioning }),
	};
};

export type * from "./hooks.types";


================================================
File: /packages/next-safe-action/src/index.ts
================================================
import type { Infer, Schema } from "./adapters/types";
import { zodAdapter } from "./adapters/zod";
import type { DVES, SafeActionClientOpts } from "./index.types";
import { SafeActionClient } from "./safe-action-client";
import { DEFAULT_SERVER_ERROR_MESSAGE } from "./utils";
import {
	flattenBindArgsValidationErrors,
	flattenValidationErrors,
	formatBindArgsValidationErrors,
	formatValidationErrors,
} from "./validation-errors";

export { createMiddleware } from "./middleware";
export { DEFAULT_SERVER_ERROR_MESSAGE } from "./utils";
export {
	ActionMetadataValidationError,
	ActionOutputDataValidationError,
	ActionValidationError,
	flattenBindArgsValidationErrors,
	flattenValidationErrors,
	formatBindArgsValidationErrors,
	formatValidationErrors,
	returnValidationErrors,
} from "./validation-errors";

export type * from "./index.types";
export type * from "./validation-errors.types";

/**
 * Create a new safe action client.
 * Note: this client only works with Zod as the validation library.
 * @param createOpts Initialization options
 *
 * {@link https://next-safe-action.dev/docs/define-actions/create-the-client#initialization-options See docs for more information}
 */
export const createSafeActionClient = <
	ODVES extends DVES | undefined = undefined,
	ServerError = string,
	MetadataSchema extends Schema | undefined = undefined,
>(
	createOpts?: SafeActionClientOpts<ServerError, MetadataSchema, ODVES>
) => {
	// If `handleServerError` is provided, use it, otherwise default to log to console and generic error message.
	const handleServerError: NonNullable<SafeActionClientOpts<ServerError, MetadataSchema, ODVES>["handleServerError"]> =
		createOpts?.handleServerError ||
		((e) => {
			console.error("Action error:", e.message);
			return DEFAULT_SERVER_ERROR_MESSAGE as ServerError;
		});

	return new SafeActionClient({
		middlewareFns: [async ({ next }) => next({ ctx: {} })],
		handleServerError,
		inputSchemaFn: undefined,
		bindArgsSchemas: [],
		outputSchema: undefined,
		validationAdapter: createOpts?.validationAdapter ?? zodAdapter(), // use zod adapter by default
		ctxType: {},
		metadataSchema: (createOpts?.defineMetadataSchema?.() ?? undefined) as MetadataSchema,
		metadata: undefined as MetadataSchema extends Schema ? Infer<MetadataSchema> : undefined,
		defaultValidationErrorsShape: (createOpts?.defaultValidationErrorsShape ?? "formatted") as ODVES,
		throwValidationErrors: Boolean(createOpts?.throwValidationErrors),
		handleValidationErrorsShape: async (ve) =>
			createOpts?.defaultValidationErrorsShape === "flattened"
				? flattenValidationErrors(ve)
				: formatValidationErrors(ve),
		handleBindArgsValidationErrorsShape: async (ve) =>
			createOpts?.defaultValidationErrorsShape === "flattened"
				? flattenBindArgsValidationErrors(ve)
				: formatBindArgsValidationErrors(ve),
	});
};


================================================
File: /packages/next-safe-action/src/safe-action-client.ts
================================================
import type {} from "zod";
import { actionBuilder } from "./action-builder";
import type { Infer, Schema, ValidationAdapter } from "./adapters/types";
import type {
	DVES,
	MiddlewareFn,
	SafeActionClientOpts,
	SafeActionUtils,
	ServerCodeFn,
	StateServerCodeFn,
} from "./index.types";
import type {
	BindArgsValidationErrors,
	FlattenedBindArgsValidationErrors,
	FlattenedValidationErrors,
	HandleBindArgsValidationErrorsShapeFn,
	HandleValidationErrorsShapeFn,
	ValidationErrors,
} from "./validation-errors.types";

export class SafeActionClient<
	ServerError,
	ODVES extends DVES | undefined, // override default validation errors shape
	MetadataSchema extends Schema | undefined = undefined,
	MD = MetadataSchema extends Schema ? Infer<MetadataSchema> : undefined, // metadata type (inferred from metadata schema)
	Ctx extends object = {},
	ISF extends (() => Promise<Schema>) | undefined = undefined, // input schema function
	IS extends Schema | undefined = ISF extends Function ? Awaited<ReturnType<ISF>> : undefined, // input schema
	OS extends Schema | undefined = undefined, // output schema
	const BAS extends readonly Schema[] = [],
	CVE = undefined,
	const CBAVE = undefined,
> {
	readonly #handleServerError: NonNullable<
		SafeActionClientOpts<ServerError, MetadataSchema, ODVES>["handleServerError"]
	>;
	readonly #middlewareFns: MiddlewareFn<ServerError, any, any, any>[];
	readonly #metadataSchema: MetadataSchema;
	readonly #metadata: MD;
	readonly #inputSchemaFn: ISF;
	readonly #outputSchema: OS;
	readonly #ctxType: Ctx;
	readonly #bindArgsSchemas: BAS;
	readonly #validationAdapter: ValidationAdapter;
	readonly #handleValidationErrorsShape: HandleValidationErrorsShapeFn<IS, BAS, MD, Ctx, CVE>;
	readonly #handleBindArgsValidationErrorsShape: HandleBindArgsValidationErrorsShapeFn<IS, BAS, MD, Ctx, CBAVE>;
	readonly #defaultValidationErrorsShape: ODVES;
	readonly #throwValidationErrors: boolean;

	constructor(
		opts: {
			middlewareFns: MiddlewareFn<ServerError, any, any, any>[];
			metadataSchema: MetadataSchema;
			metadata: MD;
			inputSchemaFn: ISF;
			outputSchema: OS;
			bindArgsSchemas: BAS;
			validationAdapter: ValidationAdapter;
			handleValidationErrorsShape: HandleValidationErrorsShapeFn<IS, BAS, MD, Ctx, CVE>;
			handleBindArgsValidationErrorsShape: HandleBindArgsValidationErrorsShapeFn<IS, BAS, MD, Ctx, CBAVE>;
			ctxType: Ctx;
		} & Required<
			Pick<
				SafeActionClientOpts<ServerError, MetadataSchema, ODVES>,
				"handleServerError" | "defaultValidationErrorsShape" | "throwValidationErrors"
			>
		>
	) {
		this.#middlewareFns = opts.middlewareFns;
		this.#handleServerError = opts.handleServerError;
		this.#metadataSchema = opts.metadataSchema;
		this.#metadata = opts.metadata;
		this.#inputSchemaFn = (opts.inputSchemaFn ?? undefined) as ISF;
		this.#outputSchema = opts.outputSchema;
		this.#bindArgsSchemas = opts.bindArgsSchemas ?? [];
		this.#validationAdapter = opts.validationAdapter;
		this.#ctxType = opts.ctxType as unknown as Ctx;
		this.#handleValidationErrorsShape = opts.handleValidationErrorsShape;
		this.#handleBindArgsValidationErrorsShape = opts.handleBindArgsValidationErrorsShape;
		this.#defaultValidationErrorsShape = opts.defaultValidationErrorsShape;
		this.#throwValidationErrors = opts.throwValidationErrors;
	}

	/**
	 * Use a middleware function.
	 * @param middlewareFn Middleware function
	 *
	 * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#use See docs for more information}
	 */
	use<NextCtx extends object>(middlewareFn: MiddlewareFn<ServerError, MD, Ctx, Ctx & NextCtx>) {
		return new SafeActionClient({
			middlewareFns: [...this.#middlewareFns, middlewareFn],
			handleServerError: this.#handleServerError,
			metadataSchema: this.#metadataSchema,
			metadata: this.#metadata,
			inputSchemaFn: this.#inputSchemaFn,
			outputSchema: this.#outputSchema,
			bindArgsSchemas: this.#bindArgsSchemas,
			validationAdapter: this.#validationAdapter,
			handleValidationErrorsShape: this.#handleValidationErrorsShape,
			handleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,
			ctxType: {} as Ctx & NextCtx,
			defaultValidationErrorsShape: this.#defaultValidationErrorsShape,
			throwValidationErrors: this.#throwValidationErrors,
		});
	}

	/**
	 * Define metadata for the action.
	 * @param data Metadata with the same type as the return value of the [`defineMetadataSchema`](https://next-safe-action.dev/docs/define-actions/create-the-client#definemetadataschema) optional initialization function
	 *
	 * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#metadata See docs for more information}
	 */
	metadata(data: MD) {
		return new SafeActionClient({
			middlewareFns: this.#middlewareFns,
			handleServerError: this.#handleServerError,
			metadataSchema: this.#metadataSchema,
			metadata: data,
			inputSchemaFn: this.#inputSchemaFn,
			bindArgsSchemas: this.#bindArgsSchemas,
			outputSchema: this.#outputSchema,
			validationAdapter: this.#validationAdapter,
			handleValidationErrorsShape: this.#handleValidationErrorsShape,
			handleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,
			ctxType: {} as Ctx,
			defaultValidationErrorsShape: this.#defaultValidationErrorsShape,
			throwValidationErrors: this.#throwValidationErrors,
		});
	}

	/**
	 * Define the input validation schema for the action.
	 * @param inputSchema Input validation schema
	 * @param utils Optional utils object
	 *
	 * {@link https://next-safe-action.dev/docs/define-actions/create-the-client#inputschema See docs for more information}
	 */
	schema<
		OIS extends Schema | ((prevSchema: IS) => Promise<Schema>), // override input schema
		AIS extends Schema = OIS extends (prevSchema: IS) => Promise<Schema> ? Awaited<ReturnType<OIS>> : OIS, // actual input schema
		OCVE = ODVES extends "flattened" ? FlattenedValidationErrors<ValidationErrors<AIS>> : ValidationErrors<AIS>,
	>(
		inputSchema: OIS,
		utils?: {
			handleValidationErrorsShape?: HandleValidationErrorsShapeFn<AIS, BAS, MD, Ctx, OCVE>;
		}
	) {
		return new SafeActionClient({
			middlewareFns: this.#middlewareFns,
			handleServerError: this.#handleServerError,
			metadataSchema: this.#metadataSchema,
			metadata: this.#metadata,
			// @ts-expect-error
			inputSchemaFn: (inputSchema[Symbol.toStringTag] === "AsyncFunction"
				? async () => {
						const prevSchema = await this.#inputSchemaFn?.();
						// @ts-expect-error
						return inputSchema(prevSchema as IS) as AIS;
					}
				: async () => inputSchema) as ISF,
			bindArgsSchemas: this.#bindArgsSchemas,
			outputSchema: this.#outputSchema,
			validationAdapter: this.#validationAdapter,
			handleValidationErrorsShape: (utils?.handleValidationErrorsShape ??
				this.#handleValidationErrorsShape) as HandleValidationErrorsShapeFn<AIS, BAS, MD, Ctx, OCVE>,
			handleBindArgsValidationErrorsShape: this
				.#handleBindArgsValidationErrorsShape as HandleBindArgsValidationErrorsShapeFn<AIS, BAS, MD, Ctx, CBAVE>,
			ctxType: {} as Ctx,
			defaultValidationErrorsShape: this.#defaultValidationErrorsShape,
			throwValidationErrors: this.#throwValidationErrors,
		});
	}

	/**
	 * Define the bind args input validation schema for the action.
	 * @param bindArgsSchemas Bind args input validation schemas
	 * @param utils Optional utils object
	 *
	 * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#bindargsschemas See docs for more information}
	 */
	bindArgsSchemas<
		const OBAS extends readonly Schema[],
		OCBAVE = ODVES extends "flattened"
			? FlattenedBindArgsValidationErrors<BindArgsValidationErrors<OBAS>>
			: BindArgsValidationErrors<OBAS>,
	>(
		bindArgsSchemas: OBAS,
		utils?: { handleBindArgsValidationErrorsShape?: HandleBindArgsValidationErrorsShapeFn<IS, OBAS, MD, Ctx, OCBAVE> }
	) {
		return new SafeActionClient({
			middlewareFns: this.#middlewareFns,
			handleServerError: this.#handleServerError,
			metadataSchema: this.#metadataSchema,
			metadata: this.#metadata,
			inputSchemaFn: this.#inputSchemaFn,
			bindArgsSchemas,
			outputSchema: this.#outputSchema,
			validationAdapter: this.#validationAdapter,
			handleValidationErrorsShape: this.#handleValidationErrorsShape as unknown as HandleValidationErrorsShapeFn<
				IS,
				OBAS,
				MD,
				Ctx,
				CVE
			>,
			handleBindArgsValidationErrorsShape: (utils?.handleBindArgsValidationErrorsShape ??
				this.#handleBindArgsValidationErrorsShape) as HandleBindArgsValidationErrorsShapeFn<IS, OBAS, MD, Ctx, OCBAVE>,
			ctxType: {} as Ctx,
			defaultValidationErrorsShape: this.#defaultValidationErrorsShape,
			throwValidationErrors: this.#throwValidationErrors,
		});
	}

	/**
	 * Define the output data validation schema for the action.
	 * @param schema Output data validation schema
	 *
	 * {@link https://next-safe-action.dev/docs/define-actions/create-the-client#outputschema See docs for more information}
	 */
	outputSchema<OOS extends Schema>(dataSchema: OOS) {
		return new SafeActionClient({
			middlewareFns: this.#middlewareFns,
			handleServerError: this.#handleServerError,
			metadataSchema: this.#metadataSchema,
			metadata: this.#metadata,
			inputSchemaFn: this.#inputSchemaFn,
			bindArgsSchemas: this.#bindArgsSchemas,
			outputSchema: dataSchema,
			validationAdapter: this.#validationAdapter,
			handleValidationErrorsShape: this.#handleValidationErrorsShape,
			handleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,
			ctxType: {} as Ctx,
			defaultValidationErrorsShape: this.#defaultValidationErrorsShape,
			throwValidationErrors: this.#throwValidationErrors,
		});
	}

	/**
	 * Define the action.
	 * @param serverCodeFn Code that will be executed on the **server side**
	 * @param [cb] Optional callbacks that will be called after action execution, on the server.
	 *
	 * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}
	 */
	action<Data extends OS extends Schema ? Infer<OS> : any>(
		serverCodeFn: ServerCodeFn<MD, Ctx, IS, BAS, Data>,
		utils?: SafeActionUtils<ServerError, MD, Ctx, IS, BAS, CVE, CBAVE, Data>
	) {
		return actionBuilder({
			handleServerError: this.#handleServerError,
			middlewareFns: this.#middlewareFns,
			ctxType: this.#ctxType,
			metadataSchema: this.#metadataSchema,
			metadata: this.#metadata,
			inputSchemaFn: this.#inputSchemaFn,
			bindArgsSchemas: this.#bindArgsSchemas,
			outputSchema: this.#outputSchema,
			validationAdapter: this.#validationAdapter,
			handleValidationErrorsShape: this.#handleValidationErrorsShape,
			handleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,
			throwValidationErrors: this.#throwValidationErrors,
		}).action(serverCodeFn, utils);
	}

	/**
	 * Define the stateful action.
	 * To be used with the [`useStateAction`](https://next-safe-action.dev/docs/execute-actions/hooks/usestateaction) hook.
	 * @param serverCodeFn Code that will be executed on the **server side**
	 * @param [cb] Optional callbacks that will be called after action execution, on the server.
	 *
	 * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}
	 */
	stateAction<Data extends OS extends Schema ? Infer<OS> : any>(
		serverCodeFn: StateServerCodeFn<ServerError, MD, Ctx, IS, BAS, CVE, CBAVE, Data>,
		utils?: SafeActionUtils<ServerError, MD, Ctx, IS, BAS, CVE, CBAVE, Data>
	) {
		return actionBuilder({
			handleServerError: this.#handleServerError,
			middlewareFns: this.#middlewareFns,
			ctxType: this.#ctxType,
			metadataSchema: this.#metadataSchema,
			metadata: this.#metadata,
			inputSchemaFn: this.#inputSchemaFn,
			bindArgsSchemas: this.#bindArgsSchemas,
			outputSchema: this.#outputSchema,
			validationAdapter: this.#validationAdapter,
			handleValidationErrorsShape: this.#handleValidationErrorsShape,
			handleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,
			throwValidationErrors: this.#throwValidationErrors,
		}).stateAction(serverCodeFn, utils);
	}
}


================================================
File: /packages/next-safe-action/src/__tests__/happy-path.test.ts
================================================
/* eslint-disable @typescript-eslint/no-floating-promises */

import assert from "node:assert";
import { test } from "node:test";
import { z } from "zod";
import { createSafeActionClient } from "..";
import { zodAdapter } from "../adapters/zod";

const ac = createSafeActionClient({
	validationAdapter: zodAdapter(),
});

test("action with no input schema returns empty object", async () => {
	const action = ac.action(async () => {
		return;
	});

	const actualResult = await action();
	const expectedResult = {};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with no input schema and return data gives back an object with correct `data`", async () => {
	const action = ac.action(async () => {
		return {
			ok: true,
		};
	});

	const actualResult = await action();
	const expectedResult = {
		data: {
			ok: true,
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with input, output schema and return data gives back an object with correct `data`", async () => {
	const userId = "ed6f5b84-6bca-4d01-9a51-c3d0c49a7996";

	const action = ac
		.schema(z.object({ userId: z.string().uuid() }))
		.outputSchema(z.object({ userId: z.string() }))
		.action(async ({ parsedInput }) => {
			return {
				userId: parsedInput.userId,
			};
		});

	const actualResult = await action({ userId });

	const expectedResult = {
		data: {
			userId,
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with input schema passed via async function and return data gives back an object with correct `data`", async () => {
	const userId = "ed6f5b84-6bca-4d01-9a51-c3d0c49a7996";

	const action = ac
		.schema(async () => z.object({ userId: z.string().uuid() }))
		.action(async ({ parsedInput }) => {
			return {
				userId: parsedInput.userId,
			};
		});

	const actualResult = await action({ userId });

	const expectedResult = {
		data: {
			userId,
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with input schema extended via async function, ouput schema and return data gives back an object with correct `data`", async () => {
	const userId = "ed6f5b84-6bca-4d01-9a51-c3d0c49a7996";
	const password = "password";

	const action = ac
		.schema(z.object({ password: z.string() }))
		.schema(async (prevSchema) => prevSchema.extend({ userId: z.string().uuid() }))
		.outputSchema(z.object({ userId: z.string(), password: z.string() }))
		.action(async ({ parsedInput }) => {
			return {
				userId: parsedInput.userId,
				password: parsedInput.password,
			};
		});

	const actualResult = await action({ password, userId });

	const expectedResult = {
		data: {
			password,
			userId,
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with no input schema, with bind args input schemas, output schema and return data gives back an object with correct `data`", async () => {
	const username = "johndoe";
	const age = 30;

	const action = ac
		.bindArgsSchemas<[username: z.ZodString, age: z.ZodNumber]>([z.string(), z.number()])
		.outputSchema(z.object({ username: z.string(), age: z.number() }))
		.action(async ({ bindArgsParsedInputs: [username, age] }) => {
			return {
				username,
				age,
			};
		});

	const actualResult = await action(username, age);

	const expectedResult = {
		data: {
			username,
			age,
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with input schema, bind args input schemas, output schema and return data gives back an object with correct `data`", async () => {
	const userId = "ed6f5b84-6bca-4d01-9a51-c3d0c49a7996";
	const username = "johndoe";
	const age = 30;

	const action = ac
		.schema(z.object({ userId: z.string().uuid() }))
		.bindArgsSchemas<[username: z.ZodString, age: z.ZodNumber]>([z.string(), z.number()])
		.outputSchema(z.object({ userId: z.string(), username: z.string(), age: z.number() }))
		.action(async ({ parsedInput, bindArgsParsedInputs: [username, age] }) => {
			return {
				userId: parsedInput.userId,
				username,
				age,
			};
		});

	const actualResult = await action(username, age, { userId });

	const expectedResult = {
		data: {
			username,
			age,
			userId,
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});


================================================
File: /packages/next-safe-action/src/__tests__/middleware.test.ts
================================================
/* eslint-disable @typescript-eslint/no-floating-promises */

import assert from "node:assert";
import { test } from "node:test";
import { z } from "zod";
import {
	createMiddleware,
	createSafeActionClient,
	DEFAULT_SERVER_ERROR_MESSAGE,
	formatBindArgsValidationErrors,
	formatValidationErrors,
	returnValidationErrors,
} from "..";
import { zodAdapter } from "../adapters/zod";

const ac = createSafeActionClient({
	validationAdapter: zodAdapter(),
	handleServerError(e) {
		// disable server error logging for these tests
		return {
			message: e.message,
		};
	},
}).use(async ({ next }) => {
	return next({ ctx: { foo: "bar" } });
});

test("instance context value is accessible in server code function", async () => {
	const action = ac.action(async ({ ctx }) => {
		return {
			ctx,
		};
	});

	const actualResult = await action();
	const expectedResult = {
		data: {
			ctx: { foo: "bar" },
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("instance context value is extended in action middleware and both values are accessible in server code function", async () => {
	const action = ac
		.use(async ({ next }) => {
			return next({ ctx: { bar: "baz" } });
		})
		.action(async ({ ctx }) => {
			return {
				ctx,
			};
		});

	const actualResult = await action();
	const expectedResult = {
		data: {
			ctx: { foo: "bar", bar: "baz" },
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("instance context value is correctly overridden in subsequent middleware", async () => {
	const action = ac
		.use(async ({ next }) => {
			return next({ ctx: { foo: "baz" } });
		})
		.use(async ({ ctx, next }) => {
			if (ctx.foo !== "baz") {
				throw new Error("Expected ctx.foo to be 'baz'");
			}
			return next();
		})
		.action(async ({ ctx }) => {
			return {
				ctx,
			};
		});

	const actualResult = await action();
	const expectedResult = {
		data: {
			ctx: { foo: "baz" },
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action client inputs are passed to middleware", async () => {
	const action = ac
		.schema(async () =>
			z.object({
				username: z.string(),
			})
		)
		.bindArgsSchemas([z.object({ age: z.number().positive() })])
		.use(async ({ clientInput, bindArgsClientInputs, next }) => {
			return next({ ctx: { clientInput, bindArgsClientInputs } });
		})
		.action(async ({ ctx }) => {
			return {
				clientInput: ctx.clientInput,
				bindArgsClientInputs: ctx.bindArgsClientInputs,
			};
		});

	const inputs = [{ age: 30 }, { username: "johndoe" }] as const;

	const actualResult = await action(...inputs);

	const expectedResult = {
		data: {
			bindArgsClientInputs: [inputs[0]],
			clientInput: inputs[1],
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("happy path execution result from middleware is correct", async () => {
	let middlewareResult = {};

	const action = ac
		.schema(async () =>
			z.object({
				username: z.string(),
			})
		)
		.bindArgsSchemas([z.object({ age: z.number().positive() })])
		.use(async ({ next }) => {
			// Await action execution.
			const res = await next();
			middlewareResult = res;
			return res;
		})
		.action(async () => {
			return {
				ok: "123",
			};
		});

	const inputs = [{ age: 30 }, { username: "johndoe" }] as const;
	await action(...inputs);

	const expectedResult = {
		success: true,
		ctx: {
			foo: "bar",
		},
		data: {
			ok: "123",
		},
		parsedInput: {
			username: "johndoe",
		},
		bindArgsParsedInputs: [
			{
				age: 30,
			},
		],
	};

	assert.deepStrictEqual(middlewareResult, expectedResult);
});

test("server error execution result from middleware is correct", async () => {
	let middlewareResult = {};

	const action = ac
		.schema(async () =>
			z.object({
				username: z.string(),
			})
		)
		.bindArgsSchemas([z.object({ age: z.number().positive() })])
		.use(async ({ next }) => {
			// Await action execution.
			const res = await next();
			middlewareResult = res;
			return res;
		})
		.action(async () => {
			throw new Error("Server error message");
		});

	const inputs = [{ age: 30 }, { username: "johndoe" }] as const;
	await action(...inputs);

	const expectedResult = {
		success: false,
		ctx: {
			foo: "bar",
		},
		serverError: {
			message: "Server error message",
		},
	};

	assert.deepStrictEqual(middlewareResult, expectedResult);
});

test("validation errors in execution result from middleware are correct", async () => {
	let middlewareResult = {};

	const action = ac
		.schema(async () =>
			z.object({
				username: z.string().max(3),
			})
		)
		.bindArgsSchemas([z.object({ age: z.number().positive() })])
		.use(async ({ next }) => {
			// Await action execution.
			const res = await next();
			middlewareResult = res;
			return res;
		})
		.action(async () => {
			return {
				ok: "123",
			};
		});

	const inputs = [{ age: -30 }, { username: "johndoe" }] as const;
	await action(...inputs);

	const expectedResult = {
		success: false,
		ctx: {
			foo: "bar",
		},
		validationErrors: {
			username: {
				_errors: ["String must contain at most 3 character(s)"],
			},
		},
		bindArgsValidationErrors: [
			{
				age: {
					_errors: ["Number must be greater than 0"],
				},
			},
		],
	};

	assert.deepStrictEqual(middlewareResult, expectedResult);
});

test("server validation errors in execution result from middleware are correct", async () => {
	let middlewareResult = {};

	const schema = z.object({
		username: z.string(),
	});

	const action = ac
		.schema(schema)
		.bindArgsSchemas([z.object({ age: z.number().positive() })])
		.use(async ({ next }) => {
			// Await action execution.
			const res = await next();
			middlewareResult = res;
			return res;
		})
		.action(async () => {
			returnValidationErrors(schema, {
				username: {
					_errors: ["User suspended"],
				},
			});
		});

	const inputs = [{ age: 30 }, { username: "johndoe" }] as const;
	await action(...inputs);

	const expectedResult = {
		success: false,
		ctx: {
			foo: "bar",
		},
		validationErrors: {
			username: {
				_errors: ["User suspended"],
			},
		},
	};

	assert.deepStrictEqual(middlewareResult, expectedResult);
});

// Flattened validation errors shape.

const flac = createSafeActionClient({
	validationAdapter: zodAdapter(),
	handleServerError: () => DEFAULT_SERVER_ERROR_MESSAGE, // disable server errors logging for these tests
	defaultValidationErrorsShape: "flattened",
});

test("flattened validation errors in execution result from middleware are correct", async () => {
	let middlewareResult = {};

	const action = flac
		.schema(async () =>
			z.object({
				username: z.string().max(3),
			})
		)
		.bindArgsSchemas([z.object({ age: z.number().positive() })])
		.use(async ({ next }) => {
			// Await action execution.
			const res = await next();
			middlewareResult = res;
			return res;
		})
		.action(async () => {
			return {
				ok: "123",
			};
		});

	const inputs = [{ age: -30 }, { username: "johndoe" }] as const;
	await action(...inputs);

	const expectedResult = {
		success: false,
		ctx: {},
		validationErrors: {
			formErrors: [],
			fieldErrors: {
				username: ["String must contain at most 3 character(s)"],
			},
		},
		bindArgsValidationErrors: [
			{
				formErrors: [],
				fieldErrors: {
					age: ["Number must be greater than 0"],
				},
			},
		],
	};

	assert.deepStrictEqual(middlewareResult, expectedResult);
});

test("overridden formatted validation errors in execution result from middleware are correct", async () => {
	let middlewareResult = {};

	const action = flac
		.schema(
			async () =>
				z.object({
					username: z.string().max(3),
				}),
			{ handleValidationErrorsShape: async (ve) => formatValidationErrors(ve) }
		)
		.bindArgsSchemas([z.object({ age: z.number().positive() })], {
			handleBindArgsValidationErrorsShape: async (ve) => formatBindArgsValidationErrors(ve),
		})
		.use(async ({ next }) => {
			// Await action execution.
			const res = await next();
			middlewareResult = res;
			return res;
		})
		.action(async () => {
			return {
				ok: "123",
			};
		});

	const inputs = [{ age: -30 }, { username: "johndoe" }] as const;
	await action(...inputs);

	const expectedResult = {
		success: false,
		ctx: {},
		validationErrors: {
			username: {
				_errors: ["String must contain at most 3 character(s)"],
			},
		},
		bindArgsValidationErrors: [
			{
				age: {
					_errors: ["Number must be greater than 0"],
				},
			},
		],
	};

	assert.deepStrictEqual(middlewareResult, expectedResult);
});

test("standalone middleware extends context", async () => {
	const myMiddleware = createMiddleware<{ ctx: { foo: string } }>().define(async ({ next }) => {
		return next({ ctx: { baz: "qux" } });
	});

	const action = ac.use(myMiddleware).action(async ({ ctx }) => {
		return {
			ctx,
		};
	});

	const actualResult = await action();
	const expectedResult = {
		data: {
			ctx: { foo: "bar", baz: "qux" },
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});


================================================
File: /packages/next-safe-action/src/__tests__/action-callbacks.test.ts
================================================
/* eslint-disable @typescript-eslint/no-floating-promises */

import assert from "node:assert";
import { test } from "node:test";
import { z } from "zod";
import { DEFAULT_SERVER_ERROR_MESSAGE, createSafeActionClient, returnValidationErrors } from "..";
import { zodAdapter } from "../adapters/zod";

const ac = createSafeActionClient({
	validationAdapter: zodAdapter(),
	defineMetadataSchema() {
		return z.object({
			actionName: z.string(),
		});
	},
})
	.use(async ({ next }) => {
		return next({ ctx: { foo: "bar" } });
	})
	.metadata({ actionName: "test" });

test("action with no input schema and no server errors calls `onSuccess` and `onSettled` callbacks", async () => {
	let executed = 0;

	const action = ac.action(
		async () => {
			return;
		},
		{
			onSuccess: async () => {
				executed++;
			},
			onError: async () => {
				executed++; // should not be called
			},
			onSettled: async () => {
				executed++;
			},
		}
	);

	await action();
	assert.strictEqual(executed, 2);
});

test("action with input schemas and no errors calls `onSuccess` and `onSettled` callbacks with correct arguments", async () => {
	let executed = 0;
	const inputs = [crypto.randomUUID(), 30, { username: "johndoe" }] as const;

	const action = ac
		.schema(z.object({ username: z.string().min(3) }))
		.bindArgsSchemas([z.string().uuid(), z.number().positive()])
		.action(
			async () => {
				return {
					ok: true,
				};
			},
			{
				onSuccess: async ({
					clientInput,
					bindArgsClientInputs,
					parsedInput,
					bindArgsParsedInputs,
					data,
					metadata,
					ctx,
				}) => {
					executed++;

					assert.deepStrictEqual(
						{ clientInput, bindArgsClientInputs, parsedInput, bindArgsParsedInputs, data, metadata, ctx },
						{
							metadata: { actionName: "test" },
							ctx: { foo: "bar" },
							clientInput: inputs[2],
							bindArgsClientInputs: inputs.slice(0, 2),
							parsedInput: inputs[2],
							bindArgsParsedInputs: inputs.slice(0, 2),
							data: {
								ok: true,
							},
						}
					);
				},
				onError: async () => {
					executed++; // should not be called
				},
				onSettled: async ({ clientInput, bindArgsClientInputs, result, metadata, ctx }) => {
					executed++;

					assert.deepStrictEqual(
						{ clientInput, bindArgsClientInputs, result, metadata, ctx },
						{
							metadata: { actionName: "test" },
							ctx: { foo: "bar" },
							clientInput: inputs[2],
							bindArgsClientInputs: inputs.slice(0, 2),
							result: {
								data: {
									ok: true,
								},
							},
						}
					);
				},
			}
		);

	await action(...inputs);
	assert.strictEqual(executed, 2);
});

test("action with input schemas and server error calls `onError` and `onSettled` callbacks with correct arguments", async () => {
	let executed = 0;
	const inputs = [crypto.randomUUID(), 30, { username: "johndoe" }] as const;

	const action = ac
		.schema(z.object({ username: z.string().min(3) }))
		.bindArgsSchemas([z.string().uuid(), z.number().positive()])
		.action(
			async () => {
				throw new Error("Server error");
			},
			{
				onSuccess: async () => {
					executed++; // should not be called
				},
				onError: async ({ error, clientInput, bindArgsClientInputs, metadata, ctx }) => {
					executed++;

					assert.deepStrictEqual(
						{ error, clientInput, bindArgsClientInputs, metadata, ctx },
						{
							metadata: { actionName: "test" },
							ctx: { foo: "bar" },
							error: {
								serverError: DEFAULT_SERVER_ERROR_MESSAGE,
							},
							clientInput: inputs[2],
							bindArgsClientInputs: inputs.slice(0, 2),
						}
					);
				},
				onSettled: async ({ clientInput, bindArgsClientInputs, result, metadata, ctx }) => {
					executed++;

					assert.deepStrictEqual(
						{ result, clientInput, bindArgsClientInputs, metadata, ctx },
						{
							metadata: { actionName: "test" },
							ctx: { foo: "bar" },
							result: {
								serverError: DEFAULT_SERVER_ERROR_MESSAGE,
							},
							clientInput: inputs[2],
							bindArgsClientInputs: inputs.slice(0, 2),
						}
					);
				},
			}
		);

	await action(...inputs);
	assert.strictEqual(executed, 2);
});

test("action with validation errors calls `onError` and `onSettled` callbacks with correct arguments", async () => {
	let executed = 0;
	const inputs = ["invalid_uuid", -30, { username: "j" }] as const;

	const action = ac
		.schema(z.object({ username: z.string().min(3) }))
		.bindArgsSchemas([z.string().uuid(), z.number().positive()])
		.action(
			async () => {
				return {
					ok: true,
				};
			},
			{
				onSuccess: async () => {
					executed++; // should not be called
				},
				onError: async ({ error, clientInput, bindArgsClientInputs, metadata, ctx }) => {
					executed++;

					assert.deepStrictEqual(
						{ error, clientInput, bindArgsClientInputs, metadata, ctx },
						{
							metadata: { actionName: "test" },
							ctx: { foo: "bar" },
							error: {
								validationErrors: {
									username: {
										_errors: ["String must contain at least 3 character(s)"],
									},
								},
								bindArgsValidationErrors: [
									{
										_errors: ["Invalid uuid"],
									},
									{
										_errors: ["Number must be greater than 0"],
									},
								],
							},
							clientInput: inputs[2],
							bindArgsClientInputs: inputs.slice(0, 2),
						}
					);
				},
				onSettled: async ({ clientInput, bindArgsClientInputs, result, metadata, ctx }) => {
					executed++;

					assert.deepStrictEqual(
						{ result, clientInput, bindArgsClientInputs, metadata, ctx },
						{
							metadata: { actionName: "test" },
							ctx: { foo: "bar" },
							result: {
								validationErrors: {
									username: {
										_errors: ["String must contain at least 3 character(s)"],
									},
								},
								bindArgsValidationErrors: [
									{
										_errors: ["Invalid uuid"],
									},
									{
										_errors: ["Number must be greater than 0"],
									},
								],
							},
							clientInput: inputs[2],
							bindArgsClientInputs: inputs.slice(0, 2),
						}
					);
				},
			}
		);

	await action(...inputs);
	assert.strictEqual(executed, 2);
});

test("action with server validation error calls `onError` and `onSettled` callbacks with correct arguments", async () => {
	let executed = 0;

	const schema = z.object({
		username: z.string(),
	});
	const action = ac.schema(z.object({ username: z.string().min(3) })).action(
		async () => {
			returnValidationErrors(schema, {
				username: {
					_errors: ["Invalid username"],
				},
			});
		},
		{
			onSuccess: async () => {
				executed++; // should not be called
			},
			onError: async ({ error, clientInput, bindArgsClientInputs, metadata, ctx }) => {
				executed++;

				assert.deepStrictEqual(
					{ error, clientInput, bindArgsClientInputs, metadata, ctx },
					{
						metadata: { actionName: "test" },
						ctx: { foo: "bar" },
						error: {
							validationErrors: {
								username: {
									_errors: ["Invalid username"],
								},
							},
						},
						clientInput: { username: "johndoe" },
						bindArgsClientInputs: [],
					}
				);
			},
			onSettled: async ({ clientInput, bindArgsClientInputs, result, metadata, ctx }) => {
				executed++;

				assert.deepStrictEqual(
					{ result, clientInput, bindArgsClientInputs, metadata, ctx },
					{
						metadata: { actionName: "test" },
						ctx: { foo: "bar" },
						result: {
							validationErrors: {
								username: {
									_errors: ["Invalid username"],
								},
							},
						},
						clientInput: { username: "johndoe" },
						bindArgsClientInputs: [],
					}
				);
			},
		}
	);

	await action({ username: "johndoe" });
	assert.strictEqual(executed, 2);
});


================================================
File: /packages/next-safe-action/src/__tests__/server-error.test.ts
================================================
/* eslint-disable @typescript-eslint/no-floating-promises */

import assert from "node:assert";
import { test } from "node:test";
import { DEFAULT_SERVER_ERROR_MESSAGE, createSafeActionClient } from "..";
import { zodAdapter } from "../adapters/zod";

class ActionError extends Error {
	constructor(message: string) {
		super(message);
	}
}

const ac1 = createSafeActionClient({
	validationAdapter: zodAdapter(),
	handleServerError(e) {
		// disable server error logging for these tests
		if (e instanceof ActionError) {
			return e.message;
		}

		return DEFAULT_SERVER_ERROR_MESSAGE;
	},
});

test("unknown error occurred in server code function is masked by default", async () => {
	const action = ac1.action(async () => {
		throw new Error("Something bad happened");
	});

	const actualResult = await action();

	const expectedResult = {
		serverError: DEFAULT_SERVER_ERROR_MESSAGE,
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("unknown error occurred in middleware function is masked by default", async () => {
	const action = ac1
		.use(async ({ next }) => next())
		.use(async () => {
			throw new Error("Something bad happened");
		})
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action();

	const expectedResult = {
		serverError: DEFAULT_SERVER_ERROR_MESSAGE,
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("known error occurred in server code function is unmasked", async () => {
	const action = ac1.action(async () => {
		throw new ActionError("Something bad happened");
	});

	const actualResult = await action();

	const expectedResult = {
		serverError: "Something bad happened",
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("known error occurred in middleware function is unmasked", async () => {
	const action = ac1
		.use(async ({ next }) => next())
		.use(async () => {
			throw new ActionError("Something bad happened");
		})
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action();

	const expectedResult = {
		serverError: "Something bad happened",
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("error occurred with `throwServerError` set to true at the action level throws", async () => {
	const action = ac1.action(
		async () => {
			throw new Error("Something bad happened");
		},
		{ throwServerError: true }
	);

	assert.rejects(async () => await action());
});

// Server error is an object with a 'message' property.
const ac2 = createSafeActionClient({
	validationAdapter: zodAdapter(),
	handleServerError(e) {
		// disable server errors logging for these tests
		return {
			message: e.message,
		};
	},
});

test("error occurred in server code function has the correct shape defined by `handleServerError`", async () => {
	const action = ac2.action(async () => {
		throw new Error("Something bad happened");
	});

	const actualResult = await action();

	const expectedResult = {
		serverError: { message: "Something bad happened" },
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("error occurred in middleware function has the correct shape defined by `handleServerError`", async () => {
	const action = ac2
		.use(async ({ next }) => next())
		.use(async () => {
			throw new Error("Something bad happened");
		})
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action();

	const expectedResult = {
		serverError: { message: "Something bad happened" },
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

// Rethrow all server errors.
const ac3 = createSafeActionClient({
	validationAdapter: zodAdapter(),
	handleServerError(e) {
		// disable server error logging for these tests
		throw e;
	},
});

test("action throws if an error occurred in server code function and `handleServerError` rethrows it", async () => {
	const action = ac3.action(async () => {
		throw new Error("Something bad happened");
	});

	assert.rejects(() => action());
});

test("action throws if an error occurred in middleware function and `handleServerError` rethrows it", async () => {
	const action = ac3
		.use(async ({ next }) => next())
		.use(async () => {
			throw new Error("Something bad happened");
		})
		.action(async () => {
			return {
				ok: true,
			};
		});

	assert.rejects(() => action());
});


================================================
File: /packages/next-safe-action/src/__tests__/bind-args-validation-errors.test.ts
================================================
/* eslint-disable @typescript-eslint/no-floating-promises */

import assert from "node:assert";
import { test } from "node:test";
import { z } from "zod";
import { createSafeActionClient, flattenBindArgsValidationErrors, formatBindArgsValidationErrors } from "..";
import { zodAdapter } from "../adapters/zod";

// Default client tests.

const dac = createSafeActionClient({
	validationAdapter: zodAdapter(),
});

test("action with invalid bind args input gives back an object with correct `bindArgsValidationErrors` (default formatted shape)", async () => {
	const bindArgsSchemas: [age: z.ZodNumber, userId: z.ZodString, product: z.ZodObject<{ id: z.ZodString }>] = [
		z.number().positive(),
		z.string().uuid(),
		z.object({
			id: z.string().uuid(),
		}),
	];

	const action = dac.bindArgsSchemas(bindArgsSchemas).action(async () => {
		return {
			ok: true,
		};
	});

	const actualResult = await action(-123, crypto.randomUUID(), { id: "invalid_uuid" });

	const expectedResult = {
		bindArgsValidationErrors: [
			{
				_errors: ["Number must be greater than 0"],
			},
			{},
			{
				id: {
					_errors: ["Invalid uuid"],
				},
			},
		],
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with invalid bind args input gives back an object with correct `bindArgsValidationErrors` (default formatted shape overridden by custom flattened shape)", async () => {
	const bindArgsSchemas: [age: z.ZodNumber, userId: z.ZodString, product: z.ZodObject<{ id: z.ZodString }>] = [
		z.number().positive(),
		z.string().uuid(),
		z.object({
			id: z.string().uuid(),
		}),
	];

	const action = dac
		.bindArgsSchemas(bindArgsSchemas, {
			handleBindArgsValidationErrorsShape: async (ve) => flattenBindArgsValidationErrors(ve),
		})
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action(-123, crypto.randomUUID(), { id: "invalid_uuid" });

	const expectedResult = {
		bindArgsValidationErrors: [
			{
				formErrors: ["Number must be greater than 0"],
				fieldErrors: {},
			},
			{
				formErrors: [],
				fieldErrors: {},
			},
			{
				formErrors: [],
				fieldErrors: {
					id: ["Invalid uuid"],
				},
			},
		],
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

// Formatted shape tests (same as default).

const foac = createSafeActionClient({
	validationAdapter: zodAdapter(),
	defaultValidationErrorsShape: "formatted",
});

test("action with invalid bind args input gives back an object with correct `bindArgsValidationErrors` (set formatted shape)", async () => {
	const bindArgsSchemas: [age: z.ZodNumber, userId: z.ZodString, product: z.ZodObject<{ id: z.ZodString }>] = [
		z.number().positive(),
		z.string().uuid(),
		z.object({
			id: z.string().uuid(),
		}),
	];

	const action = foac.bindArgsSchemas(bindArgsSchemas).action(async () => {
		return {
			ok: true,
		};
	});

	const actualResult = await action(-123, crypto.randomUUID(), { id: "invalid_uuid" });

	const expectedResult = {
		bindArgsValidationErrors: [
			{
				_errors: ["Number must be greater than 0"],
			},
			{},
			{
				id: {
					_errors: ["Invalid uuid"],
				},
			},
		],
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with invalid bind args input gives back an object with correct `bindArgsValidationErrors` (set formatted shape overridden by custom flattened shape)", async () => {
	const bindArgsSchemas: [age: z.ZodNumber, userId: z.ZodString, product: z.ZodObject<{ id: z.ZodString }>] = [
		z.number().positive(),
		z.string().uuid(),
		z.object({
			id: z.string().uuid(),
		}),
	];

	const action = foac
		.bindArgsSchemas(bindArgsSchemas, {
			handleBindArgsValidationErrorsShape: async (ve) => flattenBindArgsValidationErrors(ve),
		})
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action(-123, crypto.randomUUID(), { id: "invalid_uuid" });

	const expectedResult = {
		bindArgsValidationErrors: [
			{
				formErrors: ["Number must be greater than 0"],
				fieldErrors: {},
			},
			{
				formErrors: [],
				fieldErrors: {},
			},
			{
				formErrors: [],
				fieldErrors: {
					id: ["Invalid uuid"],
				},
			},
		],
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

// Flattened shape tests.

const flac = createSafeActionClient({
	validationAdapter: zodAdapter(),
	defaultValidationErrorsShape: "flattened",
});

test("action with invalid bind args input gives back an object with correct `bindArgsValidationErrors` (set flattened shape)", async () => {
	const bindArgsSchemas: [age: z.ZodNumber, userId: z.ZodString, product: z.ZodObject<{ id: z.ZodString }>] = [
		z.number().positive(),
		z.string().uuid(),
		z.object({
			id: z.string().uuid(),
		}),
	];

	const action = flac.bindArgsSchemas(bindArgsSchemas).action(async () => {
		return {
			ok: true,
		};
	});

	const actualResult = await action(-123, crypto.randomUUID(), { id: "invalid_uuid" });

	const expectedResult = {
		bindArgsValidationErrors: [
			{
				formErrors: ["Number must be greater than 0"],
				fieldErrors: {},
			},
			{
				formErrors: [],
				fieldErrors: {},
			},
			{
				formErrors: [],
				fieldErrors: {
					id: ["Invalid uuid"],
				},
			},
		],
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with invalid bind args input gives back an object with correct `bindArgsValidationErrors` (set flattened shape overridden by custom formatted shape)", async () => {
	const bindArgsSchemas: [age: z.ZodNumber, userId: z.ZodString, product: z.ZodObject<{ id: z.ZodString }>] = [
		z.number().positive(),
		z.string().uuid(),
		z.object({
			id: z.string().uuid(),
		}),
	];

	const action = flac
		.bindArgsSchemas(bindArgsSchemas, {
			handleBindArgsValidationErrorsShape: async (ve) => formatBindArgsValidationErrors(ve),
		})
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action(-123, crypto.randomUUID(), { id: "invalid_uuid" });

	const expectedResult = {
		bindArgsValidationErrors: [
			{
				_errors: ["Number must be greater than 0"],
			},
			{},
			{
				id: {
					_errors: ["Invalid uuid"],
				},
			},
		],
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});


================================================
File: /packages/next-safe-action/src/__tests__/combined-validation-errors.test.ts
================================================
/* eslint-disable @typescript-eslint/no-floating-promises */

import assert from "node:assert";
import { test } from "node:test";
import { z } from "zod";
import {
	createSafeActionClient,
	flattenBindArgsValidationErrors,
	flattenValidationErrors,
	formatBindArgsValidationErrors,
	formatValidationErrors,
} from "..";
import { zodAdapter } from "../adapters/zod";

// Default client tests.

const dac = createSafeActionClient({
	validationAdapter: zodAdapter(),
});

test("action with invalid bind args input and valid main input gives back an object with correct `bindArgsValidationErrors` (default formatted shape)", async () => {
	const schema = z.object({
		username: z.string().min(3),
	});

	const bindArgsSchemas: [age: z.ZodNumber, userId: z.ZodString, product: z.ZodObject<{ id: z.ZodString }>] = [
		z.number().positive(),
		z.string().uuid(),
		z.object({
			id: z.string().uuid(),
		}),
	];

	const action = dac
		.schema(schema)
		.bindArgsSchemas(bindArgsSchemas)
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action(-123, crypto.randomUUID(), { id: "invalid_uuid" }, { username: "johndoe" });

	const expectedResult = {
		bindArgsValidationErrors: [
			{
				_errors: ["Number must be greater than 0"],
			},
			{},
			{
				id: {
					_errors: ["Invalid uuid"],
				},
			},
		],
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with invalid bind args input and invalid main input gives back an object with correct `validationErrors` and `bindArgsValidationErrors` (default formatted shape overridden by custom bind args errors flattened shape)", async () => {
	const schema = z.object({
		username: z.string().min(3),
	});

	const bindArgsSchemas: [age: z.ZodNumber, userId: z.ZodString, product: z.ZodObject<{ id: z.ZodString }>] = [
		z.number().positive(),
		z.string().uuid(),
		z.object({
			id: z.string().uuid(),
		}),
	];

	const action = dac
		.schema(schema)
		.bindArgsSchemas(bindArgsSchemas, {
			handleBindArgsValidationErrorsShape: async (ve) => flattenBindArgsValidationErrors(ve),
		})
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action(-123, crypto.randomUUID(), { id: "invalid_uuid" }, { username: "" });

	const expectedResult = {
		validationErrors: {
			username: {
				_errors: ["String must contain at least 3 character(s)"],
			},
		},
		bindArgsValidationErrors: [
			{
				formErrors: ["Number must be greater than 0"],
				fieldErrors: {},
			},
			{
				formErrors: [],
				fieldErrors: {},
			},
			{
				formErrors: [],
				fieldErrors: {
					id: ["Invalid uuid"],
				},
			},
		],
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

// Formatted shape tests (same as default).

const foac = createSafeActionClient({
	validationAdapter: zodAdapter(),
	defaultValidationErrorsShape: "formatted",
});

test("action with invalid bind args input and invalid main input gives back an object with correct `validationErrors` and `bindArgsValidationErrors` (set formatted shape overridden by custom main input flattened shape)", async () => {
	const schema = z.object({
		username: z.string().min(3),
	});

	const bindArgsSchemas: [age: z.ZodNumber, userId: z.ZodString, product: z.ZodObject<{ id: z.ZodString }>] = [
		z.number().positive(),
		z.string().uuid(),
		z.object({
			id: z.string().uuid(),
		}),
	];

	const action = foac
		.schema(schema, { handleValidationErrorsShape: async (ve) => flattenValidationErrors(ve) })
		.bindArgsSchemas(bindArgsSchemas)
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action(-123, crypto.randomUUID(), { id: "invalid_uuid" }, { username: "" });

	const expectedResult = {
		validationErrors: {
			formErrors: [],
			fieldErrors: {
				username: ["String must contain at least 3 character(s)"],
			},
		},
		bindArgsValidationErrors: [
			{
				_errors: ["Number must be greater than 0"],
			},
			{},
			{
				id: {
					_errors: ["Invalid uuid"],
				},
			},
		],
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with invalid bind args input and valid main input gives back an object with correct `bindArgsValidationErrors` (set formatted shape overridden by custom bind args flattened shape)", async () => {
	const schema = z.object({
		username: z.string().min(3),
	});

	const bindArgsSchemas: [age: z.ZodNumber, userId: z.ZodString, product: z.ZodObject<{ id: z.ZodString }>] = [
		z.number().positive(),
		z.string().uuid(),
		z.object({
			id: z.string().uuid(),
		}),
	];

	const action = foac
		.schema(schema)
		.bindArgsSchemas(bindArgsSchemas, {
			handleBindArgsValidationErrorsShape: async (ve) => flattenBindArgsValidationErrors(ve),
		})
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action(-123, crypto.randomUUID(), { id: "invalid_uuid" }, { username: "johndoe" });

	const expectedResult = {
		bindArgsValidationErrors: [
			{
				formErrors: ["Number must be greater than 0"],
				fieldErrors: {},
			},
			{
				formErrors: [],
				fieldErrors: {},
			},
			{
				formErrors: [],
				fieldErrors: {
					id: ["Invalid uuid"],
				},
			},
		],
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

// Flattened shape tests.

const flac = createSafeActionClient({
	validationAdapter: zodAdapter(),
	defaultValidationErrorsShape: "flattened",
});

test("action with invalid bind args input and invalid main input gives back an object with correct `bindArgsValidationErrors` (set flattened shape)", async () => {
	const schema = z.object({
		username: z.string().min(3),
	});

	const bindArgsSchemas: [age: z.ZodNumber, userId: z.ZodString, product: z.ZodObject<{ id: z.ZodString }>] = [
		z.number().positive(),
		z.string().uuid(),
		z.object({
			id: z.string().uuid(),
		}),
	];

	const action = flac
		.schema(schema)
		.bindArgsSchemas(bindArgsSchemas)
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action(-123, crypto.randomUUID(), { id: "invalid_uuid" }, { username: "" });

	const expectedResult = {
		validationErrors: {
			formErrors: [],
			fieldErrors: {
				username: ["String must contain at least 3 character(s)"],
			},
		},
		bindArgsValidationErrors: [
			{
				formErrors: ["Number must be greater than 0"],
				fieldErrors: {},
			},
			{
				formErrors: [],
				fieldErrors: {},
			},
			{
				formErrors: [],
				fieldErrors: {
					id: ["Invalid uuid"],
				},
			},
		],
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with invalid bind args input, invalid main input and root level schema error gives back an object with correct `bindArgsValidationErrors` (set flattened shape overridden by custom formatted shape)", async () => {
	const schema = z
		.object({
			username: z.string().min(3),
		})
		.refine(() => false, {
			message: "Root schema error",
		});

	const bindArgsSchemas: [age: z.ZodNumber, userId: z.ZodString, product: z.ZodObject<{ id: z.ZodString }>] = [
		z.number().positive(),
		z.string().uuid(),
		z.object({
			id: z.string().uuid(),
		}),
	];

	const action = flac
		.schema(schema, { handleValidationErrorsShape: async (ve) => formatValidationErrors(ve) })
		.bindArgsSchemas(bindArgsSchemas, {
			handleBindArgsValidationErrorsShape: async (ve) => formatBindArgsValidationErrors(ve),
		})
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action(-123, crypto.randomUUID(), { id: "invalid_uuid" }, { username: "" });

	const expectedResult = {
		validationErrors: {
			_errors: ["Root schema error"],
			username: {
				_errors: ["String must contain at least 3 character(s)"],
			},
		},
		bindArgsValidationErrors: [
			{
				_errors: ["Number must be greater than 0"],
			},
			{},
			{
				id: {
					_errors: ["Invalid uuid"],
				},
			},
		],
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});


================================================
File: /packages/next-safe-action/src/__tests__/validation-errors.test.ts
================================================
/* eslint-disable @typescript-eslint/no-floating-promises */

import assert from "node:assert";
import { test } from "node:test";
import { z } from "zod";
import type { ValidationErrors } from "..";
import {
	createSafeActionClient,
	DEFAULT_SERVER_ERROR_MESSAGE,
	flattenValidationErrors,
	formatValidationErrors,
	returnValidationErrors,
} from "..";
import { zodAdapter } from "../adapters/zod";
import { ActionOutputDataValidationError } from "../validation-errors";

// Default client tests.

const dac = createSafeActionClient({
	validationAdapter: zodAdapter(),
});

test("action with invalid input gives back an object with correct `validationErrors` (default formatted shape)", async () => {
	const schema = z.object({
		user: z.object({
			id: z.string().min(36).uuid(),
		}),
		store: z.object({
			id: z.string().min(36).uuid(),
			product: z.object({
				id: z.string().min(36).uuid(),
			}),
		}),
	});

	const action = dac.schema(schema).action(async () => {
		return {
			ok: true,
		};
	});

	const actualResult = await action({
		user: {
			id: "invalid_uuid",
		},
		store: {
			id: "invalid_uuid",
			product: {
				id: "invalid_uuid",
			},
		},
	});

	const expectedResult = {
		validationErrors: {
			user: {
				id: {
					_errors: ["String must contain at least 36 character(s)", "Invalid uuid"],
				},
			},
			store: {
				id: {
					_errors: ["String must contain at least 36 character(s)", "Invalid uuid"],
				},
				product: {
					id: {
						_errors: ["String must contain at least 36 character(s)", "Invalid uuid"],
					},
				},
			},
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with root level schema error gives back an object with correct `validationErrors` (default formatted shape)", async () => {
	const userId = "invalid_uuid";

	// Test with async function that returns the schema.
	async function getSchema() {
		return z
			.object({
				userId: z.string().min(36).uuid(),
				password: z.string(),
				confirmPassword: z.string(),
			})
			.refine((d) => d.password === d.confirmPassword, {
				message: "Passwords do not match",
			});
	}

	const action = dac.schema(getSchema).action(async () => {
		return {
			ok: true,
		};
	});

	const actualResult = await action({
		userId,
		password: "test123",
		confirmPassword: "test456",
	});

	const expectedResult = {
		validationErrors: {
			_errors: ["Passwords do not match"],
			userId: {
				_errors: ["String must contain at least 36 character(s)", "Invalid uuid"],
			},
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with invalid input gives back an object with correct `validationErrors` (default formatted shape overridden by custom flattened shape)", async () => {
	const schema = z
		.object({
			userId: z.string().min(36).uuid(),
			storeId: z.string().min(36).uuid(),
		})
		.refine((d) => d.userId !== d.storeId, {
			message: "User id and store id cannot be the same",
		});

	const action = dac
		.schema(schema, {
			handleValidationErrorsShape: async (ve) => flattenValidationErrors(ve),
		})
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action({
		userId: "invalid_uuid",
		storeId: "invalid_uuid",
	});

	const expectedResult = {
		validationErrors: {
			formErrors: ["User id and store id cannot be the same"],
			fieldErrors: {
				userId: ["String must contain at least 36 character(s)", "Invalid uuid"],
				storeId: ["String must contain at least 36 character(s)", "Invalid uuid"],
			},
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with invalid output data returns the default `serverError`", async () => {
	const action = dac.outputSchema(z.object({ result: z.string().min(3) })).action(async () => {
		return {
			result: "ok",
		};
	});

	const actualResult = await action();

	const expectedResult = {
		serverError: DEFAULT_SERVER_ERROR_MESSAGE,
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with invalid output data throws an error of the correct type", async () => {
	const tac = createSafeActionClient({
		validationAdapter: zodAdapter(),
		handleServerError: (e) => {
			// disable server error logging for this test
			throw e;
		},
	});

	const outputSchema = z.object({ result: z.string().min(3) });

	const action = tac.outputSchema(outputSchema).action(async () => {
		return {
			result: "ok",
		};
	});

	const expectedResult = {
		serverError: "String must contain at least 3 character(s)",
	};

	const actualResult = {
		serverError: "",
	};

	try {
		await action();
	} catch (e) {
		if (e instanceof ActionOutputDataValidationError) {
			actualResult.serverError =
				(e.validationErrors as ValidationErrors<typeof outputSchema>).result?._errors?.[0] ?? "";
		}
	}

	assert.deepStrictEqual(actualResult, expectedResult);
});

// Formatted shape tests (same as default).

const foac = createSafeActionClient({
	validationAdapter: zodAdapter(),
	defaultValidationErrorsShape: "formatted",
});

test("action with invalid input gives back an object with correct `validationErrors` (set formatted shape)", async () => {
	const schema = z.object({
		user: z.object({
			id: z.string().min(36).uuid(),
		}),
		store: z.object({
			id: z.string().min(36).uuid(),
			product: z.object({
				id: z.string().min(36).uuid(),
			}),
		}),
	});

	const action = foac.schema(schema).action(async () => {
		return {
			ok: true,
		};
	});

	const actualResult = await action({
		user: {
			id: "invalid_uuid",
		},
		store: {
			id: "invalid_uuid",
			product: {
				id: "invalid_uuid",
			},
		},
	});

	const expectedResult = {
		validationErrors: {
			user: {
				id: {
					_errors: ["String must contain at least 36 character(s)", "Invalid uuid"],
				},
			},
			store: {
				id: {
					_errors: ["String must contain at least 36 character(s)", "Invalid uuid"],
				},
				product: {
					id: {
						_errors: ["String must contain at least 36 character(s)", "Invalid uuid"],
					},
				},
			},
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with root level schema error gives back an object with correct `validationErrors` (set formatted shape)", async () => {
	const userId = "invalid_uuid";

	const schema = z
		.object({
			userId: z.string().uuid(),
			password: z.string(),
			confirmPassword: z.string(),
		})
		.refine((d) => d.password === d.confirmPassword, {
			message: "Passwords do not match",
		})
		.refine((d) => d.userId === "488d92e3-d394-4db8-b7c0-7b38c85280c1", {
			message: "UUID mismatch",
		});

	const action = foac.schema(schema).action(async () => {
		return {
			ok: true,
		};
	});

	const actualResult = await action({
		userId,
		password: "test123",
		confirmPassword: "test456",
	});

	const expectedResult = {
		validationErrors: {
			_errors: ["Passwords do not match", "UUID mismatch"],
			userId: {
				_errors: ["Invalid uuid"],
			},
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with invalid input gives back an object with correct `validationErrors` (set formatted shape overridden by custom flattened shape)", async () => {
	const schema = z
		.object({
			userId: z.string().min(36).uuid(),
			storeId: z.string().min(36).uuid(),
		})
		.refine((d) => d.userId !== d.storeId, {
			message: "User id and store id cannot be the same",
		});

	const action = foac
		.schema(schema, {
			handleValidationErrorsShape: async (ve) => flattenValidationErrors(ve),
		})
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action({
		userId: "invalid_uuid",
		storeId: "invalid_uuid",
	});

	const expectedResult = {
		validationErrors: {
			formErrors: ["User id and store id cannot be the same"],
			fieldErrors: {
				userId: ["String must contain at least 36 character(s)", "Invalid uuid"],
				storeId: ["String must contain at least 36 character(s)", "Invalid uuid"],
			},
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

// Flattened shape tests.

const flac = createSafeActionClient({
	validationAdapter: zodAdapter(),
	defaultValidationErrorsShape: "flattened",
});

test("action with invalid input gives back an object with correct `validationErrors` (set flattened shape)", async () => {
	const schema = z.object({
		userId: z.string().min(36).uuid(),
		storeId: z.string().min(36).uuid(),
		store: z.object({
			product: z.object({
				id: z.string().uuid(),
			}),
		}),
	});

	const action = flac.schema(schema).action(async () => {
		return {
			ok: true,
		};
	});

	const actualResult = await action({
		userId: "invalid_uuid",
		storeId: "invalid_uuid",
		store: {
			product: {
				id: "invalid_uuid",
			},
		},
	});

	// Flattened shape discards errors for nested properties.
	const expectedResult = {
		validationErrors: {
			formErrors: [],
			fieldErrors: {
				userId: ["String must contain at least 36 character(s)", "Invalid uuid"],
				storeId: ["String must contain at least 36 character(s)", "Invalid uuid"],
			},
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with root level schema error gives back an object with correct `validationErrors` (set flattened shape)", async () => {
	const schema = z
		.object({
			userId: z.string().min(36).uuid(),
			storeId: z.string().min(36).uuid(),
			store: z.object({
				product: z.object({
					id: z.string().uuid(),
				}),
			}),
		})
		.refine((d) => d.userId !== d.storeId, {
			message: "User and store IDs must be different",
		})
		.refine((d) => d.userId !== d.storeId, {
			message: "Another cool global error",
		});

	const action = flac.schema(schema).action(async () => {
		return {
			ok: true,
		};
	});

	const actualResult = await action({
		userId: "invalid_uuid",
		storeId: "invalid_uuid",
		store: {
			product: {
				id: "invalid_uuid",
			},
		},
	});

	// Flattened shape discards errors for nested properties.
	const expectedResult = {
		validationErrors: {
			formErrors: ["User and store IDs must be different", "Another cool global error"],
			fieldErrors: {
				userId: ["String must contain at least 36 character(s)", "Invalid uuid"],
				storeId: ["String must contain at least 36 character(s)", "Invalid uuid"],
			},
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with invalid input gives back an object with correct `validationErrors` (set flattened shape overridden by custom formatted shape)", async () => {
	const schema = z
		.object({
			userId: z.string().min(36).uuid(),
			storeId: z.string().min(36).uuid(),
		})
		.refine((d) => d.userId !== d.storeId, {
			message: "User id and store id cannot be the same",
		});

	const action = flac
		.schema(schema, {
			handleValidationErrorsShape: async (ve) => formatValidationErrors(ve),
		})
		.action(async () => {
			return {
				ok: true,
			};
		});

	const actualResult = await action({
		userId: "invalid_uuid",
		storeId: "invalid_uuid",
	});

	const expectedResult = {
		validationErrors: {
			_errors: ["User id and store id cannot be the same"],
			userId: {
				_errors: ["String must contain at least 36 character(s)", "Invalid uuid"],
			},
			storeId: {
				_errors: ["String must contain at least 36 character(s)", "Invalid uuid"],
			},
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

// `returnValidationErrors` tests.

test("action with errors set via `returnValidationErrors` gives back an object with correct `validationErrors` (default formatted shape)", async () => {
	const schema = z.object({
		username: z.string(),
		password: z.string(),
	});

	const errorsObject = {
		_errors: ["incorrect_credentials", "another_error"],
		username: {
			_errors: ["user_suspended"],
		},
		password: {
			_errors: ["invalid_password"],
		},
	};

	const action = dac.schema(schema).action(async ({ parsedInput }) => {
		if (parsedInput.username !== "johndoe" && parsedInput.password !== "password") {
			returnValidationErrors(schema, structuredClone(errorsObject));
		}

		return {
			ok: true,
		};
	});

	const actualResult = await action({
		username: "123",
		password: "456",
	});

	const expectedResult = {
		validationErrors: structuredClone(errorsObject),
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with errors set via `returnValidationErrors` gives back an object with correct `validationErrors` (set formatted shape)", async () => {
	const schema = z.object({
		username: z.string(),
		password: z.string(),
	});

	const errorsObject = {
		_errors: ["incorrect_credentials", "another_error"],
		username: {
			_errors: ["user_suspended"],
		},
		password: {
			_errors: ["invalid_password"],
		},
	};

	const action = foac.schema(schema).action(async ({ parsedInput }) => {
		if (parsedInput.username !== "johndoe" && parsedInput.password !== "password") {
			returnValidationErrors(schema, structuredClone(errorsObject));
		}

		return {
			ok: true,
		};
	});

	const actualResult = await action({
		username: "123",
		password: "456",
	});

	const expectedResult = {
		validationErrors: structuredClone(errorsObject),
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action with errors set via `returnValidationErrors` gives back an object with correct `validationErrors` (set flattened shape)", async () => {
	const schema = z.object({
		username: z.string(),
		password: z.string(),
	});

	const action = flac.schema(schema).action(async ({ parsedInput }) => {
		if (parsedInput.username !== "johndoe" && parsedInput.password !== "password") {
			returnValidationErrors(schema, {
				_errors: ["incorrect_credentials", "another_error"],
				username: {
					_errors: ["user_suspended"],
				},
				password: {
					_errors: ["invalid_password"],
				},
			});
		}

		return {
			ok: true,
		};
	});

	const actualResult = await action({
		username: "123",
		password: "456",
	});

	const expectedResult = {
		validationErrors: {
			formErrors: ["incorrect_credentials", "another_error"],
			fieldErrors: {
				username: ["user_suspended"],
				password: ["invalid_password"],
			},
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

// `throwValidationErrors` tests.

// test without `throwValidationErrors` set at the instance level, just set at the action level.
test("action with validation errors and `throwValidationErrors` option set to true at the action level throws", async () => {
	const schema = z.object({
		username: z.string().min(3),
		password: z.string().min(3),
	});

	const action = dac.schema(schema).action(
		async () => {
			return {
				ok: true,
			};
		},
		{ throwValidationErrors: true }
	);

	assert.rejects(async () => await action({ username: "12", password: "34" }));
});

const tveac = createSafeActionClient({
	validationAdapter: zodAdapter(),
	throwValidationErrors: true,
});

test("action with validation errors and `throwValidationErrors` option set to true in client throws", async () => {
	const schema = z.object({
		username: z.string().min(3),
		password: z.string().min(3),
	});

	const action = tveac.schema(schema).action(async () => {
		return {
			ok: true,
		};
	});

	assert.rejects(async () => await action({ username: "12", password: "34" }));
});

test("action with server validation errors and `throwValidationErrors` option set to true in client throws", async () => {
	const schema = z.object({
		username: z.string().min(3),
		password: z.string().min(3),
	});

	const action = tveac.schema(schema).action(async () => {
		returnValidationErrors(schema, {
			username: {
				_errors: ["user_suspended"],
			},
		});
		return {
			ok: true,
		};
	});

	assert.rejects(async () => await action({ username: "1234", password: "5678" }));
});

test("action with validation errors and `throwValidationErrors` option set to true both in client and action throws", async () => {
	const schema = z.object({
		username: z.string().min(3),
		password: z.string().min(3),
	});

	const action = tveac.schema(schema).action(
		async () => {
			return {
				ok: true,
			};
		},
		{ throwValidationErrors: true }
	);

	assert.rejects(async () => await action({ username: "12", password: "34" }));
});

test("action with validation errors and overridden `throwValidationErrors` set to false at the action level doesn't throw", async () => {
	const schema = z.object({
		user: z.object({
			id: z.string().min(36).uuid(),
		}),
		store: z.object({
			id: z.string().min(36).uuid(),
			product: z.object({
				id: z.string().min(36).uuid(),
			}),
		}),
	});

	const action = tveac.schema(schema).action(
		async () => {
			return {
				ok: true,
			};
		},
		{ throwValidationErrors: false }
	);

	const actualResult = await action({
		user: {
			id: "invalid_uuid",
		},
		store: {
			id: "invalid_uuid",
			product: {
				id: "invalid_uuid",
			},
		},
	});

	const expectedResult = {
		validationErrors: {
			user: {
				id: {
					_errors: ["String must contain at least 36 character(s)", "Invalid uuid"],
				},
			},
			store: {
				id: {
					_errors: ["String must contain at least 36 character(s)", "Invalid uuid"],
				},
				product: {
					id: {
						_errors: ["String must contain at least 36 character(s)", "Invalid uuid"],
					},
				},
			},
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});


================================================
File: /packages/next-safe-action/src/__tests__/metadata.test.ts
================================================
/* eslint-disable @typescript-eslint/no-floating-promises */

import assert from "node:assert";
import { test } from "node:test";
import { z } from "zod";
import { DEFAULT_SERVER_ERROR_MESSAGE, createSafeActionClient } from "..";
import { zodAdapter } from "../adapters/zod";

const ac = createSafeActionClient({
	validationAdapter: zodAdapter(),
	handleServerError: () => DEFAULT_SERVER_ERROR_MESSAGE, // disable server errors logging for these tests
	defineMetadataSchema() {
		return z.object({
			actionName: z.string(),
		});
	},
});

test("action with expected metadata format works", async () => {
	const md = { actionName: "testAction" };
	const action = ac.metadata(md).action(async ({ metadata }) => {
		return {
			metadata,
		};
	});

	const actualResult = await action();
	const expectedResult = {
		data: {
			metadata: md,
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("action without expected metadata returns server error", async () => {
	const action = ac.action(async ({ metadata }) => {
		return {
			metadata,
		};
	});

	const actualResult = await action();
	const expectedResult = {
		serverError: DEFAULT_SERVER_ERROR_MESSAGE,
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});

test("metadata is passed to middleware functions and server code function", async () => {
	const md = { actionName: "testAction" };

	const action = ac
		.use(async ({ metadata, next }) => {
			return next({ ctx: { md1: metadata } });
		})
		.use(async ({ metadata, next, ctx }) => {
			return next({ ctx: { ...ctx, md2: metadata } });
		})
		.metadata(md)
		.action(async ({ metadata: md3, ctx: { md1, md2 } }) => {
			return {
				md1,
				md2,
				md3,
			};
		});

	const actualResult = await action();

	const expectedResult = {
		data: {
			md1: md,
			md2: md,
			md3: md,
		},
	};

	assert.deepStrictEqual(actualResult, expectedResult);
});


================================================
File: /packages/next-safe-action/src/hooks.types.ts
================================================
import type { InferIn, Schema } from "./adapters/types";
import type { SafeActionFn, SafeActionResult, SafeStateActionFn } from "./index.types";
import type { MaybePromise, Prettify } from "./utils.types";

/**
 * Type of base utils object passed to `useAction`, `useOptimisticAction` and `useStateAction` hooks.
 */
export type HookBaseUtils<S extends Schema | undefined> = {
	/**
	 * @deprecated Actions should not execute on component mount, since they're used to mutate data.
	 */
	executeOnMount?: (undefined extends S
		? { input?: undefined }
		: {
				input: S extends Schema ? InferIn<S> : undefined;
			}) & { delayMs?: number };
};

/**
 * Type of hooks callbacks. These are executed when action is in a specific state.
 */
export type HookCallbacks<
	ServerError,
	S extends Schema | undefined,
	BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
> = {
	onExecute?: (args: { input: S extends Schema ? InferIn<S> : undefined }) => MaybePromise<unknown>;
	onSuccess?: (args: { data?: Data; input: S extends Schema ? InferIn<S> : undefined }) => MaybePromise<unknown>;
	onError?: (args: {
		error: Prettify<Omit<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>, "data">>;
		input: S extends Schema ? InferIn<S> : undefined;
	}) => MaybePromise<unknown>;
	onSettled?: (args: {
		result: Prettify<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>>;
		input: S extends Schema ? InferIn<S> : undefined;
	}) => MaybePromise<unknown>;
};

/**
 * Type of the safe action function passed to hooks. Same as `SafeActionFn` except it accepts
 * just a single input, without bind arguments.
 */
export type HookSafeActionFn<
	ServerError,
	S extends Schema | undefined,
	BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
> = (
	input: S extends Schema ? InferIn<S> : undefined
) => Promise<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data> | undefined>;

/**
 * Type of the stateful safe action function passed to hooks. Same as `SafeStateActionFn` except it accepts
 * just a single input, without bind arguments.
 */
export type HookSafeStateActionFn<
	ServerError,
	S extends Schema | undefined,
	BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
> = (
	prevResult: SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>,
	input: S extends Schema ? InferIn<S> : undefined
) => Promise<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>>;

/**
 * Type of the action status returned by `useAction`, `useOptimisticAction` and `useStateAction` hooks.
 */
export type HookActionStatus = "idle" | "executing" | "hasSucceeded" | "hasErrored";

/**
 * Type of the shorthand status object returned by `useAction`, `useOptimisticAction` and `useStateAction` hooks.
 */
export type HookShorthandStatus = {
	isIdle: boolean;
	isExecuting: boolean;
	isTransitioning: boolean;
	isPending: boolean;
	hasSucceeded: boolean;
	hasErrored: boolean;
};

/**
 * Type of the return object of the `useAction` hook.
 */
export type UseActionHookReturn<
	ServerError,
	S extends Schema | undefined,
	BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
> = {
	execute: (input: S extends Schema ? InferIn<S> : void) => void;
	executeAsync: (
		input: S extends Schema ? InferIn<S> : void
	) => Promise<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data> | undefined>;
	input: S extends Schema ? InferIn<S> : undefined;
	result: Prettify<SafeActionResult<ServerError, S, BAS, CVE, CBAVE, Data>>;
	reset: () => void;
	status: HookActionStatus;
} & HookShorthandStatus;

/**
 * Type of the return object of the `useOptimisticAction` hook.
 */
export type UseOptimisticActionHookReturn<
	ServerError,
	S extends Schema | undefined,
	BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
	State,
> = UseActionHookReturn<ServerError, S, BAS, CVE, CBAVE, Data> &
	HookShorthandStatus & {
		optimisticState: State;
	};

/**
 * Type of the return object of the `useStateAction` hook.
 */
export type UseStateActionHookReturn<
	ServerError,
	S extends Schema | undefined,
	BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
> = Omit<UseActionHookReturn<ServerError, S, BAS, CVE, CBAVE, Data>, "executeAsync" | "reset"> & HookShorthandStatus;

/**
 * Type of the return object of the `useAction` hook.
 */
export type InferUseActionHookReturn<T extends Function> =
	T extends SafeActionFn<
		infer ServerError,
		infer S extends Schema | undefined,
		infer BAS extends readonly Schema[],
		infer CVE,
		infer CBAVE,
		infer Data
	>
		? UseActionHookReturn<ServerError, S, BAS, CVE, CBAVE, Data>
		: never;

/**
 * Type of the return object of the `useOptimisticAction` hook.
 */
export type InferUseOptimisticActionHookReturn<T extends Function, State = any> =
	T extends SafeActionFn<
		infer ServerError,
		infer S extends Schema | undefined,
		infer BAS extends readonly Schema[],
		infer CVE,
		infer CBAVE,
		infer Data
	>
		? UseOptimisticActionHookReturn<ServerError, S, BAS, CVE, CBAVE, Data, State>
		: never;

/**
 * Type of the return object of the `useStateAction` hook.
 */
export type InferUseStateActionHookReturn<T extends Function> =
	T extends SafeStateActionFn<
		infer ServerError,
		infer S extends Schema | undefined,
		infer BAS extends readonly Schema[],
		infer CVE,
		infer CBAVE,
		infer Data
	>
		? UseStateActionHookReturn<ServerError, S, BAS, CVE, CBAVE, Data>
		: never;


================================================
File: /packages/next-safe-action/src/stateful-hooks.ts
================================================
"use client";

import * as React from "react";
import {} from "react/experimental";
import type {} from "zod";
import type { InferIn, Schema } from "./adapters/types";
import { getActionShorthandStatusObject, getActionStatus, useActionCallbacks, useExecuteOnMount } from "./hooks-utils";
import type { HookBaseUtils, HookCallbacks, HookSafeStateActionFn, UseStateActionHookReturn } from "./hooks.types";
/**
 * Use the stateful action from a Client Component via hook. Used for actions defined with [`stateAction`](https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction).
 * @param safeActionFn The action function
 * @param utils Optional `initResult`, `permalink`, base utils and callbacks
 *
 * {@link https://next-safe-action.dev/docs/execute-actions/hooks/usestateaction See docs for more information}
 */
export const useStateAction = <
	ServerError,
	S extends Schema | undefined,
	const BAS extends readonly Schema[],
	CVE,
	CBAVE,
	Data,
>(
	safeActionFn: HookSafeStateActionFn<ServerError, S, BAS, CVE, CBAVE, Data>,
	utils?: {
		initResult?: Awaited<ReturnType<typeof safeActionFn>>;
		permalink?: string;
	} & HookBaseUtils<S> &
		HookCallbacks<ServerError, S, BAS, CVE, CBAVE, Data>
): UseStateActionHookReturn<ServerError, S, BAS, CVE, CBAVE, Data> => {
	const [result, dispatcher, isExecuting] = React.useActionState(
		safeActionFn,
		utils?.initResult ?? {},
		utils?.permalink
	);
	const [isIdle, setIsIdle] = React.useState(true);
	const [isTransitioning, startTransition] = React.useTransition();
	const [clientInput, setClientInput] = React.useState<S extends Schema ? InferIn<S> : void>();
	const status = getActionStatus<ServerError, S, BAS, CVE, CBAVE, Data>({
		isExecuting,
		result: result ?? {},
		isIdle,
	});

	const execute = React.useCallback(
		(input: S extends Schema ? InferIn<S> : void) => {
			setTimeout(() => {
				setIsIdle(false);
				setClientInput(input);
			}, 0);

			startTransition(() => {
				dispatcher(input as S extends Schema ? InferIn<S> : undefined);
			});
		},
		[dispatcher]
	);

	useExecuteOnMount({
		executeOnMount: utils?.executeOnMount,
		executeFn: execute,
	});

	useActionCallbacks({
		result: result ?? {},
		input: clientInput as S extends Schema ? InferIn<S> : undefined,
		status,
		cb: {
			onExecute: utils?.onExecute,
			onSuccess: utils?.onSuccess,
			onError: utils?.onError,
			onSettled: utils?.onSettled,
		},
	});

	return {
		execute,
		input: clientInput as S extends Schema ? InferIn<S> : undefined,
		result,
		status,
		...getActionShorthandStatusObject({ status, isTransitioning }),
	};
};


================================================
File: /packages/next-safe-action/src/adapters/types.ts
================================================
// Code inspired by https://github.com/decs/typeschema

import type { Static, TSchema } from "@sinclair/typebox";
import type { GenericSchema, GenericSchemaAsync, InferInput, InferOutput } from "valibot";
import type { InferType, Schema as YupSchema } from "yup";
import type { z } from "zod";

export type IfInstalled<T> = any extends T ? never : T;

export type Schema =
	| IfInstalled<z.ZodType>
	| IfInstalled<GenericSchema>
	| IfInstalled<GenericSchemaAsync>
	| IfInstalled<YupSchema>
	| IfInstalled<TSchema>;

export type Infer<S extends Schema> =
	S extends IfInstalled<z.ZodType>
		? z.infer<S>
		: S extends IfInstalled<GenericSchema>
			? InferOutput<S>
			: S extends IfInstalled<GenericSchemaAsync>
				? InferOutput<S>
				: S extends IfInstalled<YupSchema>
					? InferType<S>
					: S extends IfInstalled<TSchema>
						? Static<S>
						: never;

export type InferIn<S extends Schema> =
	S extends IfInstalled<z.ZodType>
		? z.input<S>
		: S extends IfInstalled<GenericSchema>
			? InferInput<S>
			: S extends IfInstalled<GenericSchemaAsync>
				? InferInput<S>
				: S extends IfInstalled<YupSchema>
					? InferType<S>
					: S extends IfInstalled<TSchema>
						? Static<S>
						: never;

export type InferArray<BAS extends readonly Schema[]> = {
	[K in keyof BAS]: Infer<BAS[K]>;
};
export type InferInArray<BAS extends readonly Schema[]> = {
	[K in keyof BAS]: InferIn<BAS[K]>;
};

export type ValidationIssue = {
	message: string;
	path?: Array<string | number | symbol>;
};

export interface ValidationAdapter {
	// generic
	validate<S extends Schema>(
		schema: S,
		data: unknown
	): Promise<{ success: true; data: Infer<S> } | { success: false; issues: ValidationIssue[] }>;
	// zod
	validate<S extends IfInstalled<z.ZodType>>(
		schema: S,
		data: unknown
	): Promise<{ success: true; data: Infer<S> } | { success: false; issues: ValidationIssue[] }>;
	// valibot
	validate<S extends IfInstalled<GenericSchema>>(
		schema: S,
		data: unknown
	): Promise<{ success: true; data: Infer<S> } | { success: false; issues: ValidationIssue[] }>;
	validate<S extends IfInstalled<GenericSchemaAsync>>(
		schema: S,
		data: unknown
	): Promise<{ success: true; data: Infer<S> } | { success: false; issues: ValidationIssue[] }>;
	// yup
	validate<S extends IfInstalled<YupSchema>>(
		schema: S,
		data: unknown
	): Promise<{ success: true; data: Infer<S> } | { success: false; issues: ValidationIssue[] }>;
	// typebox
	validate<S extends IfInstalled<TSchema>>(
		schema: S,
		data: unknown
	): Promise<{ success: true; data: Infer<S> } | { success: false; issues: ValidationIssue[] }>;
}


================================================
File: /packages/next-safe-action/src/adapters/yup.ts
================================================
// Code based on https://github.com/decs/typeschema/blob/main/packages/yup/src/validation.ts

// MIT License

// Copyright (c) 2023 André Costa

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import type { Schema as YupSchema } from "yup";
import { ValidationError } from "yup";
import type { IfInstalled, Infer, ValidationAdapter, ValidationIssue } from "./types";

class YupAdapter implements ValidationAdapter {
	async validate<S extends IfInstalled<YupSchema>>(schema: S, data: unknown) {
		try {
			const result = await schema.validate(data, { strict: true });

			return {
				success: true,
				data: result as Infer<S>,
			} as const;
		} catch (e) {
			if (e instanceof ValidationError) {
				const { message, path } = e;

				return {
					success: false,
					issues: [
						{
							message,
							path: path && path.length > 0 ? path.split(".") : undefined,
						},
					] as ValidationIssue[],
				} as const;
			}

			throw e;
		}
	}
}

export function yupAdapter() {
	return new YupAdapter();
}


================================================
File: /packages/next-safe-action/src/adapters/typebox.ts
================================================
// Code based on https://github.com/decs/typeschema/blob/main/packages/typebox/src/validation.ts

// MIT License

// Copyright (c) 2023 André Costa

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import { type TSchema } from "@sinclair/typebox";
import { TypeCompiler } from "@sinclair/typebox/compiler";
import type { IfInstalled, Infer, ValidationAdapter } from "./types";

class TypeboxAdapter implements ValidationAdapter {
	async validate<S extends IfInstalled<TSchema>>(schema: S, data: unknown) {
		const result = TypeCompiler.Compile(schema);

		if (result.Check(data)) {
			return {
				success: true,
				data: data as Infer<S>,
			} as const;
		}

		return {
			success: false,
			issues: [...result.Errors(data)].map(({ message, path }) => ({
				message,
				path: path.split("/").slice(1),
			})),
		} as const;
	}
}

export function typeboxAdapter() {
	return new TypeboxAdapter();
}


================================================
File: /packages/next-safe-action/src/adapters/zod.ts
================================================
// Code based on https://github.com/decs/typeschema/blob/main/packages/zod/src/validation.ts

// MIT License

// Copyright (c) 2023 André Costa

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import type { z } from "zod";
import type { IfInstalled, Infer, ValidationAdapter } from "./types";

class ZodAdapter implements ValidationAdapter {
	async validate<S extends IfInstalled<z.ZodType>>(schema: S, data: unknown) {
		const result = await schema.safeParseAsync(data);

		if (result.success) {
			return {
				success: true,
				data: result.data as Infer<S>,
			} as const;
		}

		return {
			success: false,
			issues: result.error.issues.map(({ message, path }) => ({ message, path })),
		} as const;
	}
}

export function zodAdapter() {
	return new ZodAdapter();
}


================================================
File: /packages/next-safe-action/src/adapters/valibot.ts
================================================
// Code based on https://github.com/decs/typeschema/blob/main/packages/valibot/src/validation.ts

// MIT License

// Copyright (c) 2023 André Costa

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import { getDotPath, safeParseAsync, type GenericSchema, type GenericSchemaAsync } from "valibot";
import type { IfInstalled, Infer, ValidationAdapter } from "./types";

class ValibotAdapter implements ValidationAdapter {
	async validate<S extends IfInstalled<GenericSchema | GenericSchemaAsync>>(schema: S, data: unknown) {
		const result = await safeParseAsync(schema, data);

		if (result.success) {
			return {
				success: true,
				data: result.output as Infer<S>,
			} as const;
		}

		return {
			success: false,
			issues: result.issues.map((issue) => ({
				message: issue.message,
				path: getDotPath(issue)?.split("."),
			})),
		} as const;
	}
}

export function valibotAdapter() {
	return new ValibotAdapter();
}


================================================
File: /turbo.json
================================================
{
	"$schema": "https://turbo.build/schema.json",
	"ui": "stream",
	"tasks": {
		"build": {
			"dependsOn": ["^build"],
			"outputs": [".next/**", "!.next/cache/**", "dist/**", "build/**"]
		},
		"test": {},
		"lint": {},
		"deploy": {
			"dependsOn": ["build", "lint"],
			"env": ["NPM_TOKEN", "GITHUB_TOKEN"]
		},
		"dev": {
			"cache": false,
			"persistent": true
		}
	}
}


================================================
File: /README.md
================================================
<div align="center">
  <img src="https://raw.githubusercontent.com/TheEdoRan/next-safe-action/main/assets/logo.png" alt="next-safe-action logo" width="36" height="36">
  <a href="https://github.com/TheEdoRan/next-safe-action"><h1>next-safe-action</h1></a>
</div>

**next-safe-action** is a library that takes full advantage of the latest and greatest Next.js, React and TypeScript features to let you define **type safe** Server Actions and execute them inside React Components.

## How does it work?

Like magic. 🪄

https://github.com/TheEdoRan/next-safe-action/assets/1337629/664eb3ee-92f3-4d4a-ba1b-a3b1c13fff04

## Features

- ✅ Pretty simple
- ✅ End-to-end type safety
- ✅ Form Actions support
- ✅ Powerful middleware system
- ✅ Input/output validation using multiple validation libraries
- ✅ Advanced server error handling
- ✅ Optimistic updates

## Documentation

**Explore the documentation for the current stable version of the library on the [next-safe-action v7 website](https://next-safe-action.dev).** ✨

### Looking for v6 docs?

You can keep using version 6 and eventually upgrade to version 7. Check out the v6 documentation [here](https://v6.next-safe-action.dev).

## Migrate from v6 to v7

Check out the [v6 to v7 migration guide](https://next-safe-action.dev/docs/migrations/v6-to-v7) to learn how to update your code for v7.

## Installation

```bash
npm i next-safe-action
```

## Playground

You can find a basic working implementation of the library [here](https://github.com/TheEdoRan/next-safe-action/tree/main/apps/playground).

## Sponsors

A big shout-out to all our [sponsors](https://github.com/sponsors/TheEdoRan)! You’re the driving force behind this library's growth, and we're truly grateful for your support. ❤️

<table>
  <tr>
   <td align="center"><a href="https://arcjet.com/?ref=next-safe-action">  <picture>
    <source media="(prefers-color-scheme: dark)" srcset="https://arcjet.com/logo/arcjet-dark-lockup-voyage-horizontal.svg">
    <img src="https://arcjet.com/logo/arcjet-light-lockup-voyage-horizontal.svg" alt="Arcjet Logo" height="128" width="auto">
  </picture><br />Arcjet</a></td>
  </tr>
</table>

## Contributing

If you want to contribute to next-safe-action, please check out the [contributing guide](https://github.com/TheEdoRan/next-safe-action/blob/main/CONTRIBUTING.md).

If you found bugs or just want to ask a question, feel free to open an issue or a discussion by following the [issue templates](https://github.com/TheEdoRan/next-safe-action/issues/new/choose).

## Contributors

<a href="https://github.com/TheEdoRan/next-safe-action/graphs/contributors">
  <img src="https://contrib.rocks/image?repo=TheEdoRan/next-safe-action" />
</a>

Made with [contrib.rocks](https://contrib.rocks).

## License

next-safe-action is released under the [MIT License](https://github.com/TheEdoRan/next-safe-action/blob/main/LICENSE).


